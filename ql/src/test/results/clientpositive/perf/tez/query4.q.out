PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 34 (BROADCAST_EDGE)
Map 11 <- Reducer 35 (BROADCAST_EDGE), Reducer 41 (BROADCAST_EDGE)
Map 15 <- Reducer 36 (BROADCAST_EDGE), Reducer 42 (BROADCAST_EDGE)
Map 19 <- Reducer 37 (BROADCAST_EDGE)
Map 23 <- Reducer 33 (BROADCAST_EDGE), Reducer 40 (BROADCAST_EDGE)
Map 27 <- Reducer 32 (BROADCAST_EDGE), Reducer 39 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 31 (SIMPLE_EDGE)
Reducer 13 <- Map 38 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 16 <- Map 15 (SIMPLE_EDGE), Map 31 (SIMPLE_EDGE)
Reducer 17 <- Map 38 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 31 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (SIMPLE_EDGE), Map 31 (SIMPLE_EDGE)
Reducer 21 <- Map 38 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE)
Reducer 24 <- Map 23 (SIMPLE_EDGE), Map 31 (SIMPLE_EDGE)
Reducer 25 <- Map 38 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (SIMPLE_EDGE)
Reducer 28 <- Map 27 (SIMPLE_EDGE), Map 31 (SIMPLE_EDGE)
Reducer 29 <- Map 38 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE)
Reducer 3 <- Map 38 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 29 (SIMPLE_EDGE)
Reducer 32 <- Map 31 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 31 (CUSTOM_SIMPLE_EDGE)
Reducer 34 <- Map 31 (CUSTOM_SIMPLE_EDGE)
Reducer 35 <- Map 31 (CUSTOM_SIMPLE_EDGE)
Reducer 36 <- Map 31 (CUSTOM_SIMPLE_EDGE)
Reducer 37 <- Map 31 (CUSTOM_SIMPLE_EDGE)
Reducer 39 <- Map 38 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Map 38 (CUSTOM_SIMPLE_EDGE)
Reducer 41 <- Map 38 (CUSTOM_SIMPLE_EDGE)
Reducer 42 <- Map 38 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 14 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 18 (SIMPLE_EDGE), Reducer 5 (ONE_TO_ONE_EDGE)
Reducer 7 <- Reducer 22 (SIMPLE_EDGE), Reducer 6 (ONE_TO_ONE_EDGE)
Reducer 8 <- Reducer 26 (SIMPLE_EDGE), Reducer 7 (ONE_TO_ONE_EDGE)
Reducer 9 <- Reducer 30 (SIMPLE_EDGE), Reducer 8 (ONE_TO_ONE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 10 vectorized
      File Output Operator [FS_595]
        Limit [LIM_594] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_593] (rows=191662559 width=88)
            Output:["_col0"]
          <-Reducer 9 [SIMPLE_EDGE]
            SHUFFLE [RS_147]
              Select Operator [SEL_146] (rows=191662559 width=88)
                Output:["_col0"]
                Filter Operator [FIL_145] (rows=191662559 width=88)
                  predicate:CASE WHEN (_col3 is not null) THEN (CASE WHEN (_col5 is not null) THEN (((_col9 / _col5) > (_col12 / _col3))) ELSE ((null > (_col12 / _col3))) END) ELSE (CASE WHEN (_col5 is not null) THEN (((_col9 / _col5) > null)) ELSE (null) END) END
                  Merge Join Operator [MERGEJOIN_478] (rows=383325119 width=88)
                    Conds:RS_142._col2=RS_592._col0(Inner),Output:["_col3","_col5","_col9","_col11","_col12"]
                  <-Reducer 30 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_592]
                      PartitionCols:_col0
                      Select Operator [SEL_591] (rows=348477374 width=88)
                        Output:["_col0","_col1","_col2"]
                        Group By Operator [GBY_590] (rows=348477374 width=88)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                        <-Reducer 29 [SIMPLE_EDGE]
                          SHUFFLE [RS_126]
                            PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                            Group By Operator [GBY_125] (rows=696954748 width=88)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                              Select Operator [SEL_123] (rows=696954748 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                Merge Join Operator [MERGEJOIN_473] (rows=696954748 width=88)
                                  Conds:RS_120._col1=RS_518._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                <-Map 38 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_518]
                                    PartitionCols:_col0
                                    Select Operator [SEL_517] (rows=80000000 width=860)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                      Filter Operator [FIL_516] (rows=80000000 width=860)
                                        predicate:(c_customer_id is not null and c_customer_sk is not null)
                                        TableScan [TS_114] (rows=80000000 width=860)
                                          default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name","c_preferred_cust_flag","c_birth_country","c_login","c_email_address"]
                                <-Reducer 28 [SIMPLE_EDGE]
                                  SHUFFLE [RS_120]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_472] (rows=633595212 width=88)
                                      Conds:RS_589._col0=RS_487._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                    <-Map 31 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_487]
                                        PartitionCols:_col0
                                        Select Operator [SEL_483] (rows=36524 width=1119)
                                          Output:["_col0"]
                                          Filter Operator [FIL_479] (rows=36524 width=1119)
                                            predicate:((d_year = 2002) and d_date_sk is not null)
                                            TableScan [TS_111] (rows=73049 width=1119)
                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                    <-Map 27 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_589]
                                        PartitionCols:_col0
                                        Select Operator [SEL_588] (rows=575995635 width=88)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          Filter Operator [FIL_587] (rows=575995635 width=88)
                                            predicate:((ss_customer_sk BETWEEN DynamicValue(RS_121_customer_c_customer_sk_min) AND DynamicValue(RS_121_customer_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_121_customer_c_customer_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_118_date_dim_d_date_sk_min) AND DynamicValue(RS_118_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_118_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                            TableScan [TS_108] (rows=575995635 width=88)
                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                                            <-Reducer 32 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_584]
                                                Group By Operator [GBY_583] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_505]
                                                    Group By Operator [GBY_499] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_488] (rows=36524 width=1119)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_483]
                                            <-Reducer 39 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_586]
                                                Group By Operator [GBY_585] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=80000000)"]
                                                <-Map 38 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_532]
                                                    Group By Operator [GBY_528] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=80000000)"]
                                                      Select Operator [SEL_519] (rows=80000000 width=860)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_517]
                  <-Reducer 8 [ONE_TO_ONE_EDGE]
                    FORWARD [RS_142]
                      PartitionCols:_col2
                      Filter Operator [FIL_141] (rows=95828623 width=135)
                        predicate:CASE WHEN (_col7 is not null) THEN (CASE WHEN (_col5 is not null) THEN (((_col9 / _col5) > (_col1 / _col7))) ELSE ((null > (_col1 / _col7))) END) ELSE (CASE WHEN (_col5 is not null) THEN (((_col9 / _col5) > null)) ELSE (null) END) END
                        Merge Join Operator [MERGEJOIN_477] (rows=191657247 width=135)
                          Conds:RS_138._col2=RS_582._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col7","_col9"]
                        <-Reducer 26 [SIMPLE_EDGE] vectorized
                          SHUFFLE [RS_582]
                            PartitionCols:_col0
                            Select Operator [SEL_581] (rows=174233858 width=135)
                              Output:["_col0","_col1"]
                              Group By Operator [GBY_580] (rows=174233858 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                              <-Reducer 25 [SIMPLE_EDGE]
                                SHUFFLE [RS_105]
                                  PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                  Group By Operator [GBY_104] (rows=348467716 width=135)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                    Select Operator [SEL_102] (rows=348467716 width=135)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                      Merge Join Operator [MERGEJOIN_471] (rows=348467716 width=135)
                                        Conds:RS_99._col1=RS_520._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                      <-Map 38 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_520]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_517]
                                      <-Reducer 24 [SIMPLE_EDGE]
                                        SHUFFLE [RS_99]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_470] (rows=316788826 width=135)
                                            Conds:RS_579._col0=RS_489._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                          <-Map 31 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_489]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_483]
                                          <-Map 23 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_579]
                                              PartitionCols:_col0
                                              Select Operator [SEL_578] (rows=287989836 width=135)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                Filter Operator [FIL_577] (rows=287989836 width=135)
                                                  predicate:((cs_bill_customer_sk BETWEEN DynamicValue(RS_100_customer_c_customer_sk_min) AND DynamicValue(RS_100_customer_c_customer_sk_max) and in_bloom_filter(cs_bill_customer_sk, DynamicValue(RS_100_customer_c_customer_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_97_date_dim_d_date_sk_min) AND DynamicValue(RS_97_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_97_date_dim_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                  TableScan [TS_87] (rows=287989836 width=135)
                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                                                  <-Reducer 33 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_574]
                                                      Group By Operator [GBY_573] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_506]
                                                          Group By Operator [GBY_500] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_490] (rows=36524 width=1119)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_483]
                                                  <-Reducer 40 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_576]
                                                      Group By Operator [GBY_575] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=80000000)"]
                                                      <-Map 38 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_533]
                                                          Group By Operator [GBY_529] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=80000000)"]
                                                            Select Operator [SEL_521] (rows=80000000 width=860)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_517]
                        <-Reducer 7 [ONE_TO_ONE_EDGE]
                          FORWARD [RS_138]
                            PartitionCols:_col2
                            Merge Join Operator [MERGEJOIN_476] (rows=154607802 width=88)
                              Conds:RS_135._col2=RS_572._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col7"]
                            <-Reducer 22 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_572]
                                PartitionCols:_col0
                                Select Operator [SEL_571] (rows=29040539 width=135)
                                  Output:["_col0","_col1"]
                                  Filter Operator [FIL_570] (rows=29040539 width=135)
                                    predicate:(_col7 > 0)
                                    Select Operator [SEL_569] (rows=87121617 width=135)
                                      Output:["_col0","_col7"]
                                      Group By Operator [GBY_568] (rows=87121617 width=135)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                      <-Reducer 21 [SIMPLE_EDGE]
                                        SHUFFLE [RS_83]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                          Group By Operator [GBY_82] (rows=174243235 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                            Select Operator [SEL_80] (rows=174243235 width=135)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                              Merge Join Operator [MERGEJOIN_469] (rows=174243235 width=135)
                                                Conds:RS_77._col1=RS_527._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                              <-Map 38 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_527]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_517]
                                              <-Reducer 20 [SIMPLE_EDGE]
                                                SHUFFLE [RS_77]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_468] (rows=158402938 width=135)
                                                    Conds:RS_567._col0=RS_497._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                                  <-Map 31 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_497]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_486] (rows=36524 width=1119)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_482] (rows=36524 width=1119)
                                                          predicate:((d_year = 2001) and d_date_sk is not null)
                                                           Please refer to the previous TableScan [TS_111]
                                                  <-Map 19 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_567]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_566] (rows=144002668 width=135)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                        Filter Operator [FIL_565] (rows=144002668 width=135)
                                                          predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_75_date_dim_d_date_sk_min) AND DynamicValue(RS_75_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_75_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                          TableScan [TS_65] (rows=144002668 width=135)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                                                          <-Reducer 37 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_564]
                                                              Group By Operator [GBY_563] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_510]
                                                                  Group By Operator [GBY_504] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_498] (rows=36524 width=1119)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_486]
                            <-Reducer 6 [ONE_TO_ONE_EDGE]
                              FORWARD [RS_135]
                                PartitionCols:_col2
                                Merge Join Operator [MERGEJOIN_475] (rows=140552545 width=88)
                                  Conds:RS_132._col2=RS_562._col0(Inner),Output:["_col1","_col2","_col3","_col5"]
                                <-Reducer 18 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_562]
                                    PartitionCols:_col0
                                    Select Operator [SEL_561] (rows=58077952 width=135)
                                      Output:["_col0","_col1"]
                                      Filter Operator [FIL_560] (rows=58077952 width=135)
                                        predicate:(_col7 > 0)
                                        Select Operator [SEL_559] (rows=174233858 width=135)
                                          Output:["_col0","_col7"]
                                          Group By Operator [GBY_558] (rows=174233858 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                          <-Reducer 17 [SIMPLE_EDGE]
                                            SHUFFLE [RS_61]
                                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                              Group By Operator [GBY_60] (rows=348467716 width=135)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                                Select Operator [SEL_58] (rows=348467716 width=135)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                  Merge Join Operator [MERGEJOIN_467] (rows=348467716 width=135)
                                                    Conds:RS_55._col1=RS_525._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_525]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_517]
                                                  <-Reducer 16 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_55]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_466] (rows=316788826 width=135)
                                                        Conds:RS_557._col0=RS_495._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                                      <-Map 31 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_495]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_485] (rows=36524 width=1119)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_481] (rows=36524 width=1119)
                                                              predicate:((d_year = 2001) and d_date_sk is not null)
                                                               Please refer to the previous TableScan [TS_111]
                                                      <-Map 15 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_557]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_556] (rows=287989836 width=135)
                                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                            Filter Operator [FIL_555] (rows=287989836 width=135)
                                                              predicate:((cs_bill_customer_sk BETWEEN DynamicValue(RS_56_customer_c_customer_sk_min) AND DynamicValue(RS_56_customer_c_customer_sk_max) and in_bloom_filter(cs_bill_customer_sk, DynamicValue(RS_56_customer_c_customer_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_53_date_dim_d_date_sk_min) AND DynamicValue(RS_53_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_53_date_dim_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                              TableScan [TS_43] (rows=287989836 width=135)
                                                                default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                                                              <-Reducer 36 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_552]
                                                                  Group By Operator [GBY_551] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_509]
                                                                      Group By Operator [GBY_503] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_496] (rows=36524 width=1119)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_485]
                                                              <-Reducer 42 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_554]
                                                                  Group By Operator [GBY_553] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=80000000)"]
                                                                  <-Map 38 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_535]
                                                                      Group By Operator [GBY_531] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=80000000)"]
                                                                        Select Operator [SEL_526] (rows=80000000 width=860)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_517]
                                <-Reducer 5 [ONE_TO_ONE_EDGE]
                                  FORWARD [RS_132]
                                    PartitionCols:_col2
                                    Merge Join Operator [MERGEJOIN_474] (rows=127775039 width=88)
                                      Conds:RS_538._col0=RS_550._col0(Inner),Output:["_col1","_col2","_col3"]
                                    <-Reducer 14 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_550]
                                        PartitionCols:_col0
                                        Select Operator [SEL_549] (rows=116159124 width=88)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_548] (rows=116159124 width=88)
                                            predicate:(_col7 > 0)
                                            Select Operator [SEL_547] (rows=348477374 width=88)
                                              Output:["_col0","_col7"]
                                              Group By Operator [GBY_546] (rows=348477374 width=88)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                              <-Reducer 13 [SIMPLE_EDGE]
                                                SHUFFLE [RS_39]
                                                  PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                                  Group By Operator [GBY_38] (rows=696954748 width=88)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                                    Select Operator [SEL_36] (rows=696954748 width=88)
                                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                      Merge Join Operator [MERGEJOIN_465] (rows=696954748 width=88)
                                                        Conds:RS_33._col1=RS_523._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                                      <-Map 38 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_523]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_517]
                                                      <-Reducer 12 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_33]
                                                          PartitionCols:_col1
                                                          Merge Join Operator [MERGEJOIN_464] (rows=633595212 width=88)
                                                            Conds:RS_545._col0=RS_493._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                                          <-Map 31 [SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_493]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_484] (rows=36524 width=1119)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_480] (rows=36524 width=1119)
                                                                  predicate:((d_year = 2001) and d_date_sk is not null)
                                                                   Please refer to the previous TableScan [TS_111]
                                                          <-Map 11 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_545]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_544] (rows=575995635 width=88)
                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                                Filter Operator [FIL_543] (rows=575995635 width=88)
                                                                  predicate:((ss_customer_sk BETWEEN DynamicValue(RS_34_customer_c_customer_sk_min) AND DynamicValue(RS_34_customer_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_34_customer_c_customer_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_31_date_dim_d_date_sk_min) AND DynamicValue(RS_31_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_31_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                                  TableScan [TS_21] (rows=575995635 width=88)
                                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                                                                  <-Reducer 35 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_540]
                                                                      Group By Operator [GBY_539] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                      <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_508]
                                                                          Group By Operator [GBY_502] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                            Select Operator [SEL_494] (rows=36524 width=1119)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Select Operator [SEL_484]
                                                                  <-Reducer 41 [BROADCAST_EDGE] vectorized
                                                                    BROADCAST [RS_542]
                                                                      Group By Operator [GBY_541] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=80000000)"]
                                                                      <-Map 38 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                        PARTITION_ONLY_SHUFFLE [RS_534]
                                                                          Group By Operator [GBY_530] (rows=1 width=12)
                                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=80000000)"]
                                                                            Select Operator [SEL_524] (rows=80000000 width=860)
                                                                              Output:["_col0"]
                                                                               Please refer to the previous Select Operator [SEL_517]
                                    <-Reducer 4 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_538]
                                        PartitionCols:_col0
                                        Select Operator [SEL_537] (rows=87121617 width=135)
                                          Output:["_col0","_col1"]
                                          Group By Operator [GBY_536] (rows=87121617 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                          <-Reducer 3 [SIMPLE_EDGE]
                                            SHUFFLE [RS_18]
                                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                              Group By Operator [GBY_17] (rows=174243235 width=135)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                                Select Operator [SEL_15] (rows=174243235 width=135)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                  Merge Join Operator [MERGEJOIN_463] (rows=174243235 width=135)
                                                    Conds:RS_12._col1=RS_522._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                                  <-Map 38 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_522]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_517]
                                                  <-Reducer 2 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_12]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_462] (rows=158402938 width=135)
                                                        Conds:RS_515._col0=RS_491._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                                      <-Map 31 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_491]
                                                          PartitionCols:_col0
                                                           Please refer to the previous Select Operator [SEL_483]
                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_515]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_514] (rows=144002668 width=135)
                                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                            Filter Operator [FIL_513] (rows=144002668 width=135)
                                                              predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_10_date_dim_d_date_sk_min) AND DynamicValue(RS_10_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_10_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                              TableScan [TS_0] (rows=144002668 width=135)
                                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                                                              <-Reducer 34 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_512]
                                                                  Group By Operator [GBY_511] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_507]
                                                                      Group By Operator [GBY_501] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_492] (rows=36524 width=1119)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_483]

