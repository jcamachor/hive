Warning: Shuffle Join MERGEJOIN[290][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 8' is a cross product
PREHOOK: query: explain
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_birth_country = upper(ca_country)
  and s_zip = ca_zip
and s_market_id=7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'orchid'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_birth_country = upper(ca_country)
  and s_zip = ca_zip
and s_market_id=7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'orchid'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 18 (BROADCAST_EDGE), Reducer 20 (BROADCAST_EDGE)
Map 24 <- Reducer 21 (BROADCAST_EDGE)
Reducer 10 <- Map 24 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 11 <- Map 19 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Map 22 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Map 17 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 23 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (CUSTOM_SIMPLE_EDGE)
Reducer 21 <- Map 19 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 17 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 19 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 22 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 23 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 16 (CUSTOM_SIMPLE_EDGE), Reducer 7 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8
      File Output Operator [FS_91]
        Select Operator [SEL_90] (rows=82145873 width=380)
          Output:["_col0","_col1","_col2","_col3"]
          Filter Operator [FIL_89] (rows=82145873 width=492)
            predicate:(_col3 > _col4)
            Merge Join Operator [MERGEJOIN_290] (rows=246437620 width=492)
              Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
            <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
              PARTITION_ONLY_SHUFFLE [RS_345]
                Select Operator [SEL_344] (rows=1 width=112)
                  Output:["_col0"]
                  Group By Operator [GBY_343] (rows=1 width=120)
                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                  <-Reducer 15 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_342]
                      Group By Operator [GBY_341] (rows=1 width=120)
                        Output:["_col0","_col1"],aggregations:["sum(_col10)","count(_col10)"]
                        Select Operator [SEL_340] (rows=1557378305886 width=932)
                          Output:["_col10"]
                          Group By Operator [GBY_339] (rows=1557378305886 width=932)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9
                          <-Reducer 14 [SIMPLE_EDGE]
                            SHUFFLE [RS_78]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                              Group By Operator [GBY_77] (rows=1557378305886 width=932)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"],aggregations:["sum(_col4)"],keys:_col22, _col17, _col18, _col19, _col20, _col21, _col13, _col14, _col8, _col10
                                Merge Join Operator [MERGEJOIN_289] (rows=1557378305886 width=932)
                                  Conds:RS_73._col11, _col15=RS_328._col1, upper(_col2)(Inner),Output:["_col4","_col8","_col10","_col13","_col14","_col17","_col18","_col19","_col20","_col21","_col22"]
                                <-Map 23 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_328]
                                    PartitionCols:_col1, upper(_col2)
                                    Select Operator [SEL_326] (rows=40000000 width=272)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_325] (rows=40000000 width=272)
                                        predicate:(ca_zip is not null and upper(ca_country) is not null)
                                        TableScan [TS_15] (rows=40000000 width=272)
                                          default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_state","ca_zip","ca_country"]
                                <-Reducer 13 [SIMPLE_EDGE]
                                  SHUFFLE [RS_73]
                                    PartitionCols:_col11, _col15
                                    Merge Join Operator [MERGEJOIN_288] (rows=394834335 width=1021)
                                      Conds:RS_70._col0=RS_297._col0(Inner),Output:["_col4","_col8","_col10","_col11","_col13","_col14","_col15","_col17","_col18","_col19","_col20","_col21"]
                                    <-Map 17 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_297]
                                        PartitionCols:_col0
                                        Select Operator [SEL_294] (rows=462000 width=384)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                          Filter Operator [FIL_292] (rows=462000 width=384)
                                            predicate:i_item_sk is not null
                                            TableScan [TS_6] (rows=462000 width=384)
                                              default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_size","i_color","i_units","i_manager_id"]
                                    <-Reducer 12 [SIMPLE_EDGE]
                                      SHUFFLE [RS_70]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_287] (rows=394834335 width=644)
                                          Conds:RS_67._col1=RS_324._col0(Inner),Output:["_col0","_col4","_col8","_col10","_col11","_col13","_col14","_col15"]
                                        <-Map 22 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_324]
                                            PartitionCols:_col0
                                            Select Operator [SEL_322] (rows=80000000 width=276)
                                              Output:["_col0","_col1","_col2","_col3"]
                                              Filter Operator [FIL_321] (rows=80000000 width=276)
                                                predicate:(c_birth_country is not null and c_customer_sk is not null)
                                                TableScan [TS_12] (rows=80000000 width=276)
                                                  default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_first_name","c_last_name","c_birth_country"]
                                        <-Reducer 11 [SIMPLE_EDGE]
                                          SHUFFLE [RS_67]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_286] (rows=394834335 width=376)
                                              Conds:RS_64._col2=RS_306._col0(Inner),Output:["_col0","_col1","_col4","_col8","_col10","_col11"]
                                            <-Map 19 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_306]
                                                PartitionCols:_col0
                                                Select Operator [SEL_303] (rows=155 width=271)
                                                  Output:["_col0","_col1","_col3","_col4"]
                                                  Filter Operator [FIL_302] (rows=155 width=271)
                                                    predicate:((s_market_id = 7) and s_store_sk is not null and s_zip is not null)
                                                    TableScan [TS_9] (rows=1704 width=270)
                                                      default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_market_id","s_state","s_zip"]
                                            <-Reducer 10 [SIMPLE_EDGE]
                                              SHUFFLE [RS_64]
                                                PartitionCols:_col2
                                                Merge Join Operator [MERGEJOIN_285] (rows=537799798 width=118)
                                                  Conds:RS_338._col0, _col3=RS_320._col0, _col1(Inner),Output:["_col0","_col1","_col2","_col4"]
                                                <-Map 9 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_320]
                                                    PartitionCols:_col0, _col1
                                                    Select Operator [SEL_318] (rows=57591150 width=8)
                                                      Output:["_col0","_col1"]
                                                      Filter Operator [FIL_317] (rows=57591150 width=8)
                                                        predicate:(sr_item_sk is not null and sr_ticket_number is not null)
                                                        TableScan [TS_3] (rows=57591150 width=8)
                                                          default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number"]
                                                <-Map 24 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_338]
                                                    PartitionCols:_col0, _col3
                                                    Select Operator [SEL_337] (rows=525333486 width=122)
                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                      Filter Operator [FIL_336] (rows=525333486 width=122)
                                                        predicate:((ss_store_sk BETWEEN DynamicValue(RS_65_store_s_store_sk_min) AND DynamicValue(RS_65_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_65_store_s_store_sk_bloom_filter))) and ss_customer_sk is not null and ss_item_sk is not null and ss_store_sk is not null and ss_ticket_number is not null)
                                                        TableScan [TS_43] (rows=575995635 width=122)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_sales_price"]
                                                        <-Reducer 21 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_335]
                                                            Group By Operator [GBY_334] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_311]
                                                                Group By Operator [GBY_309] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_307] (rows=155 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_303]
            <-Reducer 7 [CUSTOM_SIMPLE_EDGE] vectorized
              PARTITION_ONLY_SHUFFLE [RS_333]
                Select Operator [SEL_332] (rows=246437620 width=380)
                  Output:["_col0","_col1","_col2","_col3"]
                  Group By Operator [GBY_331] (rows=246437620 width=380)
                    Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col9)"],keys:_col1, _col2, _col7
                    Select Operator [SEL_330] (rows=227121909081 width=843)
                      Output:["_col1","_col2","_col7","_col9"]
                      Group By Operator [GBY_329] (rows=227121909081 width=843)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8
                      <-Reducer 6 [SIMPLE_EDGE]
                        SHUFFLE [RS_35]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_34] (rows=227121909081 width=843)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"],aggregations:["sum(_col4)"],keys:_col19, _col20, _col14, _col22, _col8, _col9, _col11, _col12, _col16
                            Merge Join Operator [MERGEJOIN_284] (rows=227121909081 width=843)
                              Conds:RS_30._col17, _col21=RS_327._col1, upper(_col2)(Inner),Output:["_col4","_col8","_col9","_col11","_col12","_col14","_col16","_col19","_col20","_col22"]
                            <-Map 23 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_327]
                                PartitionCols:_col1, upper(_col2)
                                 Please refer to the previous Select Operator [SEL_326]
                            <-Reducer 5 [SIMPLE_EDGE]
                              SHUFFLE [RS_30]
                                PartitionCols:_col17, _col21
                                Merge Join Operator [MERGEJOIN_283] (rows=57581082 width=893)
                                  Conds:RS_27._col1=RS_323._col0(Inner),Output:["_col4","_col8","_col9","_col11","_col12","_col14","_col16","_col17","_col19","_col20","_col21"]
                                <-Map 22 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_323]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_322]
                                <-Reducer 4 [SIMPLE_EDGE]
                                  SHUFFLE [RS_27]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_282] (rows=57581082 width=623)
                                      Conds:RS_24._col2=RS_304._col0(Inner),Output:["_col1","_col4","_col8","_col9","_col11","_col12","_col14","_col16","_col17"]
                                    <-Map 19 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_304]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_303]
                                    <-Reducer 3 [SIMPLE_EDGE]
                                      SHUFFLE [RS_24]
                                        PartitionCols:_col2
                                        Merge Join Operator [MERGEJOIN_281] (rows=78430601 width=375)
                                          Conds:RS_21._col0=RS_295._col0(Inner),Output:["_col1","_col2","_col4","_col8","_col9","_col11","_col12"]
                                        <-Map 17 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_295]
                                            PartitionCols:_col0
                                            Select Operator [SEL_293] (rows=7000 width=385)
                                              Output:["_col0","_col1","_col2","_col4","_col5"]
                                              Filter Operator [FIL_291] (rows=7000 width=384)
                                                predicate:((i_color = 'orchid') and i_item_sk is not null)
                                                 Please refer to the previous TableScan [TS_6]
                                        <-Reducer 2 [SIMPLE_EDGE]
                                          SHUFFLE [RS_21]
                                            PartitionCols:_col0
                                            Merge Join Operator [MERGEJOIN_280] (rows=537799798 width=118)
                                              Conds:RS_316._col0, _col3=RS_319._col0, _col1(Inner),Output:["_col0","_col1","_col2","_col4"]
                                            <-Map 9 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_319]
                                                PartitionCols:_col0, _col1
                                                 Please refer to the previous Select Operator [SEL_318]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_316]
                                                PartitionCols:_col0, _col3
                                                Select Operator [SEL_315] (rows=525333486 width=122)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  Filter Operator [FIL_314] (rows=525333486 width=122)
                                                    predicate:((ss_item_sk BETWEEN DynamicValue(RS_22_item_i_item_sk_min) AND DynamicValue(RS_22_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_22_item_i_item_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_25_store_s_store_sk_min) AND DynamicValue(RS_25_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_25_store_s_store_sk_bloom_filter))) and ss_customer_sk is not null and ss_item_sk is not null and ss_store_sk is not null and ss_ticket_number is not null)
                                                    TableScan [TS_0] (rows=575995635 width=122)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_sales_price"]
                                                    <-Reducer 18 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_301]
                                                        Group By Operator [GBY_300] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_299]
                                                            Group By Operator [GBY_298] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_296] (rows=7000 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_293]
                                                    <-Reducer 20 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_313]
                                                        Group By Operator [GBY_312] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_310]
                                                            Group By Operator [GBY_308] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_305] (rows=155 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_303]

