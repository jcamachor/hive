PREHOOK: query: explain
select   
     i_item_id
    ,i_item_desc
    ,s_store_id
    ,s_store_name
    ,sum(ss_quantity)        as store_sales_quantity
    ,sum(sr_return_quantity) as store_returns_quantity
    ,sum(cs_quantity)        as catalog_sales_quantity
 from
    store_sales
   ,store_returns
   ,catalog_sales
   ,date_dim             d1
   ,date_dim             d2
   ,date_dim             d3
   ,store
   ,item
 where
     d1.d_moy               = 4 
 and d1.d_year              = 1999
 and d1.d_date_sk           = ss_sold_date_sk
 and i_item_sk              = ss_item_sk
 and s_store_sk             = ss_store_sk
 and ss_customer_sk         = sr_customer_sk
 and ss_item_sk             = sr_item_sk
 and ss_ticket_number       = sr_ticket_number
 and sr_returned_date_sk    = d2.d_date_sk
 and d2.d_moy               between 4 and  4 + 3 
 and d2.d_year              = 1999
 and sr_customer_sk         = cs_bill_customer_sk
 and sr_item_sk             = cs_item_sk
 and cs_sold_date_sk        = d3.d_date_sk     
 and d3.d_year              in (1999,1999+1,1999+2)
 group by
    i_item_id
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 order by
    i_item_id 
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select   
     i_item_id
    ,i_item_desc
    ,s_store_id
    ,s_store_name
    ,sum(ss_quantity)        as store_sales_quantity
    ,sum(sr_return_quantity) as store_returns_quantity
    ,sum(cs_quantity)        as catalog_sales_quantity
 from
    store_sales
   ,store_returns
   ,catalog_sales
   ,date_dim             d1
   ,date_dim             d2
   ,date_dim             d3
   ,store
   ,item
 where
     d1.d_moy               = 4 
 and d1.d_year              = 1999
 and d1.d_date_sk           = ss_sold_date_sk
 and i_item_sk              = ss_item_sk
 and s_store_sk             = ss_store_sk
 and ss_customer_sk         = sr_customer_sk
 and ss_item_sk             = sr_item_sk
 and ss_ticket_number       = sr_ticket_number
 and sr_returned_date_sk    = d2.d_date_sk
 and d2.d_moy               between 4 and  4 + 3 
 and d2.d_year              = 1999
 and sr_customer_sk         = cs_bill_customer_sk
 and sr_item_sk             = cs_item_sk
 and cs_sold_date_sk        = d3.d_date_sk     
 and d3.d_year              in (1999,1999+1,1999+2)
 group by
    i_item_id
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 order by
    i_item_id 
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 15 <- Reducer 8 (BROADCAST_EDGE)
Map 9 <- Reducer 17 (BROADCAST_EDGE)
Reducer 10 <- Map 14 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 11 <- Map 15 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Map 16 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Map 16 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 17 <- Map 16 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 6 <- Map 5 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 7 <- Map 18 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 5 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 4 vectorized
      File Output Operator [FS_251]
        Limit [LIM_250] (rows=100 width=496)
          Number of rows:100
          Select Operator [SEL_249] (rows=7094732 width=496)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 3 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_248]
              Group By Operator [GBY_247] (rows=7094732 width=496)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
              <-Reducer 2 [SIMPLE_EDGE]
                SHUFFLE [RS_48]
                  PartitionCols:_col0, _col1, _col2, _col3
                  Group By Operator [GBY_47] (rows=7094732 width=496)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col4)","sum(_col5)","sum(_col6)"],keys:_col1, _col2, _col7, _col8
                    Top N Key Operator [TNK_98] (rows=7094732 width=478)
                      keys:_col1, _col2, _col7, _col8,sort order:++++,top n:100
                      Merge Join Operator [MERGEJOIN_214] (rows=7094732 width=478)
                        Conds:RS_216._col0=RS_44._col0(Inner),Output:["_col1","_col2","_col4","_col5","_col6","_col7","_col8"]
                      <-Map 1 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_216]
                          PartitionCols:_col0
                          Select Operator [SEL_215] (rows=462000 width=288)
                            Output:["_col0","_col1","_col2"]
                            TableScan [TS_0] (rows=462000 width=288)
                              default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id","i_item_desc"]
                      <-Reducer 7 [SIMPLE_EDGE]
                        SHUFFLE [RS_44]
                          PartitionCols:_col0
                          Select Operator [SEL_42] (rows=7094732 width=198)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                            Merge Join Operator [MERGEJOIN_213] (rows=7094732 width=198)
                              Conds:RS_39._col2=RS_246._col0(Inner),Output:["_col1","_col3","_col4","_col6","_col8","_col9"]
                            <-Map 18 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_246]
                                PartitionCols:_col0
                                Select Operator [SEL_245] (rows=1704 width=192)
                                  Output:["_col0","_col1","_col2"]
                                  TableScan [TS_34] (rows=1704 width=192)
                                    default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_id","s_store_name"]
                            <-Reducer 6 [SIMPLE_EDGE]
                              SHUFFLE [RS_39]
                                PartitionCols:_col2
                                Merge Join Operator [MERGEJOIN_212] (rows=7094732 width=10)
                                  Conds:RS_219._col0=RS_37._col4(Inner),Output:["_col1","_col2","_col3","_col4","_col6"]
                                <-Map 5 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_219]
                                    PartitionCols:_col0
                                    Select Operator [SEL_218] (rows=1957 width=4)
                                      Output:["_col0"]
                                      Filter Operator [FIL_217] (rows=1957 width=8)
                                        predicate:(d_year) IN (1999, 2000, 2001)
                                        TableScan [TS_2] (rows=73049 width=8)
                                          default@date_dim,d3,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                                <-Reducer 13 [SIMPLE_EDGE]
                                  SHUFFLE [RS_37]
                                    PartitionCols:_col4
                                    Select Operator [SEL_33] (rows=264825249 width=23)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                      Merge Join Operator [MERGEJOIN_211] (rows=264825249 width=23)
                                        Conds:RS_30._col4=RS_227._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col7"]
                                      <-Map 16 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_227]
                                          PartitionCols:_col0
                                          Select Operator [SEL_225] (rows=201 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_223] (rows=201 width=12)
                                              predicate:((d_year = 1999) and d_moy BETWEEN 4 AND 7)
                                              TableScan [TS_24] (rows=73049 width=12)
                                                default@date_dim,d2,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                      <-Reducer 12 [SIMPLE_EDGE]
                                        SHUFFLE [RS_30]
                                          PartitionCols:_col4
                                          Merge Join Operator [MERGEJOIN_210] (rows=2637748473 width=27)
                                            Conds:RS_27._col0=RS_228._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                          <-Map 16 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_228]
                                              PartitionCols:_col0
                                              Select Operator [SEL_226] (rows=50 width=4)
                                                Output:["_col0"]
                                                Filter Operator [FIL_224] (rows=50 width=12)
                                                  predicate:((d_moy = 4) and (d_year = 1999))
                                                   Please refer to the previous TableScan [TS_24]
                                          <-Reducer 11 [SIMPLE_EDGE]
                                            SHUFFLE [RS_27]
                                              PartitionCols:_col0
                                              Select Operator [SEL_20] (rows=96331893945 width=31)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                Merge Join Operator [MERGEJOIN_209] (rows=96331893945 width=31)
                                                  Conds:RS_17._col8, _col7=RS_244._col1, _col2(Inner),Output:["_col0","_col1","_col3","_col5","_col6","_col10","_col11","_col14"]
                                                <-Map 15 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_244]
                                                    PartitionCols:_col1, _col2
                                                    Select Operator [SEL_243] (rows=285117831 width=15)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_242] (rows=285117831 width=15)
                                                        predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_36_d3_d_date_sk_min) AND DynamicValue(RS_36_d3_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_36_d3_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                        TableScan [TS_11] (rows=287989836 width=15)
                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity"]
                                                        <-Reducer 8 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_241]
                                                            Group By Operator [GBY_240] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 5 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_222]
                                                                Group By Operator [GBY_221] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_220] (rows=1957 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_218]
                                                <-Reducer 10 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_17]
                                                    PartitionCols:_col8, _col7
                                                    Merge Join Operator [MERGEJOIN_208] (rows=478292911 width=31)
                                                      Conds:RS_236._col2, _col1, _col4=RS_239._col2, _col1, _col3(Inner),Output:["_col0","_col1","_col3","_col5","_col6","_col7","_col8","_col10"]
                                                    <-Map 14 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_239]
                                                        PartitionCols:_col2, _col1, _col3
                                                        Select Operator [SEL_238] (rows=53632139 width=19)
                                                          Output:["_col0","_col1","_col2","_col3","_col4"]
                                                          Filter Operator [FIL_237] (rows=53632139 width=19)
                                                            predicate:(sr_customer_sk is not null and sr_returned_date_sk is not null)
                                                            TableScan [TS_8] (rows=57591150 width=19)
                                                              default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_returned_date_sk","sr_item_sk","sr_customer_sk","sr_ticket_number","sr_return_quantity"]
                                                    <-Map 9 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_236]
                                                        PartitionCols:_col2, _col1, _col4
                                                        Select Operator [SEL_235] (rows=501694138 width=23)
                                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                          Filter Operator [FIL_234] (rows=501694138 width=23)
                                                            predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_28_d1_d_date_sk_min) AND DynamicValue(RS_28_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_28_d1_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                            TableScan [TS_5] (rows=575995635 width=23)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_quantity"]
                                                            <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_233]
                                                                Group By Operator [GBY_232] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_231]
                                                                    Group By Operator [GBY_230] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_229] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_226]

