PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 8 (BROADCAST_EDGE)
Map 38 <- Reducer 24 (BROADCAST_EDGE), Reducer 36 (BROADCAST_EDGE)
Map 39 <- Reducer 28 (BROADCAST_EDGE), Reducer 37 (BROADCAST_EDGE)
Map 40 <- Reducer 19 (BROADCAST_EDGE), Reducer 35 (BROADCAST_EDGE)
Map 41 <- Reducer 32 (BROADCAST_EDGE)
Map 42 <- Reducer 13 (BROADCAST_EDGE), Reducer 34 (BROADCAST_EDGE)
Reducer 10 <- Map 33 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Reducer 18 (ONE_TO_ONE_EDGE)
Reducer 13 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 40 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 15 <- Map 33 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE), Reducer 23 (ONE_TO_ONE_EDGE)
Reducer 18 <- Reducer 17 (ONE_TO_ONE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 19 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 20 <- Map 38 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 21 <- Map 33 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 24 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 39 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 26 <- Map 33 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Reducer 26 (SIMPLE_EDGE)
Reducer 28 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 41 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 3 <- Map 33 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 33 (SIMPLE_EDGE), Reducer 29 (SIMPLE_EDGE)
Reducer 31 <- Reducer 30 (SIMPLE_EDGE)
Reducer 32 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 34 <- Map 33 (CUSTOM_SIMPLE_EDGE)
Reducer 35 <- Map 33 (CUSTOM_SIMPLE_EDGE)
Reducer 36 <- Map 33 (CUSTOM_SIMPLE_EDGE)
Reducer 37 <- Map 33 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 12 (ONE_TO_ONE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 8 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 42 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_566]
        Limit [LIM_565] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_564] (rows=127551441 width=88)
            Output:["_col0"]
          <-Reducer 5 [SIMPLE_EDGE]
            SHUFFLE [RS_137]
              Select Operator [SEL_136] (rows=127551441 width=88)
                Output:["_col0"]
                Filter Operator [FIL_135] (rows=127551441 width=88)
                  predicate:CASE WHEN (_col5) THEN (CASE WHEN (_col6) THEN ((_col7 > (_col1 / _col4))) ELSE ((null > (_col1 / _col4))) END) ELSE (_col8) END
                  Merge Join Operator [MERGEJOIN_462] (rows=255102883 width=88)
                    Conds:RS_519._col0=RS_133._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col8"]
                  <-Reducer 12 [ONE_TO_ONE_EDGE]
                    FORWARD [RS_133]
                      PartitionCols:_col0
                      Select Operator [SEL_131] (rows=231911707 width=88)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                        Filter Operator [FIL_130] (rows=231911707 width=88)
                          predicate:CASE WHEN (_col4) THEN (CASE WHEN (_col3) THEN (((_col11 / _col2) > _col5)) ELSE (_col6) END) ELSE (CASE WHEN (_col3) THEN (((_col11 / _col2) > null)) ELSE (null) END) END
                          Merge Join Operator [MERGEJOIN_461] (rows=463823414 width=88)
                            Conds:RS_127._col0=RS_527._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9","_col11"]
                          <-Reducer 11 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_527]
                              PartitionCols:_col0
                              Select Operator [SEL_526] (rows=174233858 width=135)
                                Output:["_col0","_col1"]
                                Group By Operator [GBY_525] (rows=174233858 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                <-Reducer 10 [SIMPLE_EDGE]
                                  SHUFFLE [RS_121]
                                    PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                    Group By Operator [GBY_120] (rows=348467716 width=135)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                      Merge Join Operator [MERGEJOIN_457] (rows=348467716 width=135)
                                        Conds:RS_116._col1=RS_500._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                      <-Map 33 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_500]
                                          PartitionCols:_col0
                                          Select Operator [SEL_498] (rows=80000000 width=860)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                            TableScan [TS_6] (rows=80000000 width=860)
                                              default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name","c_preferred_cust_flag","c_birth_country","c_login","c_email_address"]
                                      <-Reducer 9 [SIMPLE_EDGE]
                                        SHUFFLE [RS_116]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_456] (rows=316788826 width=135)
                                            Conds:RS_113._col0=RS_473._col0(Inner),Output:["_col1","_col2"]
                                          <-Map 7 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_473]
                                              PartitionCols:_col0
                                              Select Operator [SEL_467] (rows=36524 width=1119)
                                                Output:["_col0"]
                                                Filter Operator [FIL_463] (rows=36524 width=1119)
                                                  predicate:(d_year = 2002)
                                                  TableScan [TS_3] (rows=73049 width=1119)
                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                          <-Map 42 [SIMPLE_EDGE]
                                            SHUFFLE [RS_113]
                                              PartitionCols:_col0
                                              Select Operator [SEL_107] (rows=287989836 width=135)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_246] (rows=287989836 width=135)
                                                  predicate:((cs_bill_customer_sk BETWEEN DynamicValue(RS_117_customer_c_customer_sk_min) AND DynamicValue(RS_117_customer_c_customer_sk_max) and in_bloom_filter(cs_bill_customer_sk, DynamicValue(RS_117_customer_c_customer_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_114_date_dim_d_date_sk_min) AND DynamicValue(RS_114_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_114_date_dim_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                  TableScan [TS_105] (rows=287989836 width=135)
                                                    default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                                                  <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_521]
                                                      Group By Operator [GBY_520] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_490]
                                                          Group By Operator [GBY_484] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_474] (rows=36524 width=1119)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_467]
                                                  <-Reducer 34 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_523]
                                                      Group By Operator [GBY_522] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=80000000)"]
                                                      <-Map 33 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_513]
                                                          Group By Operator [GBY_509] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=80000000)"]
                                                            Select Operator [SEL_501] (rows=80000000 width=860)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_498]
                          <-Reducer 18 [ONE_TO_ONE_EDGE]
                            FORWARD [RS_127]
                              PartitionCols:_col0
                              Merge Join Operator [MERGEJOIN_460] (rows=421657640 width=88)
                                Conds:RS_124._col0=RS_563._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9"]
                              <-Reducer 17 [ONE_TO_ONE_EDGE]
                                FORWARD [RS_124]
                                  PartitionCols:_col0
                                  Select Operator [SEL_84] (rows=383325119 width=88)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                    Merge Join Operator [MERGEJOIN_459] (rows=383325119 width=88)
                                      Conds:RS_81._col0=RS_535._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col5","_col7","_col8"]
                                    <-Reducer 16 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_535]
                                        PartitionCols:_col0
                                        Select Operator [SEL_534] (rows=348477374 width=88)
                                          Output:["_col0","_col1","_col2"]
                                          Group By Operator [GBY_533] (rows=348477374 width=88)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                          <-Reducer 15 [SIMPLE_EDGE]
                                            SHUFFLE [RS_75]
                                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                              Group By Operator [GBY_74] (rows=696954748 width=88)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                                Merge Join Operator [MERGEJOIN_453] (rows=696954748 width=88)
                                                  Conds:RS_70._col1=RS_502._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                <-Map 33 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_502]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_498]
                                                <-Reducer 14 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_70]
                                                    PartitionCols:_col1
                                                    Merge Join Operator [MERGEJOIN_452] (rows=633595212 width=88)
                                                      Conds:RS_67._col0=RS_475._col0(Inner),Output:["_col1","_col2"]
                                                    <-Map 7 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_475]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_467]
                                                    <-Map 40 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_67]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_61] (rows=575995635 width=88)
                                                          Output:["_col0","_col1","_col2"]
                                                          Filter Operator [FIL_240] (rows=575995635 width=88)
                                                            predicate:((ss_customer_sk BETWEEN DynamicValue(RS_71_customer_c_customer_sk_min) AND DynamicValue(RS_71_customer_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_71_customer_c_customer_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_68_date_dim_d_date_sk_min) AND DynamicValue(RS_68_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_68_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                            TableScan [TS_59] (rows=575995635 width=88)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                                                            <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_529]
                                                                Group By Operator [GBY_528] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_491]
                                                                    Group By Operator [GBY_485] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_476] (rows=36524 width=1119)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_467]
                                                            <-Reducer 35 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_531]
                                                                Group By Operator [GBY_530] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=80000000)"]
                                                                <-Map 33 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_514]
                                                                    Group By Operator [GBY_510] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=80000000)"]
                                                                      Select Operator [SEL_503] (rows=80000000 width=860)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_498]
                                    <-Reducer 23 [ONE_TO_ONE_EDGE]
                                      FORWARD [RS_81]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_458] (rows=127775039 width=88)
                                          Conds:RS_545._col0=RS_555._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col5"]
                                        <-Reducer 22 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_545]
                                            PartitionCols:_col0
                                            Select Operator [SEL_544] (rows=116159124 width=88)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_543] (rows=116159124 width=88)
                                                predicate:(_col7 > 0)
                                                Select Operator [SEL_542] (rows=348477374 width=88)
                                                  Output:["_col0","_col7"]
                                                  Group By Operator [GBY_541] (rows=348477374 width=88)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                                  <-Reducer 21 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_35]
                                                      PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                                      Group By Operator [GBY_34] (rows=696954748 width=88)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                                        Merge Join Operator [MERGEJOIN_449] (rows=696954748 width=88)
                                                          Conds:RS_30._col1=RS_504._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                        <-Map 33 [SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_504]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_498]
                                                        <-Reducer 20 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_30]
                                                            PartitionCols:_col1
                                                            Merge Join Operator [MERGEJOIN_448] (rows=633595212 width=88)
                                                              Conds:RS_27._col0=RS_477._col0(Inner),Output:["_col1","_col2"]
                                                            <-Map 7 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_477]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_468] (rows=36524 width=1119)
                                                                  Output:["_col0"]
                                                                  Filter Operator [FIL_464] (rows=36524 width=1119)
                                                                    predicate:(d_year = 2001)
                                                                     Please refer to the previous TableScan [TS_3]
                                                            <-Map 38 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_27]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_21] (rows=575995635 width=88)
                                                                  Output:["_col0","_col1","_col2"]
                                                                  Filter Operator [FIL_234] (rows=575995635 width=88)
                                                                    predicate:((ss_customer_sk BETWEEN DynamicValue(RS_31_customer_c_customer_sk_min) AND DynamicValue(RS_31_customer_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_31_customer_c_customer_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_28_date_dim_d_date_sk_min) AND DynamicValue(RS_28_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_28_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                                    TableScan [TS_19] (rows=575995635 width=88)
                                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                                                                    <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                                      BROADCAST [RS_537]
                                                                        Group By Operator [GBY_536] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                        <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_492]
                                                                            Group By Operator [GBY_486] (rows=1 width=12)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                              Select Operator [SEL_478] (rows=36524 width=1119)
                                                                                Output:["_col0"]
                                                                                 Please refer to the previous Select Operator [SEL_468]
                                                                    <-Reducer 36 [BROADCAST_EDGE] vectorized
                                                                      BROADCAST [RS_539]
                                                                        Group By Operator [GBY_538] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=80000000)"]
                                                                        <-Map 33 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                          PARTITION_ONLY_SHUFFLE [RS_515]
                                                                            Group By Operator [GBY_511] (rows=1 width=12)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=80000000)"]
                                                                              Select Operator [SEL_505] (rows=80000000 width=860)
                                                                                Output:["_col0"]
                                                                                 Please refer to the previous Select Operator [SEL_498]
                                        <-Reducer 27 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_555]
                                            PartitionCols:_col0
                                            Select Operator [SEL_554] (rows=58077952 width=135)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_553] (rows=58077952 width=135)
                                                predicate:(_col7 > 0)
                                                Select Operator [SEL_552] (rows=174233858 width=135)
                                                  Output:["_col0","_col7"]
                                                  Group By Operator [GBY_551] (rows=174233858 width=135)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                                  <-Reducer 26 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_55]
                                                      PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                                      Group By Operator [GBY_54] (rows=348467716 width=135)
                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                                        Merge Join Operator [MERGEJOIN_451] (rows=348467716 width=135)
                                                          Conds:RS_50._col1=RS_506._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                                        <-Map 33 [SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_506]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_498]
                                                        <-Reducer 25 [SIMPLE_EDGE]
                                                          SHUFFLE [RS_50]
                                                            PartitionCols:_col1
                                                            Merge Join Operator [MERGEJOIN_450] (rows=316788826 width=135)
                                                              Conds:RS_47._col0=RS_479._col0(Inner),Output:["_col1","_col2"]
                                                            <-Map 7 [SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_479]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_469] (rows=36524 width=1119)
                                                                  Output:["_col0"]
                                                                  Filter Operator [FIL_465] (rows=36524 width=1119)
                                                                    predicate:(d_year = 2001)
                                                                     Please refer to the previous TableScan [TS_3]
                                                            <-Map 39 [SIMPLE_EDGE]
                                                              SHUFFLE [RS_47]
                                                                PartitionCols:_col0
                                                                Select Operator [SEL_41] (rows=287989836 width=135)
                                                                  Output:["_col0","_col1","_col2"]
                                                                  Filter Operator [FIL_237] (rows=287989836 width=135)
                                                                    predicate:((cs_bill_customer_sk BETWEEN DynamicValue(RS_51_customer_c_customer_sk_min) AND DynamicValue(RS_51_customer_c_customer_sk_max) and in_bloom_filter(cs_bill_customer_sk, DynamicValue(RS_51_customer_c_customer_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_48_date_dim_d_date_sk_min) AND DynamicValue(RS_48_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_48_date_dim_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                                    TableScan [TS_39] (rows=287989836 width=135)
                                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                                                                    <-Reducer 28 [BROADCAST_EDGE] vectorized
                                                                      BROADCAST [RS_547]
                                                                        Group By Operator [GBY_546] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                        <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                          SHUFFLE [RS_493]
                                                                            Group By Operator [GBY_487] (rows=1 width=12)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                              Select Operator [SEL_480] (rows=36524 width=1119)
                                                                                Output:["_col0"]
                                                                                 Please refer to the previous Select Operator [SEL_469]
                                                                    <-Reducer 37 [BROADCAST_EDGE] vectorized
                                                                      BROADCAST [RS_549]
                                                                        Group By Operator [GBY_548] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=80000000)"]
                                                                        <-Map 33 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                          PARTITION_ONLY_SHUFFLE [RS_516]
                                                                            Group By Operator [GBY_512] (rows=1 width=12)
                                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=80000000)"]
                                                                              Select Operator [SEL_507] (rows=80000000 width=860)
                                                                                Output:["_col0"]
                                                                                 Please refer to the previous Select Operator [SEL_498]
                              <-Reducer 31 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_563]
                                  PartitionCols:_col0
                                  Select Operator [SEL_562] (rows=29040539 width=135)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_561] (rows=29040539 width=135)
                                      predicate:(_col7 > 0)
                                      Select Operator [SEL_560] (rows=87121617 width=135)
                                        Output:["_col0","_col7"]
                                        Group By Operator [GBY_559] (rows=87121617 width=135)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                        <-Reducer 30 [SIMPLE_EDGE]
                                          SHUFFLE [RS_101]
                                            PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                            Group By Operator [GBY_100] (rows=174243235 width=135)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                                              Merge Join Operator [MERGEJOIN_455] (rows=174243235 width=135)
                                                Conds:RS_96._col1=RS_508._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                              <-Map 33 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_508]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_498]
                                              <-Reducer 29 [SIMPLE_EDGE]
                                                SHUFFLE [RS_96]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_454] (rows=158402938 width=135)
                                                    Conds:RS_93._col0=RS_481._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 7 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_481]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_470] (rows=36524 width=1119)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_466] (rows=36524 width=1119)
                                                          predicate:(d_year = 2001)
                                                           Please refer to the previous TableScan [TS_3]
                                                  <-Map 41 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_93]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_87] (rows=144002668 width=135)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_243] (rows=144002668 width=135)
                                                          predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_94_date_dim_d_date_sk_min) AND DynamicValue(RS_94_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_94_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                          TableScan [TS_85] (rows=144002668 width=135)
                                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                                                          <-Reducer 32 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_557]
                                                              Group By Operator [GBY_556] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                SHUFFLE [RS_494]
                                                                  Group By Operator [GBY_488] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_482] (rows=36524 width=1119)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_470]
                  <-Reducer 4 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_519]
                      PartitionCols:_col0
                      Select Operator [SEL_518] (rows=87121617 width=135)
                        Output:["_col0","_col1"]
                        Group By Operator [GBY_517] (rows=87121617 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                        <-Reducer 3 [SIMPLE_EDGE]
                          SHUFFLE [RS_16]
                            PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                            Group By Operator [GBY_15] (rows=174243235 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)"],keys:_col5, _col6, _col7, _col8, _col9, _col10, _col11
                              Merge Join Operator [MERGEJOIN_447] (rows=174243235 width=135)
                                Conds:RS_11._col1=RS_499._col0(Inner),Output:["_col2","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                              <-Map 33 [SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_499]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_498]
                              <-Reducer 2 [SIMPLE_EDGE]
                                SHUFFLE [RS_11]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_446] (rows=158402938 width=135)
                                    Conds:RS_8._col0=RS_471._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 7 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_471]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_467]
                                  <-Map 1 [SIMPLE_EDGE]
                                    SHUFFLE [RS_8]
                                      PartitionCols:_col0
                                      Select Operator [SEL_2] (rows=144002668 width=135)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_231] (rows=144002668 width=135)
                                          predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_9_date_dim_d_date_sk_min) AND DynamicValue(RS_9_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_9_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                          TableScan [TS_0] (rows=144002668 width=135)
                                            default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                                          <-Reducer 8 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_496]
                                              Group By Operator [GBY_495] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_489]
                                                  Group By Operator [GBY_483] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_472] (rows=36524 width=1119)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_467]

