Warning: Shuffle Join MERGEJOIN[607][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[608][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 7' is a cross product
Warning: Shuffle Join MERGEJOIN[609][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3]] in Stage 'Reducer 8' is a cross product
Warning: Shuffle Join MERGEJOIN[610][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4]] in Stage 'Reducer 9' is a cross product
Warning: Shuffle Join MERGEJOIN[611][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5]] in Stage 'Reducer 10' is a cross product
Warning: Shuffle Join MERGEJOIN[612][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6]] in Stage 'Reducer 11' is a cross product
Warning: Shuffle Join MERGEJOIN[613][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3, $hdt$_4, $hdt$_5, $hdt$_6, $hdt$_7]] in Stage 'Reducer 12' is a cross product
PREHOOK: query: explain
select  *
from
 (select count(*) h8_30_to_9
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk   
     and ss_hdemo_sk = household_demographics.hd_demo_sk 
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 8
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2)) 
     and store.s_store_name = 'ese') s1,
 (select count(*) h9_to_9_30 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 9 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s2,
 (select count(*) h9_30_to_10 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 9
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s3,
 (select count(*) h10_to_10_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s4,
 (select count(*) h10_30_to_11
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s5,
 (select count(*) h11_to_11_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 11
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s6,
 (select count(*) h11_30_to_12
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 11
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s7,
 (select count(*) h12_to_12_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 12
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s8
PREHOOK: type: QUERY
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@time_dim
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  *
from
 (select count(*) h8_30_to_9
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk   
     and ss_hdemo_sk = household_demographics.hd_demo_sk 
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 8
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2)) 
     and store.s_store_name = 'ese') s1,
 (select count(*) h9_to_9_30 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 9 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s2,
 (select count(*) h9_30_to_10 
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 9
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s3,
 (select count(*) h10_to_10_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s4,
 (select count(*) h10_30_to_11
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 10 
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s5,
 (select count(*) h11_to_11_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk 
     and time_dim.t_hour = 11
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s6,
 (select count(*) h11_30_to_12
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 11
     and time_dim.t_minute >= 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s7,
 (select count(*) h12_to_12_30
 from store_sales, household_demographics , time_dim, store
 where ss_sold_time_sk = time_dim.t_time_sk
     and ss_hdemo_sk = household_demographics.hd_demo_sk
     and ss_store_sk = s_store_sk
     and time_dim.t_hour = 12
     and time_dim.t_minute < 30
     and ((household_demographics.hd_dep_count = 3 and household_demographics.hd_vehicle_count<=3+2) or
          (household_demographics.hd_dep_count = 0 and household_demographics.hd_vehicle_count<=0+2) or
          (household_demographics.hd_dep_count = 1 and household_demographics.hd_vehicle_count<=1+2))
     and store.s_store_name = 'ese') s8
POSTHOOK: type: QUERY
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@time_dim
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 14 (BROADCAST_EDGE), Reducer 51 (BROADCAST_EDGE), Reducer 60 (BROADCAST_EDGE)
Map 68 <- Reducer 19 (BROADCAST_EDGE), Reducer 52 (BROADCAST_EDGE), Reducer 61 (BROADCAST_EDGE)
Map 69 <- Reducer 24 (BROADCAST_EDGE), Reducer 53 (BROADCAST_EDGE), Reducer 62 (BROADCAST_EDGE)
Map 70 <- Reducer 29 (BROADCAST_EDGE), Reducer 54 (BROADCAST_EDGE), Reducer 63 (BROADCAST_EDGE)
Map 71 <- Reducer 34 (BROADCAST_EDGE), Reducer 55 (BROADCAST_EDGE), Reducer 64 (BROADCAST_EDGE)
Map 72 <- Reducer 39 (BROADCAST_EDGE), Reducer 56 (BROADCAST_EDGE), Reducer 65 (BROADCAST_EDGE)
Map 73 <- Reducer 44 (BROADCAST_EDGE), Reducer 57 (BROADCAST_EDGE), Reducer 66 (BROADCAST_EDGE)
Map 74 <- Reducer 49 (BROADCAST_EDGE), Reducer 58 (BROADCAST_EDGE), Reducer 67 (BROADCAST_EDGE)
Reducer 10 <- Reducer 38 (CUSTOM_SIMPLE_EDGE), Reducer 9 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (CUSTOM_SIMPLE_EDGE), Reducer 43 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (CUSTOM_SIMPLE_EDGE), Reducer 48 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 13 (SIMPLE_EDGE), Map 68 (SIMPLE_EDGE)
Reducer 16 <- Map 50 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Map 59 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE)
Reducer 20 <- Map 13 (SIMPLE_EDGE), Map 69 (SIMPLE_EDGE)
Reducer 21 <- Map 50 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 59 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Reducer 22 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 13 (SIMPLE_EDGE), Map 70 (SIMPLE_EDGE)
Reducer 26 <- Map 50 (SIMPLE_EDGE), Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Map 59 (SIMPLE_EDGE), Reducer 26 (SIMPLE_EDGE)
Reducer 28 <- Reducer 27 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 50 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 13 (SIMPLE_EDGE), Map 71 (SIMPLE_EDGE)
Reducer 31 <- Map 50 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE)
Reducer 32 <- Map 59 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE)
Reducer 33 <- Reducer 32 (CUSTOM_SIMPLE_EDGE)
Reducer 34 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 35 <- Map 13 (SIMPLE_EDGE), Map 72 (SIMPLE_EDGE)
Reducer 36 <- Map 50 (SIMPLE_EDGE), Reducer 35 (SIMPLE_EDGE)
Reducer 37 <- Map 59 (SIMPLE_EDGE), Reducer 36 (SIMPLE_EDGE)
Reducer 38 <- Reducer 37 (CUSTOM_SIMPLE_EDGE)
Reducer 39 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Map 59 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 40 <- Map 13 (SIMPLE_EDGE), Map 73 (SIMPLE_EDGE)
Reducer 41 <- Map 50 (SIMPLE_EDGE), Reducer 40 (SIMPLE_EDGE)
Reducer 42 <- Map 59 (SIMPLE_EDGE), Reducer 41 (SIMPLE_EDGE)
Reducer 43 <- Reducer 42 (CUSTOM_SIMPLE_EDGE)
Reducer 44 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 45 <- Map 13 (SIMPLE_EDGE), Map 74 (SIMPLE_EDGE)
Reducer 46 <- Map 50 (SIMPLE_EDGE), Reducer 45 (SIMPLE_EDGE)
Reducer 47 <- Map 59 (SIMPLE_EDGE), Reducer 46 (SIMPLE_EDGE)
Reducer 48 <- Reducer 47 (CUSTOM_SIMPLE_EDGE)
Reducer 49 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 51 <- Map 50 (CUSTOM_SIMPLE_EDGE)
Reducer 52 <- Map 50 (CUSTOM_SIMPLE_EDGE)
Reducer 53 <- Map 50 (CUSTOM_SIMPLE_EDGE)
Reducer 54 <- Map 50 (CUSTOM_SIMPLE_EDGE)
Reducer 55 <- Map 50 (CUSTOM_SIMPLE_EDGE)
Reducer 56 <- Map 50 (CUSTOM_SIMPLE_EDGE)
Reducer 57 <- Map 50 (CUSTOM_SIMPLE_EDGE)
Reducer 58 <- Map 50 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 18 (CUSTOM_SIMPLE_EDGE), Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 60 <- Map 59 (CUSTOM_SIMPLE_EDGE)
Reducer 61 <- Map 59 (CUSTOM_SIMPLE_EDGE)
Reducer 62 <- Map 59 (CUSTOM_SIMPLE_EDGE)
Reducer 63 <- Map 59 (CUSTOM_SIMPLE_EDGE)
Reducer 64 <- Map 59 (CUSTOM_SIMPLE_EDGE)
Reducer 65 <- Map 59 (CUSTOM_SIMPLE_EDGE)
Reducer 66 <- Map 59 (CUSTOM_SIMPLE_EDGE)
Reducer 67 <- Map 59 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 23 (CUSTOM_SIMPLE_EDGE), Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Reducer 28 (CUSTOM_SIMPLE_EDGE), Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Reducer 33 (CUSTOM_SIMPLE_EDGE), Reducer 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 12
      File Output Operator [FS_238]
        Select Operator [SEL_237] (rows=1 width=64)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          Merge Join Operator [MERGEJOIN_613] (rows=1 width=64)
            Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
          <-Reducer 11 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_234]
              Merge Join Operator [MERGEJOIN_612] (rows=1 width=56)
                Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
              <-Reducer 10 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_231]
                  Merge Join Operator [MERGEJOIN_611] (rows=1 width=48)
                    Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                  <-Reducer 38 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_795]
                      Group By Operator [GBY_794] (rows=1 width=8)
                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                      <-Reducer 37 [CUSTOM_SIMPLE_EDGE]
                        PARTITION_ONLY_SHUFFLE [RS_159]
                          Group By Operator [GBY_158] (rows=1 width=8)
                            Output:["_col0"],aggregations:["count()"]
                            Merge Join Operator [MERGEJOIN_600] (rows=1806751 width=8)
                              Conds:RS_154._col0=RS_712._col0(Inner)
                            <-Map 59 [SIMPLE_EDGE] vectorized
                              PARTITION_ONLY_SHUFFLE [RS_712]
                                PartitionCols:_col0
                                Select Operator [SEL_701] (rows=155 width=4)
                                  Output:["_col0"]
                                  Filter Operator [FIL_700] (rows=155 width=92)
                                    predicate:(s_store_name = 'ese')
                                    TableScan [TS_16] (rows=1704 width=92)
                                      default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name"]
                            <-Reducer 36 [SIMPLE_EDGE]
                              SHUFFLE [RS_154]
                                PartitionCols:_col0
                                Select Operator [SEL_150] (rows=2460956 width=0)
                                  Output:["_col0"]
                                  Merge Join Operator [MERGEJOIN_599] (rows=2460956 width=0)
                                    Conds:RS_147._col1=RS_676._col0(Inner),Output:["_col2"]
                                  <-Map 50 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_676]
                                      PartitionCols:_col0
                                      Select Operator [SEL_665] (rows=1091 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_664] (rows=1091 width=12)
                                          predicate:(((hd_dep_count = 0) and (hd_vehicle_count <= 2)) or ((hd_dep_count = 1) and (hd_vehicle_count <= 3)) or ((hd_dep_count = 3) and (hd_vehicle_count <= 5)))
                                          TableScan [TS_6] (rows=7200 width=12)
                                            default@household_demographics,household_demographics,Tbl:COMPLETE,Col:COMPLETE,Output:["hd_demo_sk","hd_dep_count","hd_vehicle_count"]
                                  <-Reducer 35 [SIMPLE_EDGE]
                                    SHUFFLE [RS_147]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_598] (rows=16240953 width=0)
                                        Conds:RS_793._col0=RS_640._col0(Inner),Output:["_col1","_col2"]
                                      <-Map 13 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_640]
                                          PartitionCols:_col0
                                          Select Operator [SEL_627] (rows=1515 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_619] (rows=1515 width=12)
                                              predicate:((t_hour = 10) and (t_minute < 30))
                                              TableScan [TS_3] (rows=86400 width=12)
                                                default@time_dim,time_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["t_time_sk","t_hour","t_minute"]
                                      <-Map 72 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_793]
                                          PartitionCols:_col0
                                          Select Operator [SEL_792] (rows=501695814 width=11)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_791] (rows=501695814 width=11)
                                              predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_148_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_148_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_148_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_145_time_dim_t_time_sk_min) AND DynamicValue(RS_145_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_145_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_155_store_s_store_sk_min) AND DynamicValue(RS_155_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_155_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                              TableScan [TS_135] (rows=575995635 width=11)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                              <-Reducer 39 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_786]
                                                  Group By Operator [GBY_785] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_659]
                                                      Group By Operator [GBY_651] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_641] (rows=1515 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_627]
                                              <-Reducer 56 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_788]
                                                  Group By Operator [GBY_787] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 50 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_695]
                                                      Group By Operator [GBY_687] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_677] (rows=1091 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_665]
                                              <-Reducer 65 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_790]
                                                  Group By Operator [GBY_789] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 59 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_731]
                                                      Group By Operator [GBY_723] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_713] (rows=155 width=4)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_701]
                  <-Reducer 9 [CUSTOM_SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_228]
                      Merge Join Operator [MERGEJOIN_610] (rows=1 width=40)
                        Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
                      <-Reducer 33 [CUSTOM_SIMPLE_EDGE] vectorized
                        PARTITION_ONLY_SHUFFLE [RS_784]
                          Group By Operator [GBY_783] (rows=1 width=8)
                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                          <-Reducer 32 [CUSTOM_SIMPLE_EDGE]
                            PARTITION_ONLY_SHUFFLE [RS_132]
                              Group By Operator [GBY_131] (rows=1 width=8)
                                Output:["_col0"],aggregations:["count()"]
                                Merge Join Operator [MERGEJOIN_597] (rows=1806751 width=8)
                                  Conds:RS_127._col0=RS_710._col0(Inner)
                                <-Map 59 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_710]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_701]
                                <-Reducer 31 [SIMPLE_EDGE]
                                  SHUFFLE [RS_127]
                                    PartitionCols:_col0
                                    Select Operator [SEL_123] (rows=2460956 width=0)
                                      Output:["_col0"]
                                      Merge Join Operator [MERGEJOIN_596] (rows=2460956 width=0)
                                        Conds:RS_120._col1=RS_674._col0(Inner),Output:["_col2"]
                                      <-Map 50 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_674]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_665]
                                      <-Reducer 30 [SIMPLE_EDGE]
                                        SHUFFLE [RS_120]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_595] (rows=16240953 width=0)
                                            Conds:RS_782._col0=RS_638._col0(Inner),Output:["_col1","_col2"]
                                          <-Map 13 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_638]
                                              PartitionCols:_col0
                                              Select Operator [SEL_626] (rows=1515 width=4)
                                                Output:["_col0"]
                                                Filter Operator [FIL_618] (rows=1515 width=12)
                                                  predicate:((t_hour = 10) and (t_minute >= 30))
                                                   Please refer to the previous TableScan [TS_3]
                                          <-Map 71 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_782]
                                              PartitionCols:_col0
                                              Select Operator [SEL_781] (rows=501695814 width=11)
                                                Output:["_col0","_col1","_col2"]
                                                Filter Operator [FIL_780] (rows=501695814 width=11)
                                                  predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_121_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_121_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_121_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_118_time_dim_t_time_sk_min) AND DynamicValue(RS_118_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_118_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_128_store_s_store_sk_min) AND DynamicValue(RS_128_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_128_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                  TableScan [TS_108] (rows=575995635 width=11)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                  <-Reducer 34 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_775]
                                                      Group By Operator [GBY_774] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_658]
                                                          Group By Operator [GBY_650] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_639] (rows=1515 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_626]
                                                  <-Reducer 55 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_777]
                                                      Group By Operator [GBY_776] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 50 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_694]
                                                          Group By Operator [GBY_686] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_675] (rows=1091 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_665]
                                                  <-Reducer 64 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_779]
                                                      Group By Operator [GBY_778] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 59 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_730]
                                                          Group By Operator [GBY_722] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_711] (rows=155 width=4)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_701]
                      <-Reducer 8 [CUSTOM_SIMPLE_EDGE]
                        PARTITION_ONLY_SHUFFLE [RS_225]
                          Merge Join Operator [MERGEJOIN_609] (rows=1 width=32)
                            Conds:(Inner),Output:["_col0","_col1","_col2","_col3"]
                          <-Reducer 28 [CUSTOM_SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_773]
                              Group By Operator [GBY_772] (rows=1 width=8)
                                Output:["_col0"],aggregations:["count(VALUE._col0)"]
                              <-Reducer 27 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_105]
                                  Group By Operator [GBY_104] (rows=1 width=8)
                                    Output:["_col0"],aggregations:["count()"]
                                    Merge Join Operator [MERGEJOIN_594] (rows=1806751 width=8)
                                      Conds:RS_100._col0=RS_708._col0(Inner)
                                    <-Map 59 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_708]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_701]
                                    <-Reducer 26 [SIMPLE_EDGE]
                                      SHUFFLE [RS_100]
                                        PartitionCols:_col0
                                        Select Operator [SEL_96] (rows=2460956 width=0)
                                          Output:["_col0"]
                                          Merge Join Operator [MERGEJOIN_593] (rows=2460956 width=0)
                                            Conds:RS_93._col1=RS_672._col0(Inner),Output:["_col2"]
                                          <-Map 50 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_672]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_665]
                                          <-Reducer 25 [SIMPLE_EDGE]
                                            SHUFFLE [RS_93]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_592] (rows=16240953 width=0)
                                                Conds:RS_771._col0=RS_636._col0(Inner),Output:["_col1","_col2"]
                                              <-Map 13 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_636]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_625] (rows=1515 width=4)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_617] (rows=1515 width=12)
                                                      predicate:((t_hour = 11) and (t_minute < 30))
                                                       Please refer to the previous TableScan [TS_3]
                                              <-Map 70 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_771]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_770] (rows=501695814 width=11)
                                                    Output:["_col0","_col1","_col2"]
                                                    Filter Operator [FIL_769] (rows=501695814 width=11)
                                                      predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_94_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_94_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_94_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_91_time_dim_t_time_sk_min) AND DynamicValue(RS_91_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_91_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_101_store_s_store_sk_min) AND DynamicValue(RS_101_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_101_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                      TableScan [TS_81] (rows=575995635 width=11)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                      <-Reducer 29 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_764]
                                                          Group By Operator [GBY_763] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_657]
                                                              Group By Operator [GBY_649] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_637] (rows=1515 width=4)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_625]
                                                      <-Reducer 54 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_766]
                                                          Group By Operator [GBY_765] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 50 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_693]
                                                              Group By Operator [GBY_685] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_673] (rows=1091 width=4)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_665]
                                                      <-Reducer 63 [BROADCAST_EDGE] vectorized
                                                        BROADCAST [RS_768]
                                                          Group By Operator [GBY_767] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                          <-Map 59 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_729]
                                                              Group By Operator [GBY_721] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                Select Operator [SEL_709] (rows=155 width=4)
                                                                  Output:["_col0"]
                                                                   Please refer to the previous Select Operator [SEL_701]
                          <-Reducer 7 [CUSTOM_SIMPLE_EDGE]
                            PARTITION_ONLY_SHUFFLE [RS_222]
                              Merge Join Operator [MERGEJOIN_608] (rows=1 width=24)
                                Conds:(Inner),Output:["_col0","_col1","_col2"]
                              <-Reducer 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_762]
                                  Group By Operator [GBY_761] (rows=1 width=8)
                                    Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                  <-Reducer 22 [CUSTOM_SIMPLE_EDGE]
                                    PARTITION_ONLY_SHUFFLE [RS_78]
                                      Group By Operator [GBY_77] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count()"]
                                        Merge Join Operator [MERGEJOIN_591] (rows=1806751 width=8)
                                          Conds:RS_73._col0=RS_706._col0(Inner)
                                        <-Map 59 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_706]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_701]
                                        <-Reducer 21 [SIMPLE_EDGE]
                                          SHUFFLE [RS_73]
                                            PartitionCols:_col0
                                            Select Operator [SEL_69] (rows=2460956 width=0)
                                              Output:["_col0"]
                                              Merge Join Operator [MERGEJOIN_590] (rows=2460956 width=0)
                                                Conds:RS_66._col1=RS_670._col0(Inner),Output:["_col2"]
                                              <-Map 50 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_670]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_665]
                                              <-Reducer 20 [SIMPLE_EDGE]
                                                SHUFFLE [RS_66]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_589] (rows=16240953 width=0)
                                                    Conds:RS_760._col0=RS_634._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 13 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_634]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_624] (rows=1515 width=4)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_616] (rows=1515 width=12)
                                                          predicate:((t_hour = 11) and (t_minute >= 30))
                                                           Please refer to the previous TableScan [TS_3]
                                                  <-Map 69 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_760]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_759] (rows=501695814 width=11)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_758] (rows=501695814 width=11)
                                                          predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_67_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_67_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_67_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_64_time_dim_t_time_sk_min) AND DynamicValue(RS_64_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_64_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_74_store_s_store_sk_min) AND DynamicValue(RS_74_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_74_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                          TableScan [TS_54] (rows=575995635 width=11)
                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                          <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_753]
                                                              Group By Operator [GBY_752] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_656]
                                                                  Group By Operator [GBY_648] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_635] (rows=1515 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_624]
                                                          <-Reducer 53 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_755]
                                                              Group By Operator [GBY_754] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 50 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_692]
                                                                  Group By Operator [GBY_684] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_671] (rows=1091 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_665]
                                                          <-Reducer 62 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_757]
                                                              Group By Operator [GBY_756] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 59 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_728]
                                                                  Group By Operator [GBY_720] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_707] (rows=155 width=4)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_701]
                              <-Reducer 6 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_219]
                                  Merge Join Operator [MERGEJOIN_607] (rows=1 width=16)
                                    Conds:(Inner),Output:["_col0","_col1"]
                                  <-Reducer 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_751]
                                      Group By Operator [GBY_750] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                      <-Reducer 17 [CUSTOM_SIMPLE_EDGE]
                                        PARTITION_ONLY_SHUFFLE [RS_51]
                                          Group By Operator [GBY_50] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Merge Join Operator [MERGEJOIN_588] (rows=1806751 width=8)
                                              Conds:RS_46._col0=RS_704._col0(Inner)
                                            <-Map 59 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_704]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_701]
                                            <-Reducer 16 [SIMPLE_EDGE]
                                              SHUFFLE [RS_46]
                                                PartitionCols:_col0
                                                Select Operator [SEL_42] (rows=2460956 width=0)
                                                  Output:["_col0"]
                                                  Merge Join Operator [MERGEJOIN_587] (rows=2460956 width=0)
                                                    Conds:RS_39._col1=RS_668._col0(Inner),Output:["_col2"]
                                                  <-Map 50 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_668]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_665]
                                                  <-Reducer 15 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_39]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_586] (rows=16240953 width=0)
                                                        Conds:RS_749._col0=RS_632._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 13 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_632]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_623] (rows=1515 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_615] (rows=1515 width=12)
                                                              predicate:((t_hour = 12) and (t_minute < 30))
                                                               Please refer to the previous TableScan [TS_3]
                                                      <-Map 68 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_749]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_748] (rows=501695814 width=11)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_747] (rows=501695814 width=11)
                                                              predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_40_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_40_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_40_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_37_time_dim_t_time_sk_min) AND DynamicValue(RS_37_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_37_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_47_store_s_store_sk_min) AND DynamicValue(RS_47_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_47_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                              TableScan [TS_27] (rows=575995635 width=11)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                              <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_742]
                                                                  Group By Operator [GBY_741] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_655]
                                                                      Group By Operator [GBY_647] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_633] (rows=1515 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_623]
                                                              <-Reducer 52 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_744]
                                                                  Group By Operator [GBY_743] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 50 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_691]
                                                                      Group By Operator [GBY_683] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_669] (rows=1091 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_665]
                                                              <-Reducer 61 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_746]
                                                                  Group By Operator [GBY_745] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 59 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_727]
                                                                      Group By Operator [GBY_719] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_705] (rows=155 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_701]
                                  <-Reducer 5 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_740]
                                      Group By Operator [GBY_739] (rows=1 width=8)
                                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                      <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
                                        PARTITION_ONLY_SHUFFLE [RS_24]
                                          Group By Operator [GBY_23] (rows=1 width=8)
                                            Output:["_col0"],aggregations:["count()"]
                                            Merge Join Operator [MERGEJOIN_585] (rows=1806751 width=8)
                                              Conds:RS_19._col0=RS_702._col0(Inner)
                                            <-Map 59 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_702]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_701]
                                            <-Reducer 3 [SIMPLE_EDGE]
                                              SHUFFLE [RS_19]
                                                PartitionCols:_col0
                                                Select Operator [SEL_15] (rows=2460956 width=0)
                                                  Output:["_col0"]
                                                  Merge Join Operator [MERGEJOIN_584] (rows=2460956 width=0)
                                                    Conds:RS_12._col1=RS_666._col0(Inner),Output:["_col2"]
                                                  <-Map 50 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_666]
                                                      PartitionCols:_col0
                                                       Please refer to the previous Select Operator [SEL_665]
                                                  <-Reducer 2 [SIMPLE_EDGE]
                                                    SHUFFLE [RS_12]
                                                      PartitionCols:_col1
                                                      Merge Join Operator [MERGEJOIN_583] (rows=16240953 width=0)
                                                        Conds:RS_738._col0=RS_630._col0(Inner),Output:["_col1","_col2"]
                                                      <-Map 13 [SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_630]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_622] (rows=1515 width=4)
                                                            Output:["_col0"]
                                                            Filter Operator [FIL_614] (rows=1515 width=12)
                                                              predicate:((t_hour = 8) and (t_minute >= 30))
                                                               Please refer to the previous TableScan [TS_3]
                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_738]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_737] (rows=501695814 width=11)
                                                            Output:["_col0","_col1","_col2"]
                                                            Filter Operator [FIL_736] (rows=501695814 width=11)
                                                              predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_13_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_13_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_13_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_10_time_dim_t_time_sk_min) AND DynamicValue(RS_10_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_10_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_20_store_s_store_sk_min) AND DynamicValue(RS_20_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_20_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                                              TableScan [TS_0] (rows=575995635 width=11)
                                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                                              <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_663]
                                                                  Group By Operator [GBY_662] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_654]
                                                                      Group By Operator [GBY_646] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_631] (rows=1515 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_622]
                                                              <-Reducer 51 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_699]
                                                                  Group By Operator [GBY_698] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 50 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_690]
                                                                      Group By Operator [GBY_682] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_667] (rows=1091 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_665]
                                                              <-Reducer 60 [BROADCAST_EDGE] vectorized
                                                                BROADCAST [RS_735]
                                                                  Group By Operator [GBY_734] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                  <-Map 59 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_726]
                                                                      Group By Operator [GBY_718] (rows=1 width=12)
                                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                        Select Operator [SEL_703] (rows=155 width=4)
                                                                          Output:["_col0"]
                                                                           Please refer to the previous Select Operator [SEL_701]
              <-Reducer 43 [CUSTOM_SIMPLE_EDGE] vectorized
                PARTITION_ONLY_SHUFFLE [RS_806]
                  Group By Operator [GBY_805] (rows=1 width=8)
                    Output:["_col0"],aggregations:["count(VALUE._col0)"]
                  <-Reducer 42 [CUSTOM_SIMPLE_EDGE]
                    PARTITION_ONLY_SHUFFLE [RS_186]
                      Group By Operator [GBY_185] (rows=1 width=8)
                        Output:["_col0"],aggregations:["count()"]
                        Merge Join Operator [MERGEJOIN_603] (rows=1806751 width=8)
                          Conds:RS_181._col0=RS_714._col0(Inner)
                        <-Map 59 [SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_714]
                            PartitionCols:_col0
                             Please refer to the previous Select Operator [SEL_701]
                        <-Reducer 41 [SIMPLE_EDGE]
                          SHUFFLE [RS_181]
                            PartitionCols:_col0
                            Select Operator [SEL_177] (rows=2460956 width=0)
                              Output:["_col0"]
                              Merge Join Operator [MERGEJOIN_602] (rows=2460956 width=0)
                                Conds:RS_174._col1=RS_678._col0(Inner),Output:["_col2"]
                              <-Map 50 [SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_678]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_665]
                              <-Reducer 40 [SIMPLE_EDGE]
                                SHUFFLE [RS_174]
                                  PartitionCols:_col1
                                  Merge Join Operator [MERGEJOIN_601] (rows=16240953 width=0)
                                    Conds:RS_804._col0=RS_642._col0(Inner),Output:["_col1","_col2"]
                                  <-Map 13 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_642]
                                      PartitionCols:_col0
                                      Select Operator [SEL_628] (rows=1515 width=4)
                                        Output:["_col0"]
                                        Filter Operator [FIL_620] (rows=1515 width=12)
                                          predicate:((t_hour = 9) and (t_minute >= 30))
                                           Please refer to the previous TableScan [TS_3]
                                  <-Map 73 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_804]
                                      PartitionCols:_col0
                                      Select Operator [SEL_803] (rows=501695814 width=11)
                                        Output:["_col0","_col1","_col2"]
                                        Filter Operator [FIL_802] (rows=501695814 width=11)
                                          predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_175_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_175_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_175_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_172_time_dim_t_time_sk_min) AND DynamicValue(RS_172_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_172_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_182_store_s_store_sk_min) AND DynamicValue(RS_182_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_182_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                          TableScan [TS_162] (rows=575995635 width=11)
                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                          <-Reducer 44 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_797]
                                              Group By Operator [GBY_796] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_660]
                                                  Group By Operator [GBY_652] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_643] (rows=1515 width=4)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_628]
                                          <-Reducer 57 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_799]
                                              Group By Operator [GBY_798] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 50 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_696]
                                                  Group By Operator [GBY_688] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_679] (rows=1091 width=4)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_665]
                                          <-Reducer 66 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_801]
                                              Group By Operator [GBY_800] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                              <-Map 59 [CUSTOM_SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_732]
                                                  Group By Operator [GBY_724] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                    Select Operator [SEL_715] (rows=155 width=4)
                                                      Output:["_col0"]
                                                       Please refer to the previous Select Operator [SEL_701]
          <-Reducer 48 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_817]
              Group By Operator [GBY_816] (rows=1 width=8)
                Output:["_col0"],aggregations:["count(VALUE._col0)"]
              <-Reducer 47 [CUSTOM_SIMPLE_EDGE]
                PARTITION_ONLY_SHUFFLE [RS_213]
                  Group By Operator [GBY_212] (rows=1 width=8)
                    Output:["_col0"],aggregations:["count()"]
                    Merge Join Operator [MERGEJOIN_606] (rows=1806751 width=8)
                      Conds:RS_208._col0=RS_716._col0(Inner)
                    <-Map 59 [SIMPLE_EDGE] vectorized
                      PARTITION_ONLY_SHUFFLE [RS_716]
                        PartitionCols:_col0
                         Please refer to the previous Select Operator [SEL_701]
                    <-Reducer 46 [SIMPLE_EDGE]
                      SHUFFLE [RS_208]
                        PartitionCols:_col0
                        Select Operator [SEL_204] (rows=2460956 width=0)
                          Output:["_col0"]
                          Merge Join Operator [MERGEJOIN_605] (rows=2460956 width=0)
                            Conds:RS_201._col1=RS_680._col0(Inner),Output:["_col2"]
                          <-Map 50 [SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_680]
                              PartitionCols:_col0
                               Please refer to the previous Select Operator [SEL_665]
                          <-Reducer 45 [SIMPLE_EDGE]
                            SHUFFLE [RS_201]
                              PartitionCols:_col1
                              Merge Join Operator [MERGEJOIN_604] (rows=16240953 width=0)
                                Conds:RS_815._col0=RS_644._col0(Inner),Output:["_col1","_col2"]
                              <-Map 13 [SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_644]
                                  PartitionCols:_col0
                                  Select Operator [SEL_629] (rows=1515 width=4)
                                    Output:["_col0"]
                                    Filter Operator [FIL_621] (rows=1515 width=12)
                                      predicate:((t_hour = 9) and (t_minute < 30))
                                       Please refer to the previous TableScan [TS_3]
                              <-Map 74 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_815]
                                  PartitionCols:_col0
                                  Select Operator [SEL_814] (rows=501695814 width=11)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_813] (rows=501695814 width=11)
                                      predicate:((ss_hdemo_sk BETWEEN DynamicValue(RS_202_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_202_household_demographics_hd_demo_sk_max) and in_bloom_filter(ss_hdemo_sk, DynamicValue(RS_202_household_demographics_hd_demo_sk_bloom_filter))) and (ss_sold_time_sk BETWEEN DynamicValue(RS_199_time_dim_t_time_sk_min) AND DynamicValue(RS_199_time_dim_t_time_sk_max) and in_bloom_filter(ss_sold_time_sk, DynamicValue(RS_199_time_dim_t_time_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_209_store_s_store_sk_min) AND DynamicValue(RS_209_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_209_store_s_store_sk_bloom_filter))) and ss_hdemo_sk is not null and ss_sold_time_sk is not null and ss_store_sk is not null)
                                      TableScan [TS_189] (rows=575995635 width=11)
                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_time_sk","ss_hdemo_sk","ss_store_sk"]
                                      <-Reducer 49 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_808]
                                          Group By Operator [GBY_807] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_661]
                                              Group By Operator [GBY_653] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_645] (rows=1515 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_629]
                                      <-Reducer 58 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_810]
                                          Group By Operator [GBY_809] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 50 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_697]
                                              Group By Operator [GBY_689] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_681] (rows=1091 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_665]
                                      <-Reducer 67 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_812]
                                          Group By Operator [GBY_811] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 59 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_733]
                                              Group By Operator [GBY_725] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_717] (rows=155 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_701]

