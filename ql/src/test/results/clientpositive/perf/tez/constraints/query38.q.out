PREHOOK: query: explain
select  count(*) from (
    select distinct c_last_name, c_first_name, d_date
    from store_sales, date_dim, customer
          where store_sales.ss_sold_date_sk = date_dim.d_date_sk
      and store_sales.ss_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from catalog_sales, date_dim, customer
          where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
      and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from web_sales, date_dim, customer
          where web_sales.ws_sold_date_sk = date_dim.d_date_sk
      and web_sales.ws_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
) hot_cust
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  count(*) from (
    select distinct c_last_name, c_first_name, d_date
    from store_sales, date_dim, customer
          where store_sales.ss_sold_date_sk = date_dim.d_date_sk
      and store_sales.ss_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from catalog_sales, date_dim, customer
          where catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
      and catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
  intersect
    select distinct c_last_name, c_first_name, d_date
    from web_sales, date_dim, customer
          where web_sales.ws_sold_date_sk = date_dim.d_date_sk
      and web_sales.ws_bill_customer_sk = customer.c_customer_sk
      and d_month_seq between 1212 and 1212 + 11
) hot_cust
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 19 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Map 21 <- Reducer 13 (BROADCAST_EDGE), Reducer 20 (BROADCAST_EDGE)
Map 22 <- Reducer 17 (BROADCAST_EDGE)
Reducer 10 <- Map 21 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Map 18 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 13 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 22 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 15 <- Map 18 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 17 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 20 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 18 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_240]
        Limit [LIM_239] (rows=1 width=16)
          Number of rows:100
          Group By Operator [GBY_238] (rows=1 width=16)
            Output:["_col0"],aggregations:["count(VALUE._col0)"]
          <-Reducer 6 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_237]
              Group By Operator [GBY_236] (rows=1 width=16)
                Output:["_col0"],aggregations:["count()"]
                Select Operator [SEL_235] (rows=1 width=108)
                  Filter Operator [FIL_234] (rows=1 width=108)
                    predicate:(_col3 = 3L)
                    Select Operator [SEL_233] (rows=152458212 width=108)
                      Output:["_col3"]
                      Group By Operator [GBY_232] (rows=152458212 width=108)
                        Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                      <-Union 5 [SIMPLE_EDGE]
                        <-Reducer 12 [CONTAINS] vectorized
                          Reduce Output Operator [RS_252]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_251] (rows=304916424 width=108)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                              Group By Operator [GBY_250] (rows=87116929 width=135)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                Select Operator [SEL_249] (rows=174233858 width=135)
                                  Output:["_col0","_col1","_col2"]
                                  Group By Operator [GBY_248] (rows=174233858 width=135)
                                    Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 11 [SIMPLE_EDGE]
                                    SHUFFLE [RS_40]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_39] (rows=348467716 width=135)
                                        Output:["_col0","_col1","_col2"],keys:_col6, _col5, _col3
                                        Merge Join Operator [MERGEJOIN_175] (rows=348467716 width=135)
                                          Conds:RS_35._col1=RS_215._col0(Inner),Output:["_col3","_col5","_col6"]
                                        <-Map 18 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_215]
                                            PartitionCols:_col0
                                            Select Operator [SEL_212] (rows=80000000 width=860)
                                              Output:["_col0","_col1","_col2"]
                                              TableScan [TS_6] (rows=80000000 width=860)
                                                default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_first_name","c_last_name"]
                                        <-Reducer 10 [SIMPLE_EDGE]
                                          SHUFFLE [RS_35]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_174] (rows=316788826 width=135)
                                              Conds:RS_247._col0=RS_200._col0(Inner),Output:["_col1","_col3"]
                                            <-Map 8 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_200]
                                                PartitionCols:_col0
                                                Select Operator [SEL_197] (rows=73049 width=1119)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_196] (rows=73049 width=1119)
                                                    predicate:d_month_seq BETWEEN 1212 AND 1223
                                                    TableScan [TS_3] (rows=73049 width=1119)
                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date","d_month_seq"]
                                            <-Map 21 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_247]
                                                PartitionCols:_col0
                                                Select Operator [SEL_246] (rows=287989836 width=135)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_245] (rows=287989836 width=135)
                                                    predicate:((cs_bill_customer_sk BETWEEN DynamicValue(RS_36_customer_c_customer_sk_min) AND DynamicValue(RS_36_customer_c_customer_sk_max) and in_bloom_filter(cs_bill_customer_sk, DynamicValue(RS_36_customer_c_customer_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_33_date_dim_d_date_sk_min) AND DynamicValue(RS_33_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_33_date_dim_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                    TableScan [TS_24] (rows=287989836 width=135)
                                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk"]
                                                    <-Reducer 13 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_242]
                                                        Group By Operator [GBY_241] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_208]
                                                            Group By Operator [GBY_205] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_201] (rows=73049 width=1119)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_197]
                                                    <-Reducer 20 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_244]
                                                        Group By Operator [GBY_243] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=80000000)"]
                                                        <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_221]
                                                            Group By Operator [GBY_219] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=80000000)"]
                                                              Select Operator [SEL_216] (rows=80000000 width=860)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_212]
                        <-Reducer 16 [CONTAINS] vectorized
                          Reduce Output Operator [RS_262]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_261] (rows=304916424 width=108)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                              Group By Operator [GBY_260] (rows=43560808 width=135)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                Select Operator [SEL_259] (rows=87121617 width=135)
                                  Output:["_col0","_col1","_col2"]
                                  Group By Operator [GBY_258] (rows=87121617 width=135)
                                    Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 15 [SIMPLE_EDGE]
                                    SHUFFLE [RS_65]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_64] (rows=174243235 width=135)
                                        Output:["_col0","_col1","_col2"],keys:_col6, _col5, _col3
                                        Merge Join Operator [MERGEJOIN_177] (rows=174243235 width=135)
                                          Conds:RS_60._col1=RS_217._col0(Inner),Output:["_col3","_col5","_col6"]
                                        <-Map 18 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_217]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_212]
                                        <-Reducer 14 [SIMPLE_EDGE]
                                          SHUFFLE [RS_60]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_176] (rows=158402938 width=135)
                                              Conds:RS_257._col0=RS_202._col0(Inner),Output:["_col1","_col3"]
                                            <-Map 8 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_202]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_197]
                                            <-Map 22 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_257]
                                                PartitionCols:_col0
                                                Select Operator [SEL_256] (rows=144002668 width=135)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_255] (rows=144002668 width=135)
                                                    predicate:((ws_sold_date_sk BETWEEN DynamicValue(RS_58_date_dim_d_date_sk_min) AND DynamicValue(RS_58_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_58_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                                    TableScan [TS_49] (rows=144002668 width=135)
                                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_customer_sk"]
                                                    <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_254]
                                                        Group By Operator [GBY_253] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_209]
                                                            Group By Operator [GBY_206] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_203] (rows=73049 width=1119)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_197]
                        <-Reducer 4 [CONTAINS] vectorized
                          Reduce Output Operator [RS_231]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_230] (rows=304916424 width=108)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["count(_col3)"],keys:_col0, _col1, _col2
                              Group By Operator [GBY_229] (rows=174238687 width=88)
                                Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col1, _col0, _col2
                                Select Operator [SEL_228] (rows=348477374 width=88)
                                  Output:["_col0","_col1","_col2"]
                                  Group By Operator [GBY_227] (rows=348477374 width=88)
                                    Output:["_col0","_col1","_col2"],keys:KEY._col0, KEY._col1, KEY._col2
                                  <-Reducer 3 [SIMPLE_EDGE]
                                    SHUFFLE [RS_16]
                                      PartitionCols:_col0, _col1, _col2
                                      Group By Operator [GBY_15] (rows=696954748 width=88)
                                        Output:["_col0","_col1","_col2"],keys:_col6, _col5, _col3
                                        Merge Join Operator [MERGEJOIN_173] (rows=696954748 width=88)
                                          Conds:RS_11._col1=RS_213._col0(Inner),Output:["_col3","_col5","_col6"]
                                        <-Map 18 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_213]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_212]
                                        <-Reducer 2 [SIMPLE_EDGE]
                                          SHUFFLE [RS_11]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_172] (rows=633595212 width=88)
                                              Conds:RS_226._col0=RS_198._col0(Inner),Output:["_col1","_col3"]
                                            <-Map 8 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_198]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_197]
                                            <-Map 1 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_226]
                                                PartitionCols:_col0
                                                Select Operator [SEL_225] (rows=575995635 width=88)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_224] (rows=575995635 width=88)
                                                    predicate:((ss_customer_sk BETWEEN DynamicValue(RS_12_customer_c_customer_sk_min) AND DynamicValue(RS_12_customer_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_12_customer_c_customer_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_9_date_dim_d_date_sk_min) AND DynamicValue(RS_9_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_9_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                    TableScan [TS_0] (rows=575995635 width=88)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk"]
                                                    <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_223]
                                                        Group By Operator [GBY_222] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=80000000)"]
                                                        <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_220]
                                                            Group By Operator [GBY_218] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=80000000)"]
                                                              Select Operator [SEL_214] (rows=80000000 width=860)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_212]
                                                    <-Reducer 9 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_211]
                                                        Group By Operator [GBY_210] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_207]
                                                            Group By Operator [GBY_204] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_199] (rows=73049 width=1119)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_197]

