Warning: Shuffle Join MERGEJOIN[154][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 6' is a cross product
PREHOOK: query: explain
select  cast(amc as decimal(15,4))/cast(pmc as decimal(15,4)) am_pm_ratio
 from ( select count(*) amc
       from web_sales, household_demographics , time_dim, web_page
       where ws_sold_time_sk = time_dim.t_time_sk
         and ws_ship_hdemo_sk = household_demographics.hd_demo_sk
         and ws_web_page_sk = web_page.wp_web_page_sk
         and time_dim.t_hour between 6 and 6+1
         and household_demographics.hd_dep_count = 8
         and web_page.wp_char_count between 5000 and 5200) at,
      ( select count(*) pmc
       from web_sales, household_demographics , time_dim, web_page
       where ws_sold_time_sk = time_dim.t_time_sk
         and ws_ship_hdemo_sk = household_demographics.hd_demo_sk
         and ws_web_page_sk = web_page.wp_web_page_sk
         and time_dim.t_hour between 14 and 14+1
         and household_demographics.hd_dep_count = 8
         and web_page.wp_char_count between 5000 and 5200) pt
 order by am_pm_ratio
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@time_dim
PREHOOK: Input: default@web_page
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  cast(amc as decimal(15,4))/cast(pmc as decimal(15,4)) am_pm_ratio
 from ( select count(*) amc
       from web_sales, household_demographics , time_dim, web_page
       where ws_sold_time_sk = time_dim.t_time_sk
         and ws_ship_hdemo_sk = household_demographics.hd_demo_sk
         and ws_web_page_sk = web_page.wp_web_page_sk
         and time_dim.t_hour between 6 and 6+1
         and household_demographics.hd_dep_count = 8
         and web_page.wp_char_count between 5000 and 5200) at,
      ( select count(*) pmc
       from web_sales, household_demographics , time_dim, web_page
       where ws_sold_time_sk = time_dim.t_time_sk
         and ws_ship_hdemo_sk = household_demographics.hd_demo_sk
         and ws_web_page_sk = web_page.wp_web_page_sk
         and time_dim.t_hour between 14 and 14+1
         and household_demographics.hd_dep_count = 8
         and web_page.wp_char_count between 5000 and 5200) pt
 order by am_pm_ratio
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@time_dim
POSTHOOK: Input: default@web_page
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 16 (BROADCAST_EDGE), Reducer 19 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Map 21 <- Reducer 14 (BROADCAST_EDGE), Reducer 17 (BROADCAST_EDGE), Reducer 20 (BROADCAST_EDGE)
Reducer 10 <- Map 21 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Map 15 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Map 18 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 20 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 15 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 18 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 13 (CUSTOM_SIMPLE_EDGE), Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_213]
        Limit [LIM_212] (rows=1 width=17)
          Number of rows:100
          Select Operator [SEL_211] (rows=1 width=17)
            Output:["_col0"]
          <-Reducer 6 [SIMPLE_EDGE]
            SHUFFLE [RS_58]
              Select Operator [SEL_57] (rows=1 width=17)
                Output:["_col0"]
                Merge Join Operator [MERGEJOIN_154] (rows=1 width=17)
                  Conds:(Inner),Output:["_col0","_col1"]
                <-Reducer 13 [CUSTOM_SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_210]
                    Select Operator [SEL_209] (rows=1 width=8)
                      Output:["_col0"]
                      Group By Operator [GBY_208] (rows=1 width=8)
                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                      <-Reducer 12 [CUSTOM_SIMPLE_EDGE]
                        PARTITION_ONLY_SHUFFLE [RS_51]
                          Group By Operator [GBY_50] (rows=1 width=8)
                            Output:["_col0"],aggregations:["count()"]
                            Merge Join Operator [MERGEJOIN_153] (rows=191667562 width=135)
                              Conds:RS_46._col0=RS_185._col0(Inner)
                            <-Map 18 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_185]
                                PartitionCols:_col0
                                Select Operator [SEL_182] (rows=511 width=585)
                                  Output:["_col0"]
                                  Filter Operator [FIL_181] (rows=511 width=585)
                                    predicate:wp_char_count BETWEEN 5000 AND 5200
                                    TableScan [TS_16] (rows=4602 width=585)
                                      default@web_page,web_page,Tbl:COMPLETE,Col:NONE,Output:["wp_web_page_sk","wp_char_count"]
                            <-Reducer 11 [SIMPLE_EDGE]
                              SHUFFLE [RS_46]
                                PartitionCols:_col0
                                Select Operator [SEL_42] (rows=174243235 width=135)
                                  Output:["_col0"]
                                  Merge Join Operator [MERGEJOIN_152] (rows=174243235 width=135)
                                    Conds:RS_39._col1=RS_173._col0(Inner),Output:["_col2"]
                                  <-Map 15 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_173]
                                      PartitionCols:_col0
                                      Select Operator [SEL_170] (rows=3600 width=107)
                                        Output:["_col0"]
                                        Filter Operator [FIL_169] (rows=3600 width=107)
                                          predicate:(hd_dep_count = 8)
                                          TableScan [TS_6] (rows=7200 width=107)
                                            default@household_demographics,household_demographics,Tbl:COMPLETE,Col:NONE,Output:["hd_demo_sk","hd_dep_count"]
                                  <-Reducer 10 [SIMPLE_EDGE]
                                    SHUFFLE [RS_39]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_151] (rows=158402938 width=135)
                                        Conds:RS_207._col0=RS_161._col0(Inner),Output:["_col1","_col2"]
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_161]
                                          PartitionCols:_col0
                                          Select Operator [SEL_158] (rows=86400 width=471)
                                            Output:["_col0"]
                                            Filter Operator [FIL_156] (rows=86400 width=471)
                                              predicate:t_hour BETWEEN 14 AND 15
                                              TableScan [TS_3] (rows=86400 width=471)
                                                default@time_dim,time_dim,Tbl:COMPLETE,Col:NONE,Output:["t_time_sk","t_hour"]
                                      <-Map 21 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_207]
                                          PartitionCols:_col0
                                          Select Operator [SEL_206] (rows=144002668 width=135)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_205] (rows=144002668 width=135)
                                              predicate:((ws_ship_hdemo_sk BETWEEN DynamicValue(RS_40_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_40_household_demographics_hd_demo_sk_max) and in_bloom_filter(ws_ship_hdemo_sk, DynamicValue(RS_40_household_demographics_hd_demo_sk_bloom_filter))) and (ws_sold_time_sk BETWEEN DynamicValue(RS_37_time_dim_t_time_sk_min) AND DynamicValue(RS_37_time_dim_t_time_sk_max) and in_bloom_filter(ws_sold_time_sk, DynamicValue(RS_37_time_dim_t_time_sk_bloom_filter))) and (ws_web_page_sk BETWEEN DynamicValue(RS_47_web_page_wp_web_page_sk_min) AND DynamicValue(RS_47_web_page_wp_web_page_sk_max) and in_bloom_filter(ws_web_page_sk, DynamicValue(RS_47_web_page_wp_web_page_sk_bloom_filter))) and ws_ship_hdemo_sk is not null and ws_sold_time_sk is not null and ws_web_page_sk is not null)
                                              TableScan [TS_27] (rows=144002668 width=135)
                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_time_sk","ws_ship_hdemo_sk","ws_web_page_sk"]
                                              <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_200]
                                                  Group By Operator [GBY_199] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_166]
                                                      Group By Operator [GBY_164] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_162] (rows=86400 width=471)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_158]
                                              <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_202]
                                                  Group By Operator [GBY_201] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_178]
                                                      Group By Operator [GBY_176] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_174] (rows=3600 width=107)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_170]
                                              <-Reducer 20 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_204]
                                                  Group By Operator [GBY_203] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_190]
                                                      Group By Operator [GBY_188] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_186] (rows=511 width=585)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_182]
                <-Reducer 5 [CUSTOM_SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_198]
                    Select Operator [SEL_197] (rows=1 width=8)
                      Output:["_col0"]
                      Group By Operator [GBY_196] (rows=1 width=8)
                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                      <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
                        PARTITION_ONLY_SHUFFLE [RS_24]
                          Group By Operator [GBY_23] (rows=1 width=8)
                            Output:["_col0"],aggregations:["count()"]
                            Merge Join Operator [MERGEJOIN_150] (rows=191667562 width=135)
                              Conds:RS_19._col0=RS_183._col0(Inner)
                            <-Map 18 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_183]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_182]
                            <-Reducer 3 [SIMPLE_EDGE]
                              SHUFFLE [RS_19]
                                PartitionCols:_col0
                                Select Operator [SEL_15] (rows=174243235 width=135)
                                  Output:["_col0"]
                                  Merge Join Operator [MERGEJOIN_149] (rows=174243235 width=135)
                                    Conds:RS_12._col1=RS_171._col0(Inner),Output:["_col2"]
                                  <-Map 15 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_171]
                                      PartitionCols:_col0
                                       Please refer to the previous Select Operator [SEL_170]
                                  <-Reducer 2 [SIMPLE_EDGE]
                                    SHUFFLE [RS_12]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_148] (rows=158402938 width=135)
                                        Conds:RS_195._col0=RS_159._col0(Inner),Output:["_col1","_col2"]
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_159]
                                          PartitionCols:_col0
                                          Select Operator [SEL_157] (rows=86400 width=471)
                                            Output:["_col0"]
                                            Filter Operator [FIL_155] (rows=86400 width=471)
                                              predicate:t_hour BETWEEN 6 AND 7
                                               Please refer to the previous TableScan [TS_3]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_195]
                                          PartitionCols:_col0
                                          Select Operator [SEL_194] (rows=144002668 width=135)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_193] (rows=144002668 width=135)
                                              predicate:((ws_ship_hdemo_sk BETWEEN DynamicValue(RS_13_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_13_household_demographics_hd_demo_sk_max) and in_bloom_filter(ws_ship_hdemo_sk, DynamicValue(RS_13_household_demographics_hd_demo_sk_bloom_filter))) and (ws_sold_time_sk BETWEEN DynamicValue(RS_10_time_dim_t_time_sk_min) AND DynamicValue(RS_10_time_dim_t_time_sk_max) and in_bloom_filter(ws_sold_time_sk, DynamicValue(RS_10_time_dim_t_time_sk_bloom_filter))) and (ws_web_page_sk BETWEEN DynamicValue(RS_20_web_page_wp_web_page_sk_min) AND DynamicValue(RS_20_web_page_wp_web_page_sk_max) and in_bloom_filter(ws_web_page_sk, DynamicValue(RS_20_web_page_wp_web_page_sk_bloom_filter))) and ws_ship_hdemo_sk is not null and ws_sold_time_sk is not null and ws_web_page_sk is not null)
                                              TableScan [TS_0] (rows=144002668 width=135)
                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_time_sk","ws_ship_hdemo_sk","ws_web_page_sk"]
                                              <-Reducer 16 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_180]
                                                  Group By Operator [GBY_179] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_177]
                                                      Group By Operator [GBY_175] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_172] (rows=3600 width=107)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_170]
                                              <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_192]
                                                  Group By Operator [GBY_191] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_189]
                                                      Group By Operator [GBY_187] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_184] (rows=511 width=585)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_182]
                                              <-Reducer 9 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_168]
                                                  Group By Operator [GBY_167] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_165]
                                                      Group By Operator [GBY_163] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_160] (rows=86400 width=471)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_157]

