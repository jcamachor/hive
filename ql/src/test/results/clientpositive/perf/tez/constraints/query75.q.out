PREHOOK: query: explain
WITH all_sales AS (
 SELECT d_year
       ,i_brand_id
       ,i_class_id
       ,i_category_id
       ,i_manufact_id
       ,SUM(sales_cnt) AS sales_cnt
       ,SUM(sales_amt) AS sales_amt
 FROM (SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt
             ,cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt
       FROM catalog_sales JOIN item ON i_item_sk=cs_item_sk
                          JOIN date_dim ON d_date_sk=cs_sold_date_sk
                          LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number 
                                                    AND cs_item_sk=cr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt
             ,ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt
       FROM store_sales JOIN item ON i_item_sk=ss_item_sk
                        JOIN date_dim ON d_date_sk=ss_sold_date_sk
                        LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number 
                                                AND ss_item_sk=sr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt
             ,ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt
       FROM web_sales JOIN item ON i_item_sk=ws_item_sk
                      JOIN date_dim ON d_date_sk=ws_sold_date_sk
                      LEFT JOIN web_returns ON (ws_order_number=wr_order_number 
                                            AND ws_item_sk=wr_item_sk)
       WHERE i_category='Sports') sales_detail
 GROUP BY d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id)
 SELECT  prev_yr.d_year AS prev_year
                          ,curr_yr.d_year AS year
                          ,curr_yr.i_brand_id
                          ,curr_yr.i_class_id
                          ,curr_yr.i_category_id
                          ,curr_yr.i_manufact_id
                          ,prev_yr.sales_cnt AS prev_yr_cnt
                          ,curr_yr.sales_cnt AS curr_yr_cnt
                          ,curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff
                          ,curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff
 FROM all_sales curr_yr, all_sales prev_yr
 WHERE curr_yr.i_brand_id=prev_yr.i_brand_id
   AND curr_yr.i_class_id=prev_yr.i_class_id
   AND curr_yr.i_category_id=prev_yr.i_category_id
   AND curr_yr.i_manufact_id=prev_yr.i_manufact_id
   AND curr_yr.d_year=2002
   AND prev_yr.d_year=2002-1
   AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))<0.9
 ORDER BY sales_cnt_diff
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_returns
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
WITH all_sales AS (
 SELECT d_year
       ,i_brand_id
       ,i_class_id
       ,i_category_id
       ,i_manufact_id
       ,SUM(sales_cnt) AS sales_cnt
       ,SUM(sales_amt) AS sales_amt
 FROM (SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,cs_quantity - COALESCE(cr_return_quantity,0) AS sales_cnt
             ,cs_ext_sales_price - COALESCE(cr_return_amount,0.0) AS sales_amt
       FROM catalog_sales JOIN item ON i_item_sk=cs_item_sk
                          JOIN date_dim ON d_date_sk=cs_sold_date_sk
                          LEFT JOIN catalog_returns ON (cs_order_number=cr_order_number 
                                                    AND cs_item_sk=cr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ss_quantity - COALESCE(sr_return_quantity,0) AS sales_cnt
             ,ss_ext_sales_price - COALESCE(sr_return_amt,0.0) AS sales_amt
       FROM store_sales JOIN item ON i_item_sk=ss_item_sk
                        JOIN date_dim ON d_date_sk=ss_sold_date_sk
                        LEFT JOIN store_returns ON (ss_ticket_number=sr_ticket_number 
                                                AND ss_item_sk=sr_item_sk)
       WHERE i_category='Sports'
       UNION
       SELECT d_year
             ,i_brand_id
             ,i_class_id
             ,i_category_id
             ,i_manufact_id
             ,ws_quantity - COALESCE(wr_return_quantity,0) AS sales_cnt
             ,ws_ext_sales_price - COALESCE(wr_return_amt,0.0) AS sales_amt
       FROM web_sales JOIN item ON i_item_sk=ws_item_sk
                      JOIN date_dim ON d_date_sk=ws_sold_date_sk
                      LEFT JOIN web_returns ON (ws_order_number=wr_order_number 
                                            AND ws_item_sk=wr_item_sk)
       WHERE i_category='Sports') sales_detail
 GROUP BY d_year, i_brand_id, i_class_id, i_category_id, i_manufact_id)
 SELECT  prev_yr.d_year AS prev_year
                          ,curr_yr.d_year AS year
                          ,curr_yr.i_brand_id
                          ,curr_yr.i_class_id
                          ,curr_yr.i_category_id
                          ,curr_yr.i_manufact_id
                          ,prev_yr.sales_cnt AS prev_yr_cnt
                          ,curr_yr.sales_cnt AS curr_yr_cnt
                          ,curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff
                          ,curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff
 FROM all_sales curr_yr, all_sales prev_yr
 WHERE curr_yr.i_brand_id=prev_yr.i_brand_id
   AND curr_yr.i_class_id=prev_yr.i_class_id
   AND curr_yr.i_category_id=prev_yr.i_category_id
   AND curr_yr.i_manufact_id=prev_yr.i_manufact_id
   AND curr_yr.d_year=2002
   AND prev_yr.d_year=2002-1
   AND CAST(curr_yr.sales_cnt AS DECIMAL(17,2))/CAST(prev_yr.sales_cnt AS DECIMAL(17,2))<0.9
 ORDER BY sales_cnt_diff
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_returns
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 14 <- Reducer 18 (BROADCAST_EDGE), Reducer 39 (BROADCAST_EDGE)
Map 46 <- Reducer 22 (BROADCAST_EDGE), Reducer 40 (BROADCAST_EDGE)
Map 48 <- Reducer 26 (BROADCAST_EDGE), Reducer 41 (BROADCAST_EDGE)
Map 49 <- Reducer 29 (BROADCAST_EDGE), Reducer 42 (BROADCAST_EDGE)
Map 50 <- Reducer 33 (BROADCAST_EDGE), Reducer 43 (BROADCAST_EDGE)
Map 51 <- Reducer 37 (BROADCAST_EDGE), Reducer 44 (BROADCAST_EDGE)
Reducer 11 <- Union 10 (SIMPLE_EDGE), Union 12 (CONTAINS)
Reducer 13 <- Union 12 (SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 16 <- Map 38 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 18 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 17 (SIMPLE_EDGE), Map 46 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 20 <- Map 38 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Map 45 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE), Union 3 (CONTAINS)
Reducer 22 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Map 17 (SIMPLE_EDGE), Map 48 (SIMPLE_EDGE)
Reducer 24 <- Map 38 (SIMPLE_EDGE), Reducer 23 (SIMPLE_EDGE)
Reducer 25 <- Map 47 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 26 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Map 17 (SIMPLE_EDGE), Map 49 (SIMPLE_EDGE)
Reducer 28 <- Map 38 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 30 <- Map 17 (SIMPLE_EDGE), Map 50 (SIMPLE_EDGE)
Reducer 31 <- Map 38 (SIMPLE_EDGE), Reducer 30 (SIMPLE_EDGE)
Reducer 32 <- Map 45 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE), Union 10 (CONTAINS)
Reducer 33 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 34 <- Map 17 (SIMPLE_EDGE), Map 51 (SIMPLE_EDGE)
Reducer 35 <- Map 38 (SIMPLE_EDGE), Reducer 34 (SIMPLE_EDGE)
Reducer 36 <- Map 47 (SIMPLE_EDGE), Reducer 35 (SIMPLE_EDGE), Union 12 (CONTAINS)
Reducer 37 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 39 <- Map 38 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Union 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 40 <- Map 38 (CUSTOM_SIMPLE_EDGE)
Reducer 41 <- Map 38 (CUSTOM_SIMPLE_EDGE)
Reducer 42 <- Map 38 (CUSTOM_SIMPLE_EDGE)
Reducer 43 <- Map 38 (CUSTOM_SIMPLE_EDGE)
Reducer 44 <- Map 38 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Union 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 13 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 1 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE), Union 10 (CONTAINS)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 8 vectorized
      File Output Operator [FS_651]
        Select Operator [SEL_650] (rows=100 width=111)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
          Limit [LIM_649] (rows=100 width=111)
            Number of rows:100
            Select Operator [SEL_648] (rows=70276244 width=111)
              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
            <-Reducer 7 [SIMPLE_EDGE]
              SHUFFLE [RS_175]
                Select Operator [SEL_174] (rows=70276244 width=111)
                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                  Filter Operator [FIL_173] (rows=70276244 width=111)
                    predicate:((_col13 / _col6) < 0.9)
                    Merge Join Operator [MERGEJOIN_530] (rows=210828734 width=111)
                      Conds:RS_643._col0, _col1, _col2, _col3=RS_647._col0, _col1, _col2, _col3(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col11","_col12","_col13"]
                    <-Reducer 13 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_647]
                        PartitionCols:_col0, _col1, _col2, _col3
                        Select Operator [SEL_646] (rows=191662482 width=111)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                          Group By Operator [GBY_645] (rows=191662482 width=111)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_644] (rows=383324964 width=111)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                            <-Union 12 [SIMPLE_EDGE]
                              <-Reducer 11 [CONTAINS] vectorized
                                Reduce Output Operator [RS_661]
                                  PartitionCols:_col0, _col1, _col2, _col3
                                  Group By Operator [GBY_660] (rows=766649929 width=111)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                    Group By Operator [GBY_659] (rows=574982367 width=103)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                                    <-Union 10 [SIMPLE_EDGE]
                                      <-Reducer 32 [CONTAINS]
                                        Reduce Output Operator [RS_563]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                          Group By Operator [GBY_562] (rows=1149964734 width=103)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                            Select Operator [SEL_560] (rows=766650239 width=88)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Merge Join Operator [MERGEJOIN_559] (rows=766650239 width=88)
                                                Conds:RS_671._col0, _col1=RS_126._col0, _col1(Right Outer),Output:["_col2","_col3","_col6","_col7","_col8","_col9","_col10","_col11"]
                                              <-Map 45 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_671]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_669] (rows=57591150 width=77)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    TableScan [TS_22] (rows=57591150 width=77)
                                                      default@store_returns,store_returns,Tbl:COMPLETE,Col:NONE,Output:["sr_item_sk","sr_ticket_number","sr_return_quantity","sr_return_amt"]
                                              <-Reducer 31 [SIMPLE_EDGE]
                                                SHUFFLE [RS_126]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_124] (rows=696954748 width=88)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                    Merge Join Operator [MERGEJOIN_525] (rows=696954748 width=88)
                                                      Conds:RS_121._col1=RS_616._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                    <-Map 38 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_616]
                                                        PartitionCols:_col0
                                                        Select Operator [SEL_607] (rows=231000 width=1436)
                                                          Output:["_col0","_col1","_col2","_col3","_col4"]
                                                          Filter Operator [FIL_606] (rows=231000 width=1436)
                                                            predicate:((i_category = 'Sports') and i_brand_id is not null and i_category_id is not null and i_class_id is not null and i_manufact_id is not null)
                                                            TableScan [TS_8] (rows=462000 width=1436)
                                                              default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_brand_id","i_class_id","i_category_id","i_category","i_manufact_id"]
                                                    <-Reducer 30 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_121]
                                                        PartitionCols:_col1
                                                        Merge Join Operator [MERGEJOIN_524] (rows=633595212 width=88)
                                                          Conds:RS_688._col0=RS_588._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                        <-Map 17 [SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_588]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_578] (rows=36524 width=1119)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_574] (rows=36524 width=1119)
                                                                predicate:(d_year = 2002)
                                                                TableScan [TS_5] (rows=73049 width=1119)
                                                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                                        <-Map 50 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_688]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_687] (rows=575995635 width=88)
                                                              Output:["_col0","_col1","_col2","_col3","_col4"]
                                                              Filter Operator [FIL_686] (rows=575995635 width=88)
                                                                predicate:((ss_item_sk BETWEEN DynamicValue(RS_122_item_i_item_sk_min) AND DynamicValue(RS_122_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_122_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_119_date_dim_d_date_sk_min) AND DynamicValue(RS_119_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_119_date_dim_d_date_sk_bloom_filter))) and ss_sold_date_sk is not null)
                                                                TableScan [TS_109] (rows=575995635 width=88)
                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_ticket_number","ss_quantity","ss_ext_sales_price"]
                                                                <-Reducer 33 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_683]
                                                                    Group By Operator [GBY_682] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_602]
                                                                        Group By Operator [GBY_596] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_589] (rows=36524 width=1119)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_578]
                                                                <-Reducer 43 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_685]
                                                                    Group By Operator [GBY_684] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 38 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_630]
                                                                        Group By Operator [GBY_624] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_617] (rows=231000 width=1436)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_607]
                                      <-Reducer 9 [CONTAINS]
                                        Reduce Output Operator [RS_544]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                          Group By Operator [GBY_543] (rows=1149964734 width=103)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                            Select Operator [SEL_541] (rows=383314495 width=135)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Merge Join Operator [MERGEJOIN_540] (rows=383314495 width=135)
                                                Conds:RS_571._col0, _col1=RS_104._col0, _col1(Right Outer),Output:["_col2","_col3","_col6","_col7","_col8","_col9","_col10","_col11"]
                                              <-Map 1 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_571]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_569] (rows=28798881 width=106)
                                                    Output:["_col0","_col1","_col2","_col3"]
                                                    TableScan [TS_0] (rows=28798881 width=106)
                                                      default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:NONE,Output:["cr_item_sk","cr_order_number","cr_return_quantity","cr_return_amount"]
                                              <-Reducer 28 [SIMPLE_EDGE]
                                                SHUFFLE [RS_104]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_102] (rows=348467716 width=135)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                    Merge Join Operator [MERGEJOIN_522] (rows=348467716 width=135)
                                                      Conds:RS_99._col1=RS_614._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                    <-Map 38 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_614]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_607]
                                                    <-Reducer 27 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_99]
                                                        PartitionCols:_col1
                                                        Merge Join Operator [MERGEJOIN_521] (rows=316788826 width=135)
                                                          Conds:RS_658._col0=RS_586._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                        <-Map 17 [SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_586]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_577] (rows=36524 width=1119)
                                                              Output:["_col0"]
                                                              Filter Operator [FIL_573] (rows=36524 width=1119)
                                                                predicate:(d_year = 2002)
                                                                 Please refer to the previous TableScan [TS_5]
                                                        <-Map 49 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_658]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_657] (rows=287989836 width=135)
                                                              Output:["_col0","_col1","_col2","_col3","_col4"]
                                                              Filter Operator [FIL_656] (rows=287989836 width=135)
                                                                predicate:((cs_item_sk BETWEEN DynamicValue(RS_100_item_i_item_sk_min) AND DynamicValue(RS_100_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_100_item_i_item_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_97_date_dim_d_date_sk_min) AND DynamicValue(RS_97_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_97_date_dim_d_date_sk_bloom_filter))) and cs_sold_date_sk is not null)
                                                                TableScan [TS_87] (rows=287989836 width=135)
                                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_item_sk","cs_order_number","cs_quantity","cs_ext_sales_price"]
                                                                <-Reducer 29 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_653]
                                                                    Group By Operator [GBY_652] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_601]
                                                                        Group By Operator [GBY_595] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_587] (rows=36524 width=1119)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_577]
                                                                <-Reducer 42 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_655]
                                                                    Group By Operator [GBY_654] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 38 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_629]
                                                                        Group By Operator [GBY_623] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_615] (rows=231000 width=1436)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_607]
                              <-Reducer 36 [CONTAINS]
                                Reduce Output Operator [RS_568]
                                  PartitionCols:_col0, _col1, _col2, _col3
                                  Group By Operator [GBY_567] (rows=766649929 width=111)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                    Select Operator [SEL_565] (rows=191667562 width=135)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                      Merge Join Operator [MERGEJOIN_564] (rows=191667562 width=135)
                                        Conds:RS_681._col0, _col1=RS_155._col0, _col1(Right Outer),Output:["_col2","_col3","_col6","_col7","_col8","_col9","_col10","_col11"]
                                      <-Map 47 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_681]
                                          PartitionCols:_col0, _col1
                                          Select Operator [SEL_679] (rows=14398467 width=92)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            TableScan [TS_51] (rows=14398467 width=92)
                                              default@web_returns,web_returns,Tbl:COMPLETE,Col:NONE,Output:["wr_item_sk","wr_order_number","wr_return_quantity","wr_return_amt"]
                                      <-Reducer 35 [SIMPLE_EDGE]
                                        SHUFFLE [RS_155]
                                          PartitionCols:_col0, _col1
                                          Select Operator [SEL_153] (rows=174243235 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                            Merge Join Operator [MERGEJOIN_528] (rows=174243235 width=135)
                                              Conds:RS_150._col1=RS_618._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                            <-Map 38 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_618]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_607]
                                            <-Reducer 34 [SIMPLE_EDGE]
                                              SHUFFLE [RS_150]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_527] (rows=158402938 width=135)
                                                  Conds:RS_695._col0=RS_590._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                <-Map 17 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_590]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_579] (rows=36524 width=1119)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_575] (rows=36524 width=1119)
                                                        predicate:(d_year = 2002)
                                                         Please refer to the previous TableScan [TS_5]
                                                <-Map 51 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_695]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_694] (rows=144002668 width=135)
                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                      Filter Operator [FIL_693] (rows=144002668 width=135)
                                                        predicate:((ws_item_sk BETWEEN DynamicValue(RS_151_item_i_item_sk_min) AND DynamicValue(RS_151_item_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_151_item_i_item_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_148_date_dim_d_date_sk_min) AND DynamicValue(RS_148_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_148_date_dim_d_date_sk_bloom_filter))) and ws_sold_date_sk is not null)
                                                        TableScan [TS_138] (rows=144002668 width=135)
                                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_order_number","ws_quantity","ws_ext_sales_price"]
                                                        <-Reducer 37 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_690]
                                                            Group By Operator [GBY_689] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_603]
                                                                Group By Operator [GBY_597] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_591] (rows=36524 width=1119)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_579]
                                                        <-Reducer 44 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_692]
                                                            Group By Operator [GBY_691] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 38 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_631]
                                                                Group By Operator [GBY_625] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_619] (rows=231000 width=1436)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_607]
                    <-Reducer 6 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_643]
                        PartitionCols:_col0, _col1, _col2, _col3
                        Select Operator [SEL_642] (rows=191662482 width=111)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                          Group By Operator [GBY_641] (rows=191662482 width=111)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["sum(_col4)","sum(_col5)"],keys:_col0, _col1, _col2, _col3
                            Group By Operator [GBY_640] (rows=383324964 width=111)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                            <-Union 5 [SIMPLE_EDGE]
                              <-Reducer 25 [CONTAINS]
                                Reduce Output Operator [RS_558]
                                  PartitionCols:_col0, _col1, _col2, _col3
                                  Group By Operator [GBY_557] (rows=766649929 width=111)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                    Select Operator [SEL_555] (rows=191667562 width=135)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                      Merge Join Operator [MERGEJOIN_554] (rows=191667562 width=135)
                                        Conds:RS_680._col0, _col1=RS_70._col0, _col1(Right Outer),Output:["_col2","_col3","_col6","_col7","_col8","_col9","_col10","_col11"]
                                      <-Map 47 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_680]
                                          PartitionCols:_col0, _col1
                                           Please refer to the previous Select Operator [SEL_679]
                                      <-Reducer 24 [SIMPLE_EDGE]
                                        SHUFFLE [RS_70]
                                          PartitionCols:_col0, _col1
                                          Select Operator [SEL_68] (rows=174243235 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                            Merge Join Operator [MERGEJOIN_519] (rows=174243235 width=135)
                                              Conds:RS_65._col1=RS_612._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                            <-Map 38 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_612]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_607]
                                            <-Reducer 23 [SIMPLE_EDGE]
                                              SHUFFLE [RS_65]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_518] (rows=158402938 width=135)
                                                  Conds:RS_678._col0=RS_584._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                <-Map 17 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_584]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_576] (rows=36524 width=1119)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_572] (rows=36524 width=1119)
                                                        predicate:(d_year = 2001)
                                                         Please refer to the previous TableScan [TS_5]
                                                <-Map 48 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_678]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_677] (rows=144002668 width=135)
                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                      Filter Operator [FIL_676] (rows=144002668 width=135)
                                                        predicate:((ws_item_sk BETWEEN DynamicValue(RS_66_item_i_item_sk_min) AND DynamicValue(RS_66_item_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_66_item_i_item_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_63_date_dim_d_date_sk_min) AND DynamicValue(RS_63_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_63_date_dim_d_date_sk_bloom_filter))) and ws_sold_date_sk is not null)
                                                        TableScan [TS_53] (rows=144002668 width=135)
                                                          default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_order_number","ws_quantity","ws_ext_sales_price"]
                                                        <-Reducer 26 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_673]
                                                            Group By Operator [GBY_672] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_600]
                                                                Group By Operator [GBY_594] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_585] (rows=36524 width=1119)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_576]
                                                        <-Reducer 41 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_675]
                                                            Group By Operator [GBY_674] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 38 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_628]
                                                                Group By Operator [GBY_622] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_613] (rows=231000 width=1436)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_607]
                              <-Reducer 4 [CONTAINS] vectorized
                                Reduce Output Operator [RS_639]
                                  PartitionCols:_col0, _col1, _col2, _col3
                                  Group By Operator [GBY_638] (rows=766649929 width=111)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                    Group By Operator [GBY_637] (rows=574982367 width=103)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5
                                    <-Union 3 [SIMPLE_EDGE]
                                      <-Reducer 2 [CONTAINS]
                                        Reduce Output Operator [RS_535]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                          Group By Operator [GBY_534] (rows=1149964734 width=103)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                            Select Operator [SEL_532] (rows=383314495 width=135)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Merge Join Operator [MERGEJOIN_531] (rows=383314495 width=135)
                                                Conds:RS_570._col0, _col1=RS_19._col0, _col1(Right Outer),Output:["_col2","_col3","_col6","_col7","_col8","_col9","_col10","_col11"]
                                              <-Map 1 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_570]
                                                  PartitionCols:_col0, _col1
                                                   Please refer to the previous Select Operator [SEL_569]
                                              <-Reducer 16 [SIMPLE_EDGE]
                                                SHUFFLE [RS_19]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_17] (rows=348467716 width=135)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                    Merge Join Operator [MERGEJOIN_513] (rows=348467716 width=135)
                                                      Conds:RS_14._col1=RS_608._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                    <-Map 38 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_608]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_607]
                                                    <-Reducer 15 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_14]
                                                        PartitionCols:_col1
                                                        Merge Join Operator [MERGEJOIN_512] (rows=316788826 width=135)
                                                          Conds:RS_636._col0=RS_580._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                        <-Map 17 [SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_580]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_576]
                                                        <-Map 14 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_636]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_635] (rows=287989836 width=135)
                                                              Output:["_col0","_col1","_col2","_col3","_col4"]
                                                              Filter Operator [FIL_634] (rows=287989836 width=135)
                                                                predicate:((cs_item_sk BETWEEN DynamicValue(RS_15_item_i_item_sk_min) AND DynamicValue(RS_15_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_15_item_i_item_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_12_date_dim_d_date_sk_min) AND DynamicValue(RS_12_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_12_date_dim_d_date_sk_bloom_filter))) and cs_sold_date_sk is not null)
                                                                TableScan [TS_2] (rows=287989836 width=135)
                                                                  default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_item_sk","cs_order_number","cs_quantity","cs_ext_sales_price"]
                                                                <-Reducer 18 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_605]
                                                                    Group By Operator [GBY_604] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_598]
                                                                        Group By Operator [GBY_592] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_581] (rows=36524 width=1119)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_576]
                                                                <-Reducer 39 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_633]
                                                                    Group By Operator [GBY_632] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 38 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_626]
                                                                        Group By Operator [GBY_620] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_609] (rows=231000 width=1436)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_607]
                                      <-Reducer 21 [CONTAINS]
                                        Reduce Output Operator [RS_553]
                                          PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5
                                          Group By Operator [GBY_552] (rows=1149964734 width=103)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"],keys:_col0, _col1, _col2, _col3, _col4, _col5
                                            Select Operator [SEL_550] (rows=766650239 width=88)
                                              Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                              Merge Join Operator [MERGEJOIN_549] (rows=766650239 width=88)
                                                Conds:RS_670._col0, _col1=RS_41._col0, _col1(Right Outer),Output:["_col2","_col3","_col6","_col7","_col8","_col9","_col10","_col11"]
                                              <-Map 45 [SIMPLE_EDGE] vectorized
                                                SHUFFLE [RS_670]
                                                  PartitionCols:_col0, _col1
                                                   Please refer to the previous Select Operator [SEL_669]
                                              <-Reducer 20 [SIMPLE_EDGE]
                                                SHUFFLE [RS_41]
                                                  PartitionCols:_col0, _col1
                                                  Select Operator [SEL_39] (rows=696954748 width=88)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                    Merge Join Operator [MERGEJOIN_516] (rows=696954748 width=88)
                                                      Conds:RS_36._col1=RS_610._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col7","_col8","_col9","_col10"]
                                                    <-Map 38 [SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_610]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_607]
                                                    <-Reducer 19 [SIMPLE_EDGE]
                                                      SHUFFLE [RS_36]
                                                        PartitionCols:_col1
                                                        Merge Join Operator [MERGEJOIN_515] (rows=633595212 width=88)
                                                          Conds:RS_668._col0=RS_582._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                                        <-Map 17 [SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_582]
                                                            PartitionCols:_col0
                                                             Please refer to the previous Select Operator [SEL_576]
                                                        <-Map 46 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_668]
                                                            PartitionCols:_col0
                                                            Select Operator [SEL_667] (rows=575995635 width=88)
                                                              Output:["_col0","_col1","_col2","_col3","_col4"]
                                                              Filter Operator [FIL_666] (rows=575995635 width=88)
                                                                predicate:((ss_item_sk BETWEEN DynamicValue(RS_37_item_i_item_sk_min) AND DynamicValue(RS_37_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_37_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_34_date_dim_d_date_sk_min) AND DynamicValue(RS_34_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_34_date_dim_d_date_sk_bloom_filter))) and ss_sold_date_sk is not null)
                                                                TableScan [TS_24] (rows=575995635 width=88)
                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_ticket_number","ss_quantity","ss_ext_sales_price"]
                                                                <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_663]
                                                                    Group By Operator [GBY_662] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_599]
                                                                        Group By Operator [GBY_593] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_583] (rows=36524 width=1119)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_576]
                                                                <-Reducer 40 [BROADCAST_EDGE] vectorized
                                                                  BROADCAST [RS_665]
                                                                    Group By Operator [GBY_664] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                    <-Map 38 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_627]
                                                                        Group By Operator [GBY_621] (rows=1 width=12)
                                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                          Select Operator [SEL_611] (rows=231000 width=1436)
                                                                            Output:["_col0"]
                                                                             Please refer to the previous Select Operator [SEL_607]

