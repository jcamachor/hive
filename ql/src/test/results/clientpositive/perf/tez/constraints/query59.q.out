PREHOOK: query: explain
with wss as 
 (select d_week_seq,
        ss_store_sk,
        sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then ss_sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales
 from store_sales,date_dim
 where d_date_sk = ss_sold_date_sk
 group by d_week_seq,ss_store_sk
 )
  select  s_store_name1,s_store_id1,d_week_seq1
       ,sun_sales1/sun_sales2,mon_sales1/mon_sales2
       ,tue_sales1/tue_sales1,wed_sales1/wed_sales2,thu_sales1/thu_sales2
       ,fri_sales1/fri_sales2,sat_sales1/sat_sales2
 from
 (select s_store_name s_store_name1,wss.d_week_seq d_week_seq1
        ,s_store_id s_store_id1,sun_sales sun_sales1
        ,mon_sales mon_sales1,tue_sales tue_sales1
        ,wed_sales wed_sales1,thu_sales thu_sales1
        ,fri_sales fri_sales1,sat_sales sat_sales1
  from wss,store,date_dim d
  where d.d_week_seq = wss.d_week_seq and
        ss_store_sk = s_store_sk and 
        d_month_seq between 1185 and 1185 + 11) y,
 (select s_store_name s_store_name2,wss.d_week_seq d_week_seq2
        ,s_store_id s_store_id2,sun_sales sun_sales2
        ,mon_sales mon_sales2,tue_sales tue_sales2
        ,wed_sales wed_sales2,thu_sales thu_sales2
        ,fri_sales fri_sales2,sat_sales sat_sales2
  from wss,store,date_dim d
  where d.d_week_seq = wss.d_week_seq and
        ss_store_sk = s_store_sk and 
        d_month_seq between 1185+ 12 and 1185 + 23) x
 where s_store_id1=s_store_id2
   and d_week_seq1=d_week_seq2-52
 order by s_store_name1,s_store_id1,d_week_seq1
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with wss as 
 (select d_week_seq,
        ss_store_sk,
        sum(case when (d_day_name='Sunday') then ss_sales_price else null end) sun_sales,
        sum(case when (d_day_name='Monday') then ss_sales_price else null end) mon_sales,
        sum(case when (d_day_name='Tuesday') then ss_sales_price else  null end) tue_sales,
        sum(case when (d_day_name='Wednesday') then ss_sales_price else null end) wed_sales,
        sum(case when (d_day_name='Thursday') then ss_sales_price else null end) thu_sales,
        sum(case when (d_day_name='Friday') then ss_sales_price else null end) fri_sales,
        sum(case when (d_day_name='Saturday') then ss_sales_price else null end) sat_sales
 from store_sales,date_dim
 where d_date_sk = ss_sold_date_sk
 group by d_week_seq,ss_store_sk
 )
  select  s_store_name1,s_store_id1,d_week_seq1
       ,sun_sales1/sun_sales2,mon_sales1/mon_sales2
       ,tue_sales1/tue_sales1,wed_sales1/wed_sales2,thu_sales1/thu_sales2
       ,fri_sales1/fri_sales2,sat_sales1/sat_sales2
 from
 (select s_store_name s_store_name1,wss.d_week_seq d_week_seq1
        ,s_store_id s_store_id1,sun_sales sun_sales1
        ,mon_sales mon_sales1,tue_sales tue_sales1
        ,wed_sales wed_sales1,thu_sales thu_sales1
        ,fri_sales fri_sales1,sat_sales sat_sales1
  from wss,store,date_dim d
  where d.d_week_seq = wss.d_week_seq and
        ss_store_sk = s_store_sk and 
        d_month_seq between 1185 and 1185 + 11) y,
 (select s_store_name s_store_name2,wss.d_week_seq d_week_seq2
        ,s_store_id s_store_id2,sun_sales sun_sales2
        ,mon_sales mon_sales2,tue_sales tue_sales2
        ,wed_sales wed_sales2,thu_sales thu_sales2
        ,fri_sales fri_sales2,sat_sales sat_sales2
  from wss,store,date_dim d
  where d.d_week_seq = wss.d_week_seq and
        ss_store_sk = s_store_sk and 
        d_month_seq between 1185+ 12 and 1185 + 23) x
 where s_store_id1=s_store_id2
   and d_week_seq1=d_week_seq2-52
 order by s_store_name1,s_store_id1,d_week_seq1
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 17 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Map 18 <- Reducer 14 (BROADCAST_EDGE), Reducer 20 (BROADCAST_EDGE)
Reducer 10 <- Map 18 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Map 15 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Map 19 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 8 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 16 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 15 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 16 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 13 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_230]
        Limit [LIM_229] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_228] (rows=421657640 width=88)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
          <-Reducer 6 [SIMPLE_EDGE]
            SHUFFLE [RS_58]
              Select Operator [SEL_57] (rows=421657640 width=88)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
                Merge Join Operator [MERGEJOIN_182] (rows=421657640 width=88)
                  Conds:RS_54._col2, _col1=RS_55._col0, _col7(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col11","_col12","_col13","_col14","_col15","_col16"]
                <-Reducer 13 [SIMPLE_EDGE]
                  SHUFFLE [RS_55]
                    PartitionCols:_col0, _col7
                    Select Operator [SEL_53] (rows=383325119 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                      Merge Join Operator [MERGEJOIN_181] (rows=383325119 width=88)
                        Conds:RS_50._col1=RS_217._col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col10"]
                      <-Map 19 [SIMPLE_EDGE] vectorized
                        PARTITION_ONLY_SHUFFLE [RS_217]
                          PartitionCols:_col0
                          Select Operator [SEL_216] (rows=1704 width=1910)
                            Output:["_col0","_col1"]
                            TableScan [TS_45] (rows=1704 width=1910)
                              default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_id"]
                      <-Reducer 12 [SIMPLE_EDGE]
                        SHUFFLE [RS_50]
                          PartitionCols:_col1
                          Merge Join Operator [MERGEJOIN_180] (rows=348477374 width=88)
                            Conds:RS_227._col0=RS_213._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                          <-Map 15 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_213]
                              PartitionCols:_col0
                              Select Operator [SEL_211] (rows=73049 width=1119)
                                Output:["_col0"]
                                Filter Operator [FIL_209] (rows=73049 width=1119)
                                  predicate:(d_month_seq BETWEEN 1197 AND 1208 and d_week_seq is not null)
                                  TableScan [TS_15] (rows=73049 width=1119)
                                    default@date_dim,d,Tbl:COMPLETE,Col:NONE,Output:["d_month_seq","d_week_seq"]
                          <-Reducer 11 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_227]
                              PartitionCols:_col0
                              Group By Operator [GBY_226] (rows=316797606 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)"],keys:KEY._col0, KEY._col1
                              <-Reducer 10 [SIMPLE_EDGE]
                                SHUFFLE [RS_39]
                                  PartitionCols:_col0, _col1
                                  Group By Operator [GBY_38] (rows=633595212 width=88)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col2)","sum(_col3)","sum(_col5)","sum(_col6)","sum(_col7)","sum(_col8)"],keys:_col0, _col1
                                    Select Operator [SEL_36] (rows=633595212 width=88)
                                      Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col7","_col8"]
                                      Merge Join Operator [MERGEJOIN_179] (rows=633595212 width=88)
                                        Conds:RS_225._col0=RS_188._col0(Inner),Output:["_col1","_col2","_col4","_col5","_col6","_col8","_col9","_col10","_col11"]
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_188]
                                          PartitionCols:_col0
                                          Select Operator [SEL_185] (rows=73049 width=1119)
                                            Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col7","_col8"]
                                            Filter Operator [FIL_183] (rows=73049 width=1119)
                                              predicate:d_week_seq is not null
                                              TableScan [TS_3] (rows=73049 width=1119)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_week_seq","d_day_name"]
                                      <-Map 18 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_225]
                                          PartitionCols:_col0
                                          Select Operator [SEL_224] (rows=575995635 width=88)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_223] (rows=575995635 width=88)
                                              predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_34_date_dim_d_date_sk_min) AND DynamicValue(RS_34_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_34_date_dim_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_51_store_s_store_sk_min) AND DynamicValue(RS_51_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_51_store_s_store_sk_bloom_filter))) and ss_sold_date_sk is not null and ss_store_sk is not null)
                                              TableScan [TS_27] (rows=575995635 width=88)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_store_sk","ss_sales_price"]
                                              <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_215]
                                                  Group By Operator [GBY_214] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_193]
                                                      Group By Operator [GBY_191] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_189] (rows=73049 width=1119)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_185]
                                              <-Reducer 20 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_222]
                                                  Group By Operator [GBY_221] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_220]
                                                      Group By Operator [GBY_219] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_218] (rows=1704 width=1910)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_216]
                <-Reducer 5 [SIMPLE_EDGE]
                  SHUFFLE [RS_54]
                    PartitionCols:_col2, _col1
                    Select Operator [SEL_26] (rows=383325119 width=88)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"]
                      Merge Join Operator [MERGEJOIN_178] (rows=383325119 width=88)
                        Conds:RS_23._col1=RS_197._col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col11","_col12"]
                      <-Map 16 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_197]
                          PartitionCols:_col0
                          Select Operator [SEL_196] (rows=1704 width=1910)
                            Output:["_col0","_col1","_col2"]
                            TableScan [TS_18] (rows=1704 width=1910)
                              default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_id","s_store_name"]
                      <-Reducer 4 [SIMPLE_EDGE]
                        SHUFFLE [RS_23]
                          PartitionCols:_col1
                          Merge Join Operator [MERGEJOIN_177] (rows=348477374 width=88)
                            Conds:RS_207._col0=RS_212._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                          <-Map 15 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_212]
                              PartitionCols:_col0
                              Select Operator [SEL_210] (rows=73049 width=1119)
                                Output:["_col0"]
                                Filter Operator [FIL_208] (rows=73049 width=1119)
                                  predicate:(d_month_seq BETWEEN 1185 AND 1196 and d_week_seq is not null)
                                   Please refer to the previous TableScan [TS_15]
                          <-Reducer 3 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_207]
                              PartitionCols:_col0
                              Group By Operator [GBY_206] (rows=316797606 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)","sum(VALUE._col3)","sum(VALUE._col4)","sum(VALUE._col5)","sum(VALUE._col6)"],keys:KEY._col0, KEY._col1
                              <-Reducer 2 [SIMPLE_EDGE]
                                SHUFFLE [RS_12]
                                  PartitionCols:_col0, _col1
                                  Group By Operator [GBY_11] (rows=633595212 width=88)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"],aggregations:["sum(_col2)","sum(_col3)","sum(_col4)","sum(_col5)","sum(_col6)","sum(_col7)","sum(_col8)"],keys:_col0, _col1
                                    Select Operator [SEL_9] (rows=633595212 width=88)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                      Merge Join Operator [MERGEJOIN_176] (rows=633595212 width=88)
                                        Conds:RS_205._col0=RS_186._col0(Inner),Output:["_col1","_col2","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_186]
                                          PartitionCols:_col0
                                          Select Operator [SEL_184] (rows=73049 width=1119)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                             Please refer to the previous Filter Operator [FIL_183]
                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_205]
                                          PartitionCols:_col0
                                          Select Operator [SEL_204] (rows=575995635 width=88)
                                            Output:["_col0","_col1","_col2"]
                                            Filter Operator [FIL_203] (rows=575995635 width=88)
                                              predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_7_date_dim_d_date_sk_min) AND DynamicValue(RS_7_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_7_date_dim_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_24_store_s_store_sk_min) AND DynamicValue(RS_24_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_24_store_s_store_sk_bloom_filter))) and ss_sold_date_sk is not null and ss_store_sk is not null)
                                              TableScan [TS_0] (rows=575995635 width=88)
                                                default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_store_sk","ss_sales_price"]
                                              <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_202]
                                                  Group By Operator [GBY_201] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_200]
                                                      Group By Operator [GBY_199] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_198] (rows=1704 width=1910)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_196]
                                              <-Reducer 9 [BROADCAST_EDGE] vectorized
                                                BROADCAST [RS_195]
                                                  Group By Operator [GBY_194] (rows=1 width=12)
                                                    Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                  <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_192]
                                                      Group By Operator [GBY_190] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                        Select Operator [SEL_187] (rows=73049 width=1119)
                                                          Output:["_col0"]
                                                           Please refer to the previous Select Operator [SEL_184]

