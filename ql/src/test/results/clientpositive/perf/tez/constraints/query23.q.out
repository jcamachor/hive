Warning: Shuffle Join MERGEJOIN[455][tables = [$hdt$_2, $hdt$_3]] in Stage 'Reducer 17' is a cross product
Warning: Shuffle Join MERGEJOIN[456][tables = [$hdt$_2, $hdt$_3, $hdt$_1]] in Stage 'Reducer 18' is a cross product
PREHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with frequent_ss_items as 
 (select substr(i_item_desc,1,30) itemdesc,i_item_sk item_sk,d_date solddate,count(*) cnt
  from store_sales
      ,date_dim 
      ,item
  where ss_sold_date_sk = d_date_sk
    and ss_item_sk = i_item_sk 
    and d_year in (1999,1999+1,1999+2,1999+3)
  group by substr(i_item_desc,1,30),i_item_sk,d_date
  having count(*) >4),
 max_store_sales as
 (select max(csales) tpcds_cmax 
  from (select c_customer_sk,sum(ss_quantity*ss_sales_price) csales
        from store_sales
            ,customer
            ,date_dim 
        where ss_customer_sk = c_customer_sk
         and ss_sold_date_sk = d_date_sk
         and d_year in (1999,1999+1,1999+2,1999+3) 
        group by c_customer_sk) x),
 best_ss_customer as
 (select c_customer_sk,sum(ss_quantity*ss_sales_price) ssales
  from store_sales
      ,customer
  where ss_customer_sk = c_customer_sk
  group by c_customer_sk
  having sum(ss_quantity*ss_sales_price) > (95/100.0) * (select
  *
from
 max_store_sales))
  select  sum(sales)
 from ((select cs_quantity*cs_list_price sales
       from catalog_sales
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and cs_sold_date_sk = d_date_sk 
         and cs_item_sk in (select item_sk from frequent_ss_items)
         and cs_bill_customer_sk in (select c_customer_sk from best_ss_customer))
      union all
      (select ws_quantity*ws_list_price sales
       from web_sales 
           ,date_dim 
       where d_year = 1999 
         and d_moy = 1 
         and ws_sold_date_sk = d_date_sk 
         and ws_item_sk in (select item_sk from frequent_ss_items)
         and ws_bill_customer_sk in (select c_customer_sk from best_ss_customer))) y
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 20 (BROADCAST_EDGE), Reducer 30 (BROADCAST_EDGE), Reducer 8 (BROADCAST_EDGE)
Map 13 <- Reducer 23 (BROADCAST_EDGE)
Map 26 <- Reducer 33 (BROADCAST_EDGE), Reducer 35 (BROADCAST_EDGE)
Map 37 <- Reducer 12 (BROADCAST_EDGE), Reducer 36 (BROADCAST_EDGE)
Reducer 10 <- Reducer 19 (ONE_TO_ONE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (SIMPLE_EDGE), Reducer 31 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 12 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Map 13 (SIMPLE_EDGE), Map 22 (SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (CUSTOM_SIMPLE_EDGE), Reducer 21 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (CUSTOM_SIMPLE_EDGE), Reducer 25 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 20 <- Reducer 19 (CUSTOM_SIMPLE_EDGE)
Reducer 21 <- Reducer 15 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Map 22 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 24 (SIMPLE_EDGE)
Reducer 27 <- Map 26 (SIMPLE_EDGE), Map 32 (SIMPLE_EDGE)
Reducer 28 <- Map 34 (SIMPLE_EDGE), Reducer 27 (SIMPLE_EDGE)
Reducer 29 <- Reducer 28 (SIMPLE_EDGE)
Reducer 3 <- Reducer 19 (ONE_TO_ONE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 29 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Reducer 28 (SIMPLE_EDGE)
Reducer 33 <- Map 32 (CUSTOM_SIMPLE_EDGE)
Reducer 35 <- Map 34 (CUSTOM_SIMPLE_EDGE)
Reducer 36 <- Map 34 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 29 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE), Union 5 (CONTAINS)
Reducer 6 <- Union 5 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 37 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_563]
        Limit [LIM_562] (rows=1 width=112)
          Number of rows:100
          Group By Operator [GBY_561] (rows=1 width=112)
            Output:["_col0"],aggregations:["sum(VALUE._col0)"]
          <-Union 5 [CUSTOM_SIMPLE_EDGE]
            <-Reducer 11 [CONTAINS]
              Reduce Output Operator [RS_472]
                Group By Operator [GBY_471] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_469] (rows=191667562 width=135)
                    Output:["_col0"]
                    Merge Join Operator [MERGEJOIN_468] (rows=191667562 width=135)
                      Conds:RS_210._col1=RS_576._col0(Inner),Output:["_col3","_col4"]
                    <-Reducer 10 [SIMPLE_EDGE]
                      SHUFFLE [RS_210]
                        PartitionCols:_col1
                        Merge Join Operator [MERGEJOIN_460] (rows=174243235 width=135)
                          Conds:RS_207._col2=RS_521._col0(Inner),Output:["_col1","_col3","_col4"]
                        <-Reducer 19 [ONE_TO_ONE_EDGE] vectorized
                          FORWARD [RS_521]
                            PartitionCols:_col0
                            Group By Operator [GBY_518] (rows=47999636 width=434)
                              Output:["_col0"],keys:KEY._col0
                            <-Reducer 18 [SIMPLE_EDGE]
                              SHUFFLE [RS_69]
                                PartitionCols:_col0
                                Group By Operator [GBY_68] (rows=95999272 width=434)
                                  Output:["_col0"],keys:_col2
                                  Select Operator [SEL_67] (rows=95999272 width=434)
                                    Output:["_col2"]
                                    Filter Operator [FIL_66] (rows=95999272 width=434)
                                      predicate:(_col3 > _col1)
                                      Merge Join Operator [MERGEJOIN_456] (rows=287997817 width=434)
                                        Conds:(Inner),Output:["_col1","_col2","_col3"]
                                      <-Reducer 17 [CUSTOM_SIMPLE_EDGE]
                                        PARTITION_ONLY_SHUFFLE [RS_63]
                                          Merge Join Operator [MERGEJOIN_455] (rows=1 width=345)
                                            Conds:(Inner),Output:["_col1"]
                                          <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_508]
                                              Select Operator [SEL_507] (rows=1 width=120)
                                                Filter Operator [FIL_506] (rows=1 width=120)
                                                  predicate:(sq_count_check(_col0) <= 1)
                                                  Group By Operator [GBY_505] (rows=1 width=120)
                                                    Output:["_col0"],aggregations:["count()"]
                                                    Select Operator [SEL_504] (rows=1 width=120)
                                                      Group By Operator [GBY_503] (rows=1 width=120)
                                                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                      <-Reducer 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_501]
                                                          Group By Operator [GBY_499] (rows=1 width=120)
                                                            Output:["_col0"],aggregations:["count(_col0)"]
                                                            Select Operator [SEL_497] (rows=316797606 width=88)
                                                              Output:["_col0"]
                                                              Group By Operator [GBY_496] (rows=316797606 width=88)
                                                                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                                              <-Reducer 14 [SIMPLE_EDGE]
                                                                SHUFFLE [RS_17]
                                                                  PartitionCols:_col0
                                                                  Group By Operator [GBY_16] (rows=633595212 width=88)
                                                                    Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col1
                                                                    Merge Join Operator [MERGEJOIN_446] (rows=633595212 width=88)
                                                                      Conds:RS_495._col0=RS_487._col0(Inner),Output:["_col1","_col2"]
                                                                    <-Map 22 [SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_487]
                                                                        PartitionCols:_col0
                                                                        Select Operator [SEL_486] (rows=73049 width=1119)
                                                                          Output:["_col0"]
                                                                          Filter Operator [FIL_485] (rows=73049 width=1119)
                                                                            predicate:(d_year) IN (1999, 2000, 2001, 2002)
                                                                            TableScan [TS_9] (rows=73049 width=1119)
                                                                              default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                                                    <-Map 13 [SIMPLE_EDGE] vectorized
                                                                      SHUFFLE [RS_495]
                                                                        PartitionCols:_col0
                                                                        Select Operator [SEL_494] (rows=575995635 width=88)
                                                                          Output:["_col0","_col1","_col2"]
                                                                          Filter Operator [FIL_493] (rows=575995635 width=88)
                                                                            predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_13_date_dim_d_date_sk_min) AND DynamicValue(RS_13_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_13_date_dim_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                                            TableScan [TS_6] (rows=575995635 width=88)
                                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk","ss_quantity","ss_sales_price"]
                                                                            <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                                              BROADCAST [RS_492]
                                                                                Group By Operator [GBY_491] (rows=1 width=12)
                                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                                <-Map 22 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                  PARTITION_ONLY_SHUFFLE [RS_490]
                                                                                    Group By Operator [GBY_489] (rows=1 width=12)
                                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                      Select Operator [SEL_488] (rows=73049 width=1119)
                                                                                        Output:["_col0"]
                                                                                         Please refer to the previous Select Operator [SEL_486]
                                          <-Reducer 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_511]
                                              Select Operator [SEL_510] (rows=1 width=224)
                                                Output:["_col0"]
                                                Group By Operator [GBY_509] (rows=1 width=224)
                                                  Output:["_col0"],aggregations:["max(VALUE._col0)"]
                                                <-Reducer 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_502]
                                                    Group By Operator [GBY_500] (rows=1 width=224)
                                                      Output:["_col0"],aggregations:["max(_col1)"]
                                                      Select Operator [SEL_498] (rows=316797606 width=88)
                                                        Output:["_col1"]
                                                         Please refer to the previous Group By Operator [GBY_496]
                                      <-Reducer 25 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_517]
                                          Group By Operator [GBY_516] (rows=287997817 width=88)
                                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                          <-Map 24 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_515]
                                              PartitionCols:_col0
                                              Group By Operator [GBY_514] (rows=575995635 width=88)
                                                Output:["_col0","_col1"],aggregations:["sum(_col1)"],keys:_col0
                                                Select Operator [SEL_513] (rows=575995635 width=88)
                                                  Output:["_col0","_col1"]
                                                  Filter Operator [FIL_512] (rows=575995635 width=88)
                                                    predicate:ss_customer_sk is not null
                                                    TableScan [TS_52] (rows=575995635 width=88)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_customer_sk","ss_quantity","ss_sales_price"]
                        <-Reducer 9 [SIMPLE_EDGE]
                          SHUFFLE [RS_207]
                            PartitionCols:_col2
                            Merge Join Operator [MERGEJOIN_450] (rows=158402938 width=135)
                              Conds:RS_570._col0=RS_477._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_477]
                                PartitionCols:_col0
                                Select Operator [SEL_474] (rows=18262 width=1119)
                                  Output:["_col0"]
                                  Filter Operator [FIL_473] (rows=18262 width=1119)
                                    predicate:((d_moy = 1) and (d_year = 1999))
                                    TableScan [TS_3] (rows=73049 width=1119)
                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_moy"]
                            <-Map 37 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_570]
                                PartitionCols:_col0
                                Select Operator [SEL_569] (rows=144002668 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_568] (rows=144002668 width=135)
                                    predicate:((ws_item_sk BETWEEN DynamicValue(RS_191_item_i_item_sk_min) AND DynamicValue(RS_191_item_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_191_item_i_item_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_205_date_dim_d_date_sk_min) AND DynamicValue(RS_205_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_205_date_dim_d_date_sk_bloom_filter))) and ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                    TableScan [TS_107] (rows=144002668 width=135)
                                      default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_bill_customer_sk","ws_quantity","ws_list_price"]
                                    <-Reducer 12 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_565]
                                        Group By Operator [GBY_564] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_482]
                                            Group By Operator [GBY_480] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_478] (rows=18262 width=1119)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_474]
                                    <-Reducer 36 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_567]
                                        Group By Operator [GBY_566] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 34 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_541]
                                            Group By Operator [GBY_539] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_537] (rows=462000 width=1436)
                                                Output:["_col0"]
                                                Select Operator [SEL_534] (rows=462000 width=1436)
                                                  Output:["_col0","_col1"]
                                                  TableScan [TS_78] (rows=462000 width=1436)
                                                    default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_desc"]
                    <-Reducer 31 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_576]
                        PartitionCols:_col0
                        Group By Operator [GBY_575] (rows=58079562 width=88)
                          Output:["_col0"],keys:_col1
                          Select Operator [SEL_574] (rows=116159124 width=88)
                            Output:["_col1"]
                            Filter Operator [FIL_573] (rows=116159124 width=88)
                              predicate:(_col3 > 4L)
                              Select Operator [SEL_572] (rows=348477374 width=88)
                                Output:["_col1","_col3"]
                                Group By Operator [GBY_571] (rows=348477374 width=88)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                <-Reducer 28 [SIMPLE_EDGE]
                                  SHUFFLE [RS_195]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_87] (rows=696954748 width=88)
                                      Output:["_col0","_col1","_col2","_col3"],aggregations:["count()"],keys:_col4, _col3, _col5
                                      Merge Join Operator [MERGEJOIN_449] (rows=696954748 width=88)
                                        Conds:RS_83._col1=RS_535._col0(Inner),Output:["_col3","_col4","_col5"]
                                      <-Map 34 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_535]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_534]
                                      <-Reducer 27 [SIMPLE_EDGE]
                                        SHUFFLE [RS_83]
                                          PartitionCols:_col1
                                          Merge Join Operator [MERGEJOIN_448] (rows=633595212 width=88)
                                            Conds:RS_546._col0=RS_528._col0(Inner),Output:["_col1","_col3"]
                                          <-Map 32 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_528]
                                              PartitionCols:_col0
                                              Select Operator [SEL_527] (rows=73049 width=1119)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_526] (rows=73049 width=1119)
                                                  predicate:(d_year) IN (1999, 2000, 2001, 2002)
                                                  TableScan [TS_75] (rows=73049 width=1119)
                                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date","d_year"]
                                          <-Map 26 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_546]
                                              PartitionCols:_col0
                                              Select Operator [SEL_545] (rows=575995635 width=88)
                                                Output:["_col0","_col1"]
                                                Filter Operator [FIL_544] (rows=575995635 width=88)
                                                  predicate:((ss_item_sk BETWEEN DynamicValue(RS_84_item_i_item_sk_min) AND DynamicValue(RS_84_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_84_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_81_date_dim_d_date_sk_min) AND DynamicValue(RS_81_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_81_date_dim_d_date_sk_bloom_filter))) and ss_sold_date_sk is not null)
                                                  TableScan [TS_72] (rows=575995635 width=88)
                                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk"]
                                                  <-Reducer 33 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_533]
                                                      Group By Operator [GBY_532] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_531]
                                                          Group By Operator [GBY_530] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_529] (rows=73049 width=1119)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_527]
                                                  <-Reducer 35 [BROADCAST_EDGE] vectorized
                                                    BROADCAST [RS_543]
                                                      Group By Operator [GBY_542] (rows=1 width=12)
                                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                      <-Map 34 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_540]
                                                          Group By Operator [GBY_538] (rows=1 width=12)
                                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                            Select Operator [SEL_536] (rows=462000 width=1436)
                                                              Output:["_col0"]
                                                               Please refer to the previous Select Operator [SEL_534]
            <-Reducer 4 [CONTAINS]
              Reduce Output Operator [RS_467]
                Group By Operator [GBY_466] (rows=1 width=112)
                  Output:["_col0"],aggregations:["sum(_col0)"]
                  Select Operator [SEL_464] (rows=383314495 width=135)
                    Output:["_col0"]
                    Merge Join Operator [MERGEJOIN_463] (rows=383314495 width=135)
                      Conds:RS_103._col2=RS_552._col0(Inner),Output:["_col3","_col4"]
                    <-Reducer 29 [SIMPLE_EDGE] vectorized
                      SHUFFLE [RS_552]
                        PartitionCols:_col0
                        Group By Operator [GBY_551] (rows=58079562 width=88)
                          Output:["_col0"],keys:_col1
                          Select Operator [SEL_550] (rows=116159124 width=88)
                            Output:["_col1"]
                            Filter Operator [FIL_549] (rows=116159124 width=88)
                              predicate:(_col3 > 4L)
                              Select Operator [SEL_548] (rows=348477374 width=88)
                                Output:["_col1","_col3"]
                                Group By Operator [GBY_547] (rows=348477374 width=88)
                                  Output:["_col0","_col1","_col2","_col3"],aggregations:["count(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                                <-Reducer 28 [SIMPLE_EDGE]
                                  SHUFFLE [RS_88]
                                    PartitionCols:_col0
                                     Please refer to the previous Group By Operator [GBY_87]
                    <-Reducer 3 [SIMPLE_EDGE]
                      SHUFFLE [RS_103]
                        PartitionCols:_col2
                        Merge Join Operator [MERGEJOIN_457] (rows=348467716 width=135)
                          Conds:RS_100._col1=RS_519._col0(Inner),Output:["_col2","_col3","_col4"]
                        <-Reducer 19 [ONE_TO_ONE_EDGE] vectorized
                          FORWARD [RS_519]
                            PartitionCols:_col0
                             Please refer to the previous Group By Operator [GBY_518]
                        <-Reducer 2 [SIMPLE_EDGE]
                          SHUFFLE [RS_100]
                            PartitionCols:_col1
                            Merge Join Operator [MERGEJOIN_445] (rows=316788826 width=135)
                              Conds:RS_560._col0=RS_475._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                            <-Map 7 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_475]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_474]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_560]
                                PartitionCols:_col0
                                Select Operator [SEL_559] (rows=287989836 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                  Filter Operator [FIL_558] (rows=287989836 width=135)
                                    predicate:((cs_bill_customer_sk BETWEEN DynamicValue(RS_101_store_sales_ss_customer_sk_min) AND DynamicValue(RS_101_store_sales_ss_customer_sk_max) and in_bloom_filter(cs_bill_customer_sk, DynamicValue(RS_101_store_sales_ss_customer_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_104_item_i_item_sk_min) AND DynamicValue(RS_104_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_104_item_i_item_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_98_date_dim_d_date_sk_min) AND DynamicValue(RS_98_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_98_date_dim_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                    TableScan [TS_0] (rows=287989836 width=135)
                                      default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity","cs_list_price"]
                                    <-Reducer 20 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_525]
                                        Group By Operator [GBY_524] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=47999636)"]
                                        <-Reducer 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                          FORWARD [RS_523]
                                            Group By Operator [GBY_522] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=47999636)"]
                                              Select Operator [SEL_520] (rows=47999636 width=434)
                                                Output:["_col0"]
                                                 Please refer to the previous Group By Operator [GBY_518]
                                    <-Reducer 30 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_557]
                                        Group By Operator [GBY_556] (rows=1 width=20)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=58079560)"]
                                        <-Reducer 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_555]
                                            Group By Operator [GBY_554] (rows=1 width=20)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=58079560)"]
                                              Select Operator [SEL_553] (rows=58079562 width=88)
                                                Output:["_col0"]
                                                 Please refer to the previous Group By Operator [GBY_551]
                                    <-Reducer 8 [BROADCAST_EDGE] vectorized
                                      BROADCAST [RS_484]
                                        Group By Operator [GBY_483] (rows=1 width=12)
                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                        <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_481]
                                            Group By Operator [GBY_479] (rows=1 width=12)
                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                              Select Operator [SEL_476] (rows=18262 width=1119)
                                                Output:["_col0"]
                                                 Please refer to the previous Select Operator [SEL_474]

