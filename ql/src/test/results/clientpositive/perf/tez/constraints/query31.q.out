PREHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ss as
 (select ca_county,d_qoy, d_year,sum(ss_ext_sales_price) as store_sales
 from store_sales,date_dim,customer_address
 where ss_sold_date_sk = d_date_sk
  and ss_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year),
 ws as
 (select ca_county,d_qoy, d_year,sum(ws_ext_sales_price) as web_sales
 from web_sales,date_dim,customer_address
 where ws_sold_date_sk = d_date_sk
  and ws_bill_addr_sk=ca_address_sk
 group by ca_county,d_qoy, d_year)
 select /* tt */
        ss1.ca_county
       ,ss1.d_year
       ,ws2.web_sales/ws1.web_sales web_q1_q2_increase
       ,ss2.store_sales/ss1.store_sales store_q1_q2_increase
       ,ws3.web_sales/ws2.web_sales web_q2_q3_increase
       ,ss3.store_sales/ss2.store_sales store_q2_q3_increase
 from
        ss ss1
       ,ss ss2
       ,ss ss3
       ,ws ws1
       ,ws ws2
       ,ws ws3
 where
    ss1.d_qoy = 1
    and ss1.d_year = 2000
    and ss1.ca_county = ss2.ca_county
    and ss2.d_qoy = 2
    and ss2.d_year = 2000
 and ss2.ca_county = ss3.ca_county
    and ss3.d_qoy = 3
    and ss3.d_year = 2000
    and ss1.ca_county = ws1.ca_county
    and ws1.d_qoy = 1
    and ws1.d_year = 2000
    and ws1.ca_county = ws2.ca_county
    and ws2.d_qoy = 2
    and ws2.d_year = 2000
    and ws1.ca_county = ws3.ca_county
    and ws3.d_qoy = 3
    and ws3.d_year =2000
    and case when ws1.web_sales > 0 then ws2.web_sales/ws1.web_sales else null end 
       > case when ss1.store_sales > 0 then ss2.store_sales/ss1.store_sales else null end
    and case when ws2.web_sales > 0 then ws3.web_sales/ws2.web_sales else null end
       > case when ss2.store_sales > 0 then ss3.store_sales/ss2.store_sales else null end
 order by ss1.d_year
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE), Reducer 33 (BROADCAST_EDGE)
Map 39 <- Reducer 15 (BROADCAST_EDGE), Reducer 34 (BROADCAST_EDGE)
Map 40 <- Reducer 19 (BROADCAST_EDGE), Reducer 35 (BROADCAST_EDGE)
Map 41 <- Reducer 23 (BROADCAST_EDGE), Reducer 36 (BROADCAST_EDGE)
Map 42 <- Reducer 27 (BROADCAST_EDGE), Reducer 37 (BROADCAST_EDGE)
Map 43 <- Reducer 31 (BROADCAST_EDGE), Reducer 38 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 10 (SIMPLE_EDGE), Map 39 (SIMPLE_EDGE)
Reducer 13 <- Map 32 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 10 (SIMPLE_EDGE), Map 40 (SIMPLE_EDGE)
Reducer 17 <- Map 32 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 10 (SIMPLE_EDGE)
Reducer 20 <- Map 10 (SIMPLE_EDGE), Map 41 (SIMPLE_EDGE)
Reducer 21 <- Map 32 (SIMPLE_EDGE), Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Reducer 21 (SIMPLE_EDGE)
Reducer 23 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 10 (SIMPLE_EDGE), Map 42 (SIMPLE_EDGE)
Reducer 25 <- Map 32 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 26 <- Reducer 25 (SIMPLE_EDGE)
Reducer 27 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 10 (SIMPLE_EDGE), Map 43 (SIMPLE_EDGE)
Reducer 29 <- Map 32 (SIMPLE_EDGE), Reducer 28 (SIMPLE_EDGE)
Reducer 3 <- Map 32 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Reducer 29 (SIMPLE_EDGE)
Reducer 31 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 32 (CUSTOM_SIMPLE_EDGE)
Reducer 34 <- Map 32 (CUSTOM_SIMPLE_EDGE)
Reducer 35 <- Map 32 (CUSTOM_SIMPLE_EDGE)
Reducer 36 <- Map 32 (CUSTOM_SIMPLE_EDGE)
Reducer 37 <- Map 32 (CUSTOM_SIMPLE_EDGE)
Reducer 38 <- Map 32 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 14 (ONE_TO_ONE_EDGE), Reducer 4 (ONE_TO_ONE_EDGE)
Reducer 6 <- Reducer 18 (ONE_TO_ONE_EDGE), Reducer 5 (ONE_TO_ONE_EDGE)
Reducer 7 <- Reducer 22 (ONE_TO_ONE_EDGE), Reducer 6 (ONE_TO_ONE_EDGE)
Reducer 8 <- Reducer 26 (ONE_TO_ONE_EDGE), Reducer 7 (ONE_TO_ONE_EDGE)
Reducer 9 <- Reducer 30 (ONE_TO_ONE_EDGE), Reducer 8 (ONE_TO_ONE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 9
      File Output Operator [FS_140]
        Select Operator [SEL_139] (rows=140306588 width=88)
          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          Filter Operator [FIL_138] (rows=140306588 width=88)
            predicate:CASE WHEN (_col6) THEN (CASE WHEN (_col7) THEN (((_col10 / _col2) > _col5)) ELSE (_col8) END) ELSE (CASE WHEN (_col7) THEN (((_col10 / _col2) > null)) ELSE (null) END) END
            Merge Join Operator [MERGEJOIN_465] (rows=280613177 width=88)
              Conds:RS_135._col1=RS_585._col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col10"]
            <-Reducer 30 [ONE_TO_ONE_EDGE] vectorized
              FORWARD [RS_585]
                PartitionCols:_col0
                Group By Operator [GBY_584] (rows=87121617 width=135)
                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                <-Reducer 29 [SIMPLE_EDGE]
                  SHUFFLE [RS_132]
                    PartitionCols:_col0
                    Group By Operator [GBY_131] (rows=174243235 width=135)
                      Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                      Merge Join Operator [MERGEJOIN_460] (rows=174243235 width=135)
                        Conds:RS_127._col1=RS_516._col0(Inner),Output:["_col2","_col5"]
                      <-Map 32 [SIMPLE_EDGE] vectorized
                        PARTITION_ONLY_SHUFFLE [RS_516]
                          PartitionCols:_col0
                          Select Operator [SEL_505] (rows=40000000 width=1014)
                            Output:["_col0","_col1"]
                            Filter Operator [FIL_504] (rows=40000000 width=1014)
                              predicate:ca_county is not null
                              TableScan [TS_6] (rows=40000000 width=1014)
                                default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_county"]
                      <-Reducer 28 [SIMPLE_EDGE]
                        SHUFFLE [RS_127]
                          PartitionCols:_col1
                          Merge Join Operator [MERGEJOIN_459] (rows=158402938 width=135)
                            Conds:RS_583._col0=RS_488._col0(Inner),Output:["_col1","_col2"]
                          <-Map 10 [SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_488]
                              PartitionCols:_col0
                              Select Operator [SEL_477] (rows=18262 width=1119)
                                Output:["_col0"]
                                Filter Operator [FIL_471] (rows=18262 width=1119)
                                  predicate:((d_qoy = 3) and (d_year = 2000))
                                  TableScan [TS_3] (rows=73049 width=1119)
                                    default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_qoy"]
                          <-Map 43 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_583]
                              PartitionCols:_col0
                              Select Operator [SEL_582] (rows=144002668 width=135)
                                Output:["_col0","_col1","_col2"]
                                Filter Operator [FIL_581] (rows=144002668 width=135)
                                  predicate:((ws_bill_addr_sk BETWEEN DynamicValue(RS_128_customer_address_ca_address_sk_min) AND DynamicValue(RS_128_customer_address_ca_address_sk_max) and in_bloom_filter(ws_bill_addr_sk, DynamicValue(RS_128_customer_address_ca_address_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_125_date_dim_d_date_sk_min) AND DynamicValue(RS_125_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_125_date_dim_d_date_sk_bloom_filter))) and ws_bill_addr_sk is not null and ws_sold_date_sk is not null)
                                  TableScan [TS_115] (rows=144002668 width=135)
                                    default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                  <-Reducer 31 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_578]
                                      Group By Operator [GBY_577] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                      <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_501]
                                          Group By Operator [GBY_495] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                            Select Operator [SEL_489] (rows=18262 width=1119)
                                              Output:["_col0"]
                                               Please refer to the previous Select Operator [SEL_477]
                                  <-Reducer 38 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_580]
                                      Group By Operator [GBY_579] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=40000000)"]
                                      <-Map 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_529]
                                          Group By Operator [GBY_523] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=40000000)"]
                                            Select Operator [SEL_517] (rows=40000000 width=1014)
                                              Output:["_col0"]
                                               Please refer to the previous Select Operator [SEL_505]
            <-Reducer 8 [ONE_TO_ONE_EDGE]
              FORWARD [RS_135]
                PartitionCols:_col1
                Select Operator [SEL_114] (rows=255102883 width=88)
                  Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                  Filter Operator [FIL_113] (rows=255102883 width=88)
                    predicate:CASE WHEN (_col5) THEN (CASE WHEN (_col9) THEN (((_col11 / _col8) > _col1)) ELSE (_col6) END) ELSE (CASE WHEN (_col9) THEN (((_col11 / _col8) > null)) ELSE (null) END) END
                    Merge Join Operator [MERGEJOIN_464] (rows=510205766 width=88)
                      Conds:RS_110._col0=RS_576._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9","_col11","_col12"]
                    <-Reducer 26 [ONE_TO_ONE_EDGE] vectorized
                      FORWARD [RS_576]
                        PartitionCols:_col0
                        Select Operator [SEL_575] (rows=87121617 width=135)
                          Output:["_col0","_col1","_col2"]
                          Group By Operator [GBY_574] (rows=87121617 width=135)
                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                          <-Reducer 25 [SIMPLE_EDGE]
                            SHUFFLE [RS_104]
                              PartitionCols:_col0
                              Group By Operator [GBY_103] (rows=174243235 width=135)
                                Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                Merge Join Operator [MERGEJOIN_458] (rows=174243235 width=135)
                                  Conds:RS_99._col1=RS_514._col0(Inner),Output:["_col2","_col5"]
                                <-Map 32 [SIMPLE_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_514]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_505]
                                <-Reducer 24 [SIMPLE_EDGE]
                                  SHUFFLE [RS_99]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_457] (rows=158402938 width=135)
                                      Conds:RS_573._col0=RS_486._col0(Inner),Output:["_col1","_col2"]
                                    <-Map 10 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_486]
                                        PartitionCols:_col0
                                        Select Operator [SEL_476] (rows=18262 width=1119)
                                          Output:["_col0"]
                                          Filter Operator [FIL_470] (rows=18262 width=1119)
                                            predicate:((d_qoy = 2) and (d_year = 2000))
                                             Please refer to the previous TableScan [TS_3]
                                    <-Map 42 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_573]
                                        PartitionCols:_col0
                                        Select Operator [SEL_572] (rows=144002668 width=135)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_571] (rows=144002668 width=135)
                                            predicate:((ws_bill_addr_sk BETWEEN DynamicValue(RS_100_customer_address_ca_address_sk_min) AND DynamicValue(RS_100_customer_address_ca_address_sk_max) and in_bloom_filter(ws_bill_addr_sk, DynamicValue(RS_100_customer_address_ca_address_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_97_date_dim_d_date_sk_min) AND DynamicValue(RS_97_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_97_date_dim_d_date_sk_bloom_filter))) and ws_bill_addr_sk is not null and ws_sold_date_sk is not null)
                                            TableScan [TS_87] (rows=144002668 width=135)
                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                            <-Reducer 27 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_568]
                                                Group By Operator [GBY_567] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_500]
                                                    Group By Operator [GBY_494] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_487] (rows=18262 width=1119)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_476]
                                            <-Reducer 37 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_570]
                                                Group By Operator [GBY_569] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=40000000)"]
                                                <-Map 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_528]
                                                    Group By Operator [GBY_522] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=40000000)"]
                                                      Select Operator [SEL_515] (rows=40000000 width=1014)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_505]
                    <-Reducer 7 [ONE_TO_ONE_EDGE]
                      FORWARD [RS_110]
                        PartitionCols:_col0
                        Merge Join Operator [MERGEJOIN_463] (rows=463823414 width=88)
                          Conds:RS_107._col0=RS_566._col0(Inner),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col8","_col9"]
                        <-Reducer 22 [ONE_TO_ONE_EDGE] vectorized
                          FORWARD [RS_566]
                            PartitionCols:_col0
                            Select Operator [SEL_565] (rows=87121617 width=135)
                              Output:["_col0","_col1","_col2"]
                              Group By Operator [GBY_564] (rows=87121617 width=135)
                                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                              <-Reducer 21 [SIMPLE_EDGE]
                                SHUFFLE [RS_84]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_83] (rows=174243235 width=135)
                                    Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                    Merge Join Operator [MERGEJOIN_456] (rows=174243235 width=135)
                                      Conds:RS_79._col1=RS_512._col0(Inner),Output:["_col2","_col5"]
                                    <-Map 32 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_512]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_505]
                                    <-Reducer 20 [SIMPLE_EDGE]
                                      SHUFFLE [RS_79]
                                        PartitionCols:_col1
                                        Merge Join Operator [MERGEJOIN_455] (rows=158402938 width=135)
                                          Conds:RS_563._col0=RS_484._col0(Inner),Output:["_col1","_col2"]
                                        <-Map 10 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_484]
                                            PartitionCols:_col0
                                            Select Operator [SEL_475] (rows=18262 width=1119)
                                              Output:["_col0"]
                                              Filter Operator [FIL_469] (rows=18262 width=1119)
                                                predicate:((d_qoy = 1) and (d_year = 2000))
                                                 Please refer to the previous TableScan [TS_3]
                                        <-Map 41 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_563]
                                            PartitionCols:_col0
                                            Select Operator [SEL_562] (rows=144002668 width=135)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_561] (rows=144002668 width=135)
                                                predicate:((ws_bill_addr_sk BETWEEN DynamicValue(RS_80_customer_address_ca_address_sk_min) AND DynamicValue(RS_80_customer_address_ca_address_sk_max) and in_bloom_filter(ws_bill_addr_sk, DynamicValue(RS_80_customer_address_ca_address_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_77_date_dim_d_date_sk_min) AND DynamicValue(RS_77_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_77_date_dim_d_date_sk_bloom_filter))) and ws_bill_addr_sk is not null and ws_sold_date_sk is not null)
                                                TableScan [TS_67] (rows=144002668 width=135)
                                                  default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_addr_sk","ws_ext_sales_price"]
                                                <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_558]
                                                    Group By Operator [GBY_557] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_499]
                                                        Group By Operator [GBY_493] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_485] (rows=18262 width=1119)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_475]
                                                <-Reducer 36 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_560]
                                                    Group By Operator [GBY_559] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=40000000)"]
                                                    <-Map 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_527]
                                                        Group By Operator [GBY_521] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=40000000)"]
                                                          Select Operator [SEL_513] (rows=40000000 width=1014)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_505]
                        <-Reducer 6 [ONE_TO_ONE_EDGE]
                          FORWARD [RS_107]
                            PartitionCols:_col0
                            Select Operator [SEL_66] (rows=421657640 width=88)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                              Merge Join Operator [MERGEJOIN_462] (rows=421657640 width=88)
                                Conds:RS_63._col0=RS_556._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col5","_col7"]
                              <-Reducer 18 [ONE_TO_ONE_EDGE] vectorized
                                FORWARD [RS_556]
                                  PartitionCols:_col0
                                  Group By Operator [GBY_555] (rows=348477374 width=88)
                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                  <-Reducer 17 [SIMPLE_EDGE]
                                    SHUFFLE [RS_57]
                                      PartitionCols:_col0
                                      Group By Operator [GBY_56] (rows=696954748 width=88)
                                        Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                        Merge Join Operator [MERGEJOIN_454] (rows=696954748 width=88)
                                          Conds:RS_52._col1=RS_510._col0(Inner),Output:["_col2","_col5"]
                                        <-Map 32 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_510]
                                            PartitionCols:_col0
                                             Please refer to the previous Select Operator [SEL_505]
                                        <-Reducer 16 [SIMPLE_EDGE]
                                          SHUFFLE [RS_52]
                                            PartitionCols:_col1
                                            Merge Join Operator [MERGEJOIN_453] (rows=633595212 width=88)
                                              Conds:RS_554._col0=RS_482._col0(Inner),Output:["_col1","_col2"]
                                            <-Map 10 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_482]
                                                PartitionCols:_col0
                                                Select Operator [SEL_474] (rows=18262 width=1119)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_468] (rows=18262 width=1119)
                                                    predicate:((d_qoy = 3) and (d_year = 2000))
                                                     Please refer to the previous TableScan [TS_3]
                                            <-Map 40 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_554]
                                                PartitionCols:_col0
                                                Select Operator [SEL_553] (rows=575995635 width=88)
                                                  Output:["_col0","_col1","_col2"]
                                                  Filter Operator [FIL_552] (rows=575995635 width=88)
                                                    predicate:((ss_addr_sk BETWEEN DynamicValue(RS_53_customer_address_ca_address_sk_min) AND DynamicValue(RS_53_customer_address_ca_address_sk_max) and in_bloom_filter(ss_addr_sk, DynamicValue(RS_53_customer_address_ca_address_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_50_date_dim_d_date_sk_min) AND DynamicValue(RS_50_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_50_date_dim_d_date_sk_bloom_filter))) and ss_addr_sk is not null and ss_sold_date_sk is not null)
                                                    TableScan [TS_40] (rows=575995635 width=88)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
                                                    <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_549]
                                                        Group By Operator [GBY_548] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_498]
                                                            Group By Operator [GBY_492] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_483] (rows=18262 width=1119)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_474]
                                                    <-Reducer 35 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_551]
                                                        Group By Operator [GBY_550] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=40000000)"]
                                                        <-Map 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_526]
                                                            Group By Operator [GBY_520] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=40000000)"]
                                                              Select Operator [SEL_511] (rows=40000000 width=1014)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_505]
                              <-Reducer 5 [ONE_TO_ONE_EDGE]
                                FORWARD [RS_63]
                                  PartitionCols:_col0
                                  Merge Join Operator [MERGEJOIN_461] (rows=383325119 width=88)
                                    Conds:RS_537._col0=RS_547._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col5"]
                                  <-Reducer 14 [ONE_TO_ONE_EDGE] vectorized
                                    FORWARD [RS_547]
                                      PartitionCols:_col0
                                      Select Operator [SEL_546] (rows=348477374 width=88)
                                        Output:["_col0","_col1","_col2"]
                                        Group By Operator [GBY_545] (rows=348477374 width=88)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                        <-Reducer 13 [SIMPLE_EDGE]
                                          SHUFFLE [RS_37]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_36] (rows=696954748 width=88)
                                              Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                              Merge Join Operator [MERGEJOIN_452] (rows=696954748 width=88)
                                                Conds:RS_32._col1=RS_508._col0(Inner),Output:["_col2","_col5"]
                                              <-Map 32 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_508]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_505]
                                              <-Reducer 12 [SIMPLE_EDGE]
                                                SHUFFLE [RS_32]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_451] (rows=633595212 width=88)
                                                    Conds:RS_544._col0=RS_480._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_480]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_473] (rows=18262 width=1119)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_467] (rows=18262 width=1119)
                                                          predicate:((d_qoy = 1) and (d_year = 2000))
                                                           Please refer to the previous TableScan [TS_3]
                                                  <-Map 39 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_544]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_543] (rows=575995635 width=88)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_542] (rows=575995635 width=88)
                                                          predicate:((ss_addr_sk BETWEEN DynamicValue(RS_33_customer_address_ca_address_sk_min) AND DynamicValue(RS_33_customer_address_ca_address_sk_max) and in_bloom_filter(ss_addr_sk, DynamicValue(RS_33_customer_address_ca_address_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_30_date_dim_d_date_sk_min) AND DynamicValue(RS_30_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_30_date_dim_d_date_sk_bloom_filter))) and ss_addr_sk is not null and ss_sold_date_sk is not null)
                                                          TableScan [TS_20] (rows=575995635 width=88)
                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
                                                          <-Reducer 15 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_539]
                                                              Group By Operator [GBY_538] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_497]
                                                                  Group By Operator [GBY_491] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_481] (rows=18262 width=1119)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_473]
                                                          <-Reducer 34 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_541]
                                                              Group By Operator [GBY_540] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=40000000)"]
                                                              <-Map 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_525]
                                                                  Group By Operator [GBY_519] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=40000000)"]
                                                                    Select Operator [SEL_509] (rows=40000000 width=1014)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_505]
                                  <-Reducer 4 [ONE_TO_ONE_EDGE] vectorized
                                    FORWARD [RS_537]
                                      PartitionCols:_col0
                                      Select Operator [SEL_536] (rows=348477374 width=88)
                                        Output:["_col0","_col1","_col2"]
                                        Group By Operator [GBY_535] (rows=348477374 width=88)
                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0
                                        <-Reducer 3 [SIMPLE_EDGE]
                                          SHUFFLE [RS_17]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_16] (rows=696954748 width=88)
                                              Output:["_col0","_col1"],aggregations:["sum(_col2)"],keys:_col5
                                              Merge Join Operator [MERGEJOIN_450] (rows=696954748 width=88)
                                                Conds:RS_12._col1=RS_506._col0(Inner),Output:["_col2","_col5"]
                                              <-Map 32 [SIMPLE_EDGE] vectorized
                                                PARTITION_ONLY_SHUFFLE [RS_506]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_505]
                                              <-Reducer 2 [SIMPLE_EDGE]
                                                SHUFFLE [RS_12]
                                                  PartitionCols:_col1
                                                  Merge Join Operator [MERGEJOIN_449] (rows=633595212 width=88)
                                                    Conds:RS_534._col0=RS_478._col0(Inner),Output:["_col1","_col2"]
                                                  <-Map 10 [SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_478]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_472] (rows=18262 width=1119)
                                                        Output:["_col0"]
                                                        Filter Operator [FIL_466] (rows=18262 width=1119)
                                                          predicate:((d_qoy = 2) and (d_year = 2000))
                                                           Please refer to the previous TableScan [TS_3]
                                                  <-Map 1 [SIMPLE_EDGE] vectorized
                                                    SHUFFLE [RS_534]
                                                      PartitionCols:_col0
                                                      Select Operator [SEL_533] (rows=575995635 width=88)
                                                        Output:["_col0","_col1","_col2"]
                                                        Filter Operator [FIL_532] (rows=575995635 width=88)
                                                          predicate:((ss_addr_sk BETWEEN DynamicValue(RS_13_customer_address_ca_address_sk_min) AND DynamicValue(RS_13_customer_address_ca_address_sk_max) and in_bloom_filter(ss_addr_sk, DynamicValue(RS_13_customer_address_ca_address_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_10_date_dim_d_date_sk_min) AND DynamicValue(RS_10_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_10_date_dim_d_date_sk_bloom_filter))) and ss_addr_sk is not null and ss_sold_date_sk is not null)
                                                          TableScan [TS_0] (rows=575995635 width=88)
                                                            default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_addr_sk","ss_ext_sales_price"]
                                                          <-Reducer 11 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_503]
                                                              Group By Operator [GBY_502] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                              <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_496]
                                                                  Group By Operator [GBY_490] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                    Select Operator [SEL_479] (rows=18262 width=1119)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_472]
                                                          <-Reducer 33 [BROADCAST_EDGE] vectorized
                                                            BROADCAST [RS_531]
                                                              Group By Operator [GBY_530] (rows=1 width=12)
                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=40000000)"]
                                                              <-Map 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_524]
                                                                  Group By Operator [GBY_518] (rows=1 width=12)
                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=40000000)"]
                                                                    Select Operator [SEL_507] (rows=40000000 width=1014)
                                                                      Output:["_col0"]
                                                                       Please refer to the previous Select Operator [SEL_505]

