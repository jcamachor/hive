PREHOOK: query: explain
select  i_item_desc
      ,w_warehouse_name
      ,d1.d_week_seq
      ,count(case when p_promo_sk is null then 1 else 0 end) no_promo
      ,count(case when p_promo_sk is not null then 1 else 0 end) promo
      ,count(*) total_cnt
from catalog_sales
join inventory on (cs_item_sk = inv_item_sk)
join warehouse on (w_warehouse_sk=inv_warehouse_sk)
join item on (i_item_sk = cs_item_sk)
join customer_demographics on (cs_bill_cdemo_sk = cd_demo_sk)
join household_demographics on (cs_bill_hdemo_sk = hd_demo_sk)
join date_dim d1 on (cs_sold_date_sk = d1.d_date_sk)
join date_dim d2 on (inv_date_sk = d2.d_date_sk)
join date_dim d3 on (cs_ship_date_sk = d3.d_date_sk)
left outer join promotion on (cs_promo_sk=p_promo_sk)
left outer join catalog_returns on (cr_item_sk = cs_item_sk and cr_order_number = cs_order_number)
where d1.d_week_seq = d2.d_week_seq
  and inv_quantity_on_hand < cs_quantity 
  and d3.d_date > d1.d_date + 5
  and hd_buy_potential = '1001-5000'
  and d1.d_year = 2001
  and hd_buy_potential = '1001-5000'
  and cd_marital_status = 'M'
  and d1.d_year = 2001
group by i_item_desc,w_warehouse_name,d1.d_week_seq
order by total_cnt desc, i_item_desc, w_warehouse_name, d_week_seq
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_returns
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@household_demographics
PREHOOK: Input: default@inventory
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@warehouse
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  i_item_desc
      ,w_warehouse_name
      ,d1.d_week_seq
      ,count(case when p_promo_sk is null then 1 else 0 end) no_promo
      ,count(case when p_promo_sk is not null then 1 else 0 end) promo
      ,count(*) total_cnt
from catalog_sales
join inventory on (cs_item_sk = inv_item_sk)
join warehouse on (w_warehouse_sk=inv_warehouse_sk)
join item on (i_item_sk = cs_item_sk)
join customer_demographics on (cs_bill_cdemo_sk = cd_demo_sk)
join household_demographics on (cs_bill_hdemo_sk = hd_demo_sk)
join date_dim d1 on (cs_sold_date_sk = d1.d_date_sk)
join date_dim d2 on (inv_date_sk = d2.d_date_sk)
join date_dim d3 on (cs_ship_date_sk = d3.d_date_sk)
left outer join promotion on (cs_promo_sk=p_promo_sk)
left outer join catalog_returns on (cr_item_sk = cs_item_sk and cr_order_number = cs_order_number)
where d1.d_week_seq = d2.d_week_seq
  and inv_quantity_on_hand < cs_quantity 
  and d3.d_date > d1.d_date + 5
  and hd_buy_potential = '1001-5000'
  and d1.d_year = 2001
  and hd_buy_potential = '1001-5000'
  and cd_marital_status = 'M'
  and d1.d_year = 2001
group by i_item_desc,w_warehouse_name,d1.d_week_seq
order by total_cnt desc, i_item_desc, w_warehouse_name, d_week_seq
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_returns
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@household_demographics
POSTHOOK: Input: default@inventory
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@warehouse
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 16 <- Reducer 14 (BROADCAST_EDGE), Reducer 18 (BROADCAST_EDGE), Reducer 20 (BROADCAST_EDGE), Reducer 22 (BROADCAST_EDGE), Reducer 24 (BROADCAST_EDGE), Reducer 27 (BROADCAST_EDGE)
Reducer 10 <- Map 28 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 29 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 15 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (CUSTOM_SIMPLE_EDGE)
Reducer 22 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 23 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Map 26 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 16 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 17 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 19 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 21 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 23 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 25 (SIMPLE_EDGE), Reducer 7 (SIMPLE_EDGE)
Reducer 9 <- Map 26 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 13 vectorized
      File Output Operator [FS_310]
        Limit [LIM_309] (rows=100 width=135)
          Number of rows:100
          Select Operator [SEL_308] (rows=37725837 width=135)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
          <-Reducer 12 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_307]
              Group By Operator [GBY_306] (rows=37725837 width=135)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["count(VALUE._col0)","count(VALUE._col1)","count(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2
              <-Reducer 11 [SIMPLE_EDGE]
                SHUFFLE [RS_66]
                  PartitionCols:_col0, _col1, _col2
                  Group By Operator [GBY_65] (rows=75451674 width=135)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"],aggregations:["count(_col5)","count(_col6)","count()"],keys:_col3, _col2, _col4
                    Select Operator [SEL_63] (rows=75451674 width=135)
                      Output:["_col2","_col3","_col4","_col5","_col6"]
                      Merge Join Operator [MERGEJOIN_251] (rows=75451674 width=135)
                        Conds:RS_60._col0, _col2=RS_305._col0, _col1(Left Outer),Output:["_col3","_col4","_col5","_col6"]
                      <-Map 29 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_305]
                          PartitionCols:_col0, _col1
                          Select Operator [SEL_304] (rows=28798881 width=106)
                            Output:["_col0","_col1"]
                            TableScan [TS_55] (rows=28798881 width=106)
                              default@catalog_returns,catalog_returns,Tbl:COMPLETE,Col:NONE,Output:["cr_item_sk","cr_order_number"]
                      <-Reducer 10 [SIMPLE_EDGE]
                        SHUFFLE [RS_60]
                          PartitionCols:_col0, _col2
                          Merge Join Operator [MERGEJOIN_250] (rows=68592430 width=135)
                            Conds:RS_57._col1=RS_303._col0(Left Outer),Output:["_col0","_col2","_col3","_col4","_col5","_col6"]
                          <-Map 28 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_303]
                              PartitionCols:_col0
                              Select Operator [SEL_302] (rows=2300 width=1179)
                                Output:["_col0"]
                                TableScan [TS_53] (rows=2300 width=1179)
                                  default@promotion,promotion,Tbl:COMPLETE,Col:NONE,Output:["p_promo_sk"]
                          <-Reducer 9 [SIMPLE_EDGE]
                            SHUFFLE [RS_57]
                              PartitionCols:_col1
                              Select Operator [SEL_52] (rows=62356754 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                Filter Operator [FIL_51] (rows=62356754 width=135)
                                  predicate:(_col12 > _col8)
                                  Merge Join Operator [MERGEJOIN_249] (rows=187070264 width=135)
                                    Conds:RS_48._col0=RS_290._col0(Inner),Output:["_col1","_col2","_col3","_col5","_col6","_col7","_col8","_col12"]
                                  <-Map 26 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_290]
                                      PartitionCols:_col0
                                      Select Operator [SEL_289] (rows=73049 width=1119)
                                        Output:["_col0","_col1"]
                                        TableScan [TS_43] (rows=73049 width=1119)
                                          default@date_dim,d3,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date"]
                                  <-Reducer 8 [SIMPLE_EDGE]
                                    SHUFFLE [RS_48]
                                      PartitionCols:_col0
                                      Merge Join Operator [MERGEJOIN_248] (rows=170063873 width=135)
                                        Conds:RS_45._col4, _col7=RS_301._col0, _col1(Inner),Output:["_col0","_col1","_col2","_col3","_col5","_col6","_col7","_col8"]
                                      <-Map 25 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_301]
                                          PartitionCols:_col0, _col1
                                          Select Operator [SEL_300] (rows=73049 width=1119)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_299] (rows=73049 width=1119)
                                              predicate:d_week_seq is not null
                                              TableScan [TS_40] (rows=73049 width=1119)
                                                default@date_dim,d2,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_week_seq"]
                                      <-Reducer 7 [SIMPLE_EDGE]
                                        SHUFFLE [RS_45]
                                          PartitionCols:_col4, _col7
                                          Select Operator [SEL_39] (rows=154603518 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                            Merge Join Operator [MERGEJOIN_247] (rows=154603518 width=135)
                                              Conds:RS_36._col2=RS_283._col0(Inner),Output:["_col1","_col3","_col4","_col5","_col6","_col7","_col8","_col10","_col11"]
                                            <-Map 23 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_283]
                                                PartitionCols:_col0
                                                Select Operator [SEL_282] (rows=3600 width=107)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_281] (rows=3600 width=107)
                                                    predicate:(hd_buy_potential = '1001-5000')
                                                    TableScan [TS_30] (rows=7200 width=107)
                                                      default@household_demographics,household_demographics,Tbl:COMPLETE,Col:NONE,Output:["hd_demo_sk","hd_buy_potential"]
                                            <-Reducer 6 [SIMPLE_EDGE]
                                              SHUFFLE [RS_36]
                                                PartitionCols:_col2
                                                Merge Join Operator [MERGEJOIN_246] (rows=140548650 width=135)
                                                  Conds:RS_33._col0=RS_275._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col10","_col11"]
                                                <-Map 21 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_275]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_274] (rows=36524 width=1119)
                                                      Output:["_col0","_col1","_col2"]
                                                      Filter Operator [FIL_273] (rows=36524 width=1119)
                                                        predicate:((d_year = 2001) and d_week_seq is not null)
                                                        TableScan [TS_27] (rows=73049 width=1119)
                                                          default@date_dim,d1,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_date","d_week_seq","d_year"]
                                                <-Reducer 5 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_33]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_26] (rows=127771498 width=135)
                                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                                      Merge Join Operator [MERGEJOIN_245] (rows=127771498 width=135)
                                                        Conds:RS_23._col4=RS_267._col0(Inner),Output:["_col0","_col1","_col3","_col4","_col5","_col6","_col7","_col8","_col11"]
                                                      <-Map 19 [SIMPLE_EDGE] vectorized
                                                        SHUFFLE [RS_267]
                                                          PartitionCols:_col0
                                                          Select Operator [SEL_266] (rows=462000 width=1436)
                                                            Output:["_col0","_col1"]
                                                            TableScan [TS_18] (rows=462000 width=1436)
                                                              default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_item_desc"]
                                                      <-Reducer 4 [SIMPLE_EDGE]
                                                        SHUFFLE [RS_23]
                                                          PartitionCols:_col4
                                                          Merge Join Operator [MERGEJOIN_244] (rows=116155905 width=135)
                                                            Conds:RS_20._col2=RS_260._col0(Inner),Output:["_col0","_col1","_col3","_col4","_col5","_col6","_col7","_col8"]
                                                          <-Map 17 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_260]
                                                              PartitionCols:_col0
                                                              Select Operator [SEL_259] (rows=930900 width=385)
                                                                Output:["_col0"]
                                                                Filter Operator [FIL_258] (rows=930900 width=385)
                                                                  predicate:(cd_marital_status = 'M')
                                                                  TableScan [TS_15] (rows=1861800 width=385)
                                                                    default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:NONE,Output:["cd_demo_sk","cd_marital_status"]
                                                          <-Reducer 3 [SIMPLE_EDGE]
                                                            SHUFFLE [RS_20]
                                                              PartitionCols:_col2
                                                              Select Operator [SEL_14] (rows=105596275 width=135)
                                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8"]
                                                                Filter Operator [FIL_13] (rows=105596275 width=135)
                                                                  predicate:(_col3 < _col13)
                                                                  Merge Join Operator [MERGEJOIN_243] (rows=316788826 width=135)
                                                                    Conds:RS_10._col1=RS_298._col4(Inner),Output:["_col0","_col3","_col5","_col6","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                                                  <-Reducer 2 [SIMPLE_EDGE]
                                                                    SHUFFLE [RS_10]
                                                                      PartitionCols:_col1
                                                                      Merge Join Operator [MERGEJOIN_242] (rows=41342400 width=15)
                                                                        Conds:RS_253._col2=RS_255._col0(Inner),Output:["_col0","_col1","_col3","_col5"]
                                                                      <-Map 1 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_253]
                                                                          PartitionCols:_col2
                                                                          Select Operator [SEL_252] (rows=37584000 width=15)
                                                                            Output:["_col0","_col1","_col2","_col3"]
                                                                            TableScan [TS_0] (rows=37584000 width=15)
                                                                              default@inventory,inventory,Tbl:COMPLETE,Col:NONE,Output:["inv_date_sk","inv_item_sk","inv_warehouse_sk","inv_quantity_on_hand"]
                                                                      <-Map 15 [SIMPLE_EDGE] vectorized
                                                                        SHUFFLE [RS_255]
                                                                          PartitionCols:_col0
                                                                          Select Operator [SEL_254] (rows=27 width=1029)
                                                                            Output:["_col0","_col1"]
                                                                            TableScan [TS_2] (rows=27 width=1029)
                                                                              default@warehouse,warehouse,Tbl:COMPLETE,Col:NONE,Output:["w_warehouse_sk","w_warehouse_name"]
                                                                  <-Map 16 [SIMPLE_EDGE] vectorized
                                                                    SHUFFLE [RS_298]
                                                                      PartitionCols:_col4
                                                                      Select Operator [SEL_297] (rows=287989836 width=135)
                                                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                                                        Filter Operator [FIL_296] (rows=287989836 width=135)
                                                                          predicate:((cs_bill_cdemo_sk BETWEEN DynamicValue(RS_21_customer_demographics_cd_demo_sk_min) AND DynamicValue(RS_21_customer_demographics_cd_demo_sk_max) and in_bloom_filter(cs_bill_cdemo_sk, DynamicValue(RS_21_customer_demographics_cd_demo_sk_bloom_filter))) and (cs_bill_hdemo_sk BETWEEN DynamicValue(RS_37_household_demographics_hd_demo_sk_min) AND DynamicValue(RS_37_household_demographics_hd_demo_sk_max) and in_bloom_filter(cs_bill_hdemo_sk, DynamicValue(RS_37_household_demographics_hd_demo_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_10_inventory_inv_item_sk_min) AND DynamicValue(RS_10_inventory_inv_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_10_inventory_inv_item_sk_bloom_filter))) and (cs_item_sk BETWEEN DynamicValue(RS_24_item_i_item_sk_min) AND DynamicValue(RS_24_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_24_item_i_item_sk_bloom_filter))) and (cs_ship_date_sk BETWEEN DynamicValue(RS_49_d3_d_date_sk_min) AND DynamicValue(RS_49_d3_d_date_sk_max) and in_bloom_filter(cs_ship_date_sk, DynamicValue(RS_49_d3_d_date_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_34_d1_d_date_sk_min) AND DynamicValue(RS_34_d1_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_34_d1_d_date_sk_bloom_filter))) and cs_bill_cdemo_sk is not null and cs_bill_hdemo_sk is not null and cs_ship_date_sk is not null and cs_sold_date_sk is not null)
                                                                          TableScan [TS_4] (rows=287989836 width=135)
                                                                            default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_ship_date_sk","cs_bill_cdemo_sk","cs_bill_hdemo_sk","cs_item_sk","cs_promo_sk","cs_order_number","cs_quantity"]
                                                                          <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                                            BROADCAST [RS_257]
                                                                              Group By Operator [GBY_256] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=41342400)"]
                                                                              <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                                                                SHUFFLE [RS_157]
                                                                                  Group By Operator [GBY_156] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=41342400)"]
                                                                                    Select Operator [SEL_155] (rows=41342400 width=15)
                                                                                      Output:["_col0"]
                                                                                       Please refer to the previous Merge Join Operator [MERGEJOIN_242]
                                                                          <-Reducer 18 [BROADCAST_EDGE] vectorized
                                                                            BROADCAST [RS_265]
                                                                              Group By Operator [GBY_264] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                              <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_263]
                                                                                  Group By Operator [GBY_262] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                    Select Operator [SEL_261] (rows=930900 width=385)
                                                                                      Output:["_col0"]
                                                                                       Please refer to the previous Select Operator [SEL_259]
                                                                          <-Reducer 20 [BROADCAST_EDGE] vectorized
                                                                            BROADCAST [RS_272]
                                                                              Group By Operator [GBY_271] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                              <-Map 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_270]
                                                                                  Group By Operator [GBY_269] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                    Select Operator [SEL_268] (rows=462000 width=1436)
                                                                                      Output:["_col0"]
                                                                                       Please refer to the previous Select Operator [SEL_266]
                                                                          <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                                            BROADCAST [RS_280]
                                                                              Group By Operator [GBY_279] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                              <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_278]
                                                                                  Group By Operator [GBY_277] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                    Select Operator [SEL_276] (rows=36524 width=1119)
                                                                                      Output:["_col0"]
                                                                                       Please refer to the previous Select Operator [SEL_274]
                                                                          <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                                            BROADCAST [RS_288]
                                                                              Group By Operator [GBY_287] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                              <-Map 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_286]
                                                                                  Group By Operator [GBY_285] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                    Select Operator [SEL_284] (rows=3600 width=107)
                                                                                      Output:["_col0"]
                                                                                       Please refer to the previous Select Operator [SEL_282]
                                                                          <-Reducer 27 [BROADCAST_EDGE] vectorized
                                                                            BROADCAST [RS_295]
                                                                              Group By Operator [GBY_294] (rows=1 width=12)
                                                                                Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                              <-Map 26 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                SHUFFLE [RS_293]
                                                                                  Group By Operator [GBY_292] (rows=1 width=12)
                                                                                    Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                                    Select Operator [SEL_291] (rows=73049 width=1119)
                                                                                      Output:["_col0"]
                                                                                       Please refer to the previous Select Operator [SEL_289]

