Warning: Shuffle Join MERGEJOIN[176][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
Warning: Shuffle Join MERGEJOIN[177][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 3' is a cross product
Warning: Shuffle Join MERGEJOIN[178][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 4' is a cross product
Warning: Shuffle Join MERGEJOIN[179][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 5' is a cross product
Warning: Shuffle Join MERGEJOIN[180][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3]] in Stage 'Reducer 6' is a cross product
Warning: Shuffle Join MERGEJOIN[181][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 7' is a cross product
Warning: Shuffle Join MERGEJOIN[182][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 8' is a cross product
Warning: Shuffle Join MERGEJOIN[183][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3]] in Stage 'Reducer 9' is a cross product
Warning: Shuffle Join MERGEJOIN[184][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 10' is a cross product
Warning: Shuffle Join MERGEJOIN[185][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 11' is a cross product
Warning: Shuffle Join MERGEJOIN[186][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3]] in Stage 'Reducer 12' is a cross product
Warning: Shuffle Join MERGEJOIN[187][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 13' is a cross product
Warning: Shuffle Join MERGEJOIN[188][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 14' is a cross product
Warning: Shuffle Join MERGEJOIN[189][tables = [$hdt$_0, $hdt$_1, $hdt$_2, $hdt$_3]] in Stage 'Reducer 15' is a cross product
Warning: Shuffle Join MERGEJOIN[190][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 16' is a cross product
PREHOOK: query: explain
select case when (select count(*) 
                  from store_sales 
                  where ss_quantity between 1 and 20) > 409437
            then (select avg(ss_ext_list_price) 
                  from store_sales 
                  where ss_quantity between 1 and 20) 
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 1 and 20) end bucket1 ,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 21 and 40) > 4595804
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 21 and 40) 
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 21 and 40) end bucket2,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 41 and 60) > 7887297
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 41 and 60)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 41 and 60) end bucket3,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 61 and 80) > 10872978
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 61 and 80)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 61 and 80) end bucket4,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 81 and 100) > 43571537
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 81 and 100)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 81 and 100) end bucket5
from reason
where r_reason_sk = 1
PREHOOK: type: QUERY
PREHOOK: Input: default@reason
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select case when (select count(*) 
                  from store_sales 
                  where ss_quantity between 1 and 20) > 409437
            then (select avg(ss_ext_list_price) 
                  from store_sales 
                  where ss_quantity between 1 and 20) 
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 1 and 20) end bucket1 ,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 21 and 40) > 4595804
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 21 and 40) 
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 21 and 40) end bucket2,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 41 and 60) > 7887297
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 41 and 60)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 41 and 60) end bucket3,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 61 and 80) > 10872978
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 61 and 80)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 61 and 80) end bucket4,
       case when (select count(*)
                  from store_sales
                  where ss_quantity between 81 and 100) > 43571537
            then (select avg(ss_ext_list_price)
                  from store_sales
                  where ss_quantity between 81 and 100)
            else (select avg(ss_net_paid_inc_tax)
                  from store_sales
                  where ss_quantity between 81 and 100) end bucket5
from reason
where r_reason_sk = 1
POSTHOOK: type: QUERY
POSTHOOK: Input: default@reason
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 32 (CUSTOM_SIMPLE_EDGE), Reducer 9 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Reducer 10 (CUSTOM_SIMPLE_EDGE), Reducer 21 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (CUSTOM_SIMPLE_EDGE), Reducer 27 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Reducer 12 (CUSTOM_SIMPLE_EDGE), Reducer 33 (CUSTOM_SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (CUSTOM_SIMPLE_EDGE), Reducer 22 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Reducer 14 (CUSTOM_SIMPLE_EDGE), Reducer 28 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE), Reducer 34 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (CUSTOM_SIMPLE_EDGE), Reducer 18 (CUSTOM_SIMPLE_EDGE)
Reducer 20 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 21 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 22 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 23 (CUSTOM_SIMPLE_EDGE)
Reducer 25 <- Map 23 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Map 23 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Map 23 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 23 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (CUSTOM_SIMPLE_EDGE), Reducer 24 (CUSTOM_SIMPLE_EDGE)
Reducer 30 <- Map 29 (CUSTOM_SIMPLE_EDGE)
Reducer 31 <- Map 29 (CUSTOM_SIMPLE_EDGE)
Reducer 32 <- Map 29 (CUSTOM_SIMPLE_EDGE)
Reducer 33 <- Map 29 (CUSTOM_SIMPLE_EDGE)
Reducer 34 <- Map 29 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE), Reducer 30 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Reducer 19 (CUSTOM_SIMPLE_EDGE), Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 6 <- Reducer 25 (CUSTOM_SIMPLE_EDGE), Reducer 5 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Reducer 31 (CUSTOM_SIMPLE_EDGE), Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Reducer 20 (CUSTOM_SIMPLE_EDGE), Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Reducer 26 (CUSTOM_SIMPLE_EDGE), Reducer 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 16
      File Output Operator [FS_159]
        Select Operator [SEL_158] (rows=2 width=560)
          Output:["_col0","_col1","_col2","_col3","_col4"]
          Merge Join Operator [MERGEJOIN_190] (rows=2 width=676)
            Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 15 [CUSTOM_SIMPLE_EDGE]
            PARTITION_ONLY_SHUFFLE [RS_155]
              Select Operator [SEL_147] (rows=2 width=564)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                Merge Join Operator [MERGEJOIN_189] (rows=2 width=680)
                  Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                <-Reducer 14 [CUSTOM_SIMPLE_EDGE]
                  PARTITION_ONLY_SHUFFLE [RS_144]
                    Merge Join Operator [MERGEJOIN_188] (rows=2 width=568)
                      Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                    <-Reducer 13 [CUSTOM_SIMPLE_EDGE]
                      PARTITION_ONLY_SHUFFLE [RS_141]
                        Merge Join Operator [MERGEJOIN_187] (rows=2 width=564)
                          Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                        <-Reducer 12 [CUSTOM_SIMPLE_EDGE]
                          PARTITION_ONLY_SHUFFLE [RS_138]
                            Select Operator [SEL_116] (rows=2 width=452)
                              Output:["_col0","_col1","_col2","_col3","_col4"]
                              Merge Join Operator [MERGEJOIN_186] (rows=2 width=568)
                                Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                              <-Reducer 11 [CUSTOM_SIMPLE_EDGE]
                                PARTITION_ONLY_SHUFFLE [RS_113]
                                  Merge Join Operator [MERGEJOIN_185] (rows=2 width=456)
                                    Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                  <-Reducer 10 [CUSTOM_SIMPLE_EDGE]
                                    PARTITION_ONLY_SHUFFLE [RS_110]
                                      Merge Join Operator [MERGEJOIN_184] (rows=2 width=452)
                                        Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4"]
                                      <-Reducer 32 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_280]
                                          Select Operator [SEL_279] (rows=1 width=112)
                                            Output:["_col0"]
                                            Group By Operator [GBY_278] (rows=1 width=120)
                                              Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                            <-Map 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_257]
                                                Group By Operator [GBY_252] (rows=1 width=120)
                                                  Output:["_col0","_col1"],aggregations:["sum(ss_net_paid_inc_tax)","count(ss_net_paid_inc_tax)"]
                                                  Select Operator [SEL_247] (rows=182855757 width=110)
                                                    Output:["ss_net_paid_inc_tax"]
                                                    Filter Operator [FIL_242] (rows=182855757 width=110)
                                                      predicate:ss_quantity BETWEEN 41 AND 60
                                                      TableScan [TS_24] (rows=575995635 width=110)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_quantity","ss_net_paid_inc_tax"]
                                      <-Reducer 9 [CUSTOM_SIMPLE_EDGE]
                                        PARTITION_ONLY_SHUFFLE [RS_107]
                                          Select Operator [SEL_85] (rows=2 width=340)
                                            Output:["_col0","_col1","_col2","_col3"]
                                            Merge Join Operator [MERGEJOIN_183] (rows=2 width=456)
                                              Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            <-Reducer 26 [CUSTOM_SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_277]
                                                Select Operator [SEL_276] (rows=1 width=112)
                                                  Output:["_col0"]
                                                  Group By Operator [GBY_275] (rows=1 width=120)
                                                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                                  <-Map 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_234]
                                                      Group By Operator [GBY_229] (rows=1 width=120)
                                                        Output:["_col0","_col1"],aggregations:["sum(ss_ext_list_price)","count(ss_ext_list_price)"]
                                                        Select Operator [SEL_224] (rows=182855757 width=110)
                                                          Output:["ss_ext_list_price"]
                                                          Filter Operator [FIL_219] (rows=182855757 width=110)
                                                            predicate:ss_quantity BETWEEN 41 AND 60
                                                            TableScan [TS_10] (rows=575995635 width=110)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_quantity","ss_ext_list_price"]
                                            <-Reducer 8 [CUSTOM_SIMPLE_EDGE]
                                              PARTITION_ONLY_SHUFFLE [RS_82]
                                                Merge Join Operator [MERGEJOIN_182] (rows=2 width=344)
                                                  Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4"]
                                                <-Reducer 20 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_274]
                                                    Select Operator [SEL_273] (rows=1 width=4)
                                                      Output:["_col0"]
                                                      Group By Operator [GBY_272] (rows=1 width=8)
                                                        Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                      <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                        PARTITION_ONLY_SHUFFLE [RS_211]
                                                          Group By Operator [GBY_206] (rows=1 width=8)
                                                            Output:["_col0"],aggregations:["count()"]
                                                            Select Operator [SEL_201] (rows=182855757 width=3)
                                                              Filter Operator [FIL_196] (rows=182855757 width=3)
                                                                predicate:ss_quantity BETWEEN 41 AND 60
                                                                TableScan [TS_3] (rows=575995635 width=3)
                                                                  default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_quantity"]
                                                <-Reducer 7 [CUSTOM_SIMPLE_EDGE]
                                                  PARTITION_ONLY_SHUFFLE [RS_79]
                                                    Merge Join Operator [MERGEJOIN_181] (rows=2 width=340)
                                                      Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3"]
                                                    <-Reducer 31 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_271]
                                                        Select Operator [SEL_270] (rows=1 width=112)
                                                          Output:["_col0"]
                                                          Group By Operator [GBY_269] (rows=1 width=120)
                                                            Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                                          <-Map 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_256]
                                                              Group By Operator [GBY_251] (rows=1 width=120)
                                                                Output:["_col0","_col1"],aggregations:["sum(ss_net_paid_inc_tax)","count(ss_net_paid_inc_tax)"]
                                                                Select Operator [SEL_246] (rows=182855757 width=110)
                                                                  Output:["ss_net_paid_inc_tax"]
                                                                  Filter Operator [FIL_241] (rows=182855757 width=110)
                                                                    predicate:ss_quantity BETWEEN 21 AND 40
                                                                     Please refer to the previous TableScan [TS_24]
                                                    <-Reducer 6 [CUSTOM_SIMPLE_EDGE]
                                                      PARTITION_ONLY_SHUFFLE [RS_76]
                                                        Select Operator [SEL_54] (rows=2 width=228)
                                                          Output:["_col0","_col1","_col2"]
                                                          Merge Join Operator [MERGEJOIN_180] (rows=2 width=344)
                                                            Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4"]
                                                          <-Reducer 25 [CUSTOM_SIMPLE_EDGE] vectorized
                                                            PARTITION_ONLY_SHUFFLE [RS_268]
                                                              Select Operator [SEL_267] (rows=1 width=112)
                                                                Output:["_col0"]
                                                                Group By Operator [GBY_266] (rows=1 width=120)
                                                                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                                                <-Map 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_233]
                                                                    Group By Operator [GBY_228] (rows=1 width=120)
                                                                      Output:["_col0","_col1"],aggregations:["sum(ss_ext_list_price)","count(ss_ext_list_price)"]
                                                                      Select Operator [SEL_223] (rows=182855757 width=110)
                                                                        Output:["ss_ext_list_price"]
                                                                        Filter Operator [FIL_218] (rows=182855757 width=110)
                                                                          predicate:ss_quantity BETWEEN 21 AND 40
                                                                           Please refer to the previous TableScan [TS_10]
                                                          <-Reducer 5 [CUSTOM_SIMPLE_EDGE]
                                                            PARTITION_ONLY_SHUFFLE [RS_51]
                                                              Merge Join Operator [MERGEJOIN_179] (rows=2 width=232)
                                                                Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3"]
                                                              <-Reducer 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                PARTITION_ONLY_SHUFFLE [RS_265]
                                                                  Select Operator [SEL_264] (rows=1 width=4)
                                                                    Output:["_col0"]
                                                                    Group By Operator [GBY_263] (rows=1 width=8)
                                                                      Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                                    <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                      PARTITION_ONLY_SHUFFLE [RS_210]
                                                                        Group By Operator [GBY_205] (rows=1 width=8)
                                                                          Output:["_col0"],aggregations:["count()"]
                                                                          Select Operator [SEL_200] (rows=182855757 width=3)
                                                                            Filter Operator [FIL_195] (rows=182855757 width=3)
                                                                              predicate:ss_quantity BETWEEN 21 AND 40
                                                                               Please refer to the previous TableScan [TS_3]
                                                              <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
                                                                PARTITION_ONLY_SHUFFLE [RS_48]
                                                                  Merge Join Operator [MERGEJOIN_178] (rows=2 width=228)
                                                                    Conds:(Left Outer),Output:["_col0","_col1","_col2"]
                                                                  <-Reducer 3 [CUSTOM_SIMPLE_EDGE]
                                                                    PARTITION_ONLY_SHUFFLE [RS_45]
                                                                      Select Operator [SEL_23] (rows=2 width=116)
                                                                        Output:["_col0","_col1"]
                                                                        Merge Join Operator [MERGEJOIN_177] (rows=2 width=116)
                                                                          Conds:(Left Outer),Output:["_col1","_col2"]
                                                                        <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                                                          PARTITION_ONLY_SHUFFLE [RS_20]
                                                                            Merge Join Operator [MERGEJOIN_176] (rows=2 width=4)
                                                                              Conds:(Left Outer),Output:["_col1"]
                                                                            <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_193]
                                                                                Select Operator [SEL_192] (rows=2 width=4)
                                                                                  Filter Operator [FIL_191] (rows=2 width=4)
                                                                                    predicate:(r_reason_sk = 1)
                                                                                    TableScan [TS_0] (rows=72 width=4)
                                                                                      default@reason,reason,Tbl:COMPLETE,Col:COMPLETE,Output:["r_reason_sk"]
                                                                            <-Reducer 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                              PARTITION_ONLY_SHUFFLE [RS_216]
                                                                                Select Operator [SEL_215] (rows=1 width=4)
                                                                                  Output:["_col0"]
                                                                                  Group By Operator [GBY_214] (rows=1 width=8)
                                                                                    Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                                                  <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                    PARTITION_ONLY_SHUFFLE [RS_209]
                                                                                      Group By Operator [GBY_204] (rows=1 width=8)
                                                                                        Output:["_col0"],aggregations:["count()"]
                                                                                        Select Operator [SEL_199] (rows=182855757 width=3)
                                                                                          Filter Operator [FIL_194] (rows=182855757 width=3)
                                                                                            predicate:ss_quantity BETWEEN 1 AND 20
                                                                                             Please refer to the previous TableScan [TS_3]
                                                                        <-Reducer 24 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                          PARTITION_ONLY_SHUFFLE [RS_239]
                                                                            Select Operator [SEL_238] (rows=1 width=112)
                                                                              Output:["_col0"]
                                                                              Group By Operator [GBY_237] (rows=1 width=120)
                                                                                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                                                              <-Map 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                                PARTITION_ONLY_SHUFFLE [RS_232]
                                                                                  Group By Operator [GBY_227] (rows=1 width=120)
                                                                                    Output:["_col0","_col1"],aggregations:["sum(ss_ext_list_price)","count(ss_ext_list_price)"]
                                                                                    Select Operator [SEL_222] (rows=182855757 width=110)
                                                                                      Output:["ss_ext_list_price"]
                                                                                      Filter Operator [FIL_217] (rows=182855757 width=110)
                                                                                        predicate:ss_quantity BETWEEN 1 AND 20
                                                                                         Please refer to the previous TableScan [TS_10]
                                                                  <-Reducer 30 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                    PARTITION_ONLY_SHUFFLE [RS_262]
                                                                      Select Operator [SEL_261] (rows=1 width=112)
                                                                        Output:["_col0"]
                                                                        Group By Operator [GBY_260] (rows=1 width=120)
                                                                          Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                                                        <-Map 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                          PARTITION_ONLY_SHUFFLE [RS_255]
                                                                            Group By Operator [GBY_250] (rows=1 width=120)
                                                                              Output:["_col0","_col1"],aggregations:["sum(ss_net_paid_inc_tax)","count(ss_net_paid_inc_tax)"]
                                                                              Select Operator [SEL_245] (rows=182855757 width=110)
                                                                                Output:["ss_net_paid_inc_tax"]
                                                                                Filter Operator [FIL_240] (rows=182855757 width=110)
                                                                                  predicate:ss_quantity BETWEEN 1 AND 20
                                                                                   Please refer to the previous TableScan [TS_24]
                                  <-Reducer 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_283]
                                      Select Operator [SEL_282] (rows=1 width=4)
                                        Output:["_col0"]
                                        Group By Operator [GBY_281] (rows=1 width=8)
                                          Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                        <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_212]
                                            Group By Operator [GBY_207] (rows=1 width=8)
                                              Output:["_col0"],aggregations:["count()"]
                                              Select Operator [SEL_202] (rows=182855757 width=3)
                                                Filter Operator [FIL_197] (rows=182855757 width=3)
                                                  predicate:ss_quantity BETWEEN 61 AND 80
                                                   Please refer to the previous TableScan [TS_3]
                              <-Reducer 27 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_286]
                                  Select Operator [SEL_285] (rows=1 width=112)
                                    Output:["_col0"]
                                    Group By Operator [GBY_284] (rows=1 width=120)
                                      Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                                    <-Map 23 [CUSTOM_SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_235]
                                        Group By Operator [GBY_230] (rows=1 width=120)
                                          Output:["_col0","_col1"],aggregations:["sum(ss_ext_list_price)","count(ss_ext_list_price)"]
                                          Select Operator [SEL_225] (rows=182855757 width=110)
                                            Output:["ss_ext_list_price"]
                                            Filter Operator [FIL_220] (rows=182855757 width=110)
                                              predicate:ss_quantity BETWEEN 61 AND 80
                                               Please refer to the previous TableScan [TS_10]
                        <-Reducer 33 [CUSTOM_SIMPLE_EDGE] vectorized
                          PARTITION_ONLY_SHUFFLE [RS_289]
                            Select Operator [SEL_288] (rows=1 width=112)
                              Output:["_col0"]
                              Group By Operator [GBY_287] (rows=1 width=120)
                                Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                              <-Map 29 [CUSTOM_SIMPLE_EDGE] vectorized
                                PARTITION_ONLY_SHUFFLE [RS_258]
                                  Group By Operator [GBY_253] (rows=1 width=120)
                                    Output:["_col0","_col1"],aggregations:["sum(ss_net_paid_inc_tax)","count(ss_net_paid_inc_tax)"]
                                    Select Operator [SEL_248] (rows=182855757 width=110)
                                      Output:["ss_net_paid_inc_tax"]
                                      Filter Operator [FIL_243] (rows=182855757 width=110)
                                        predicate:ss_quantity BETWEEN 61 AND 80
                                         Please refer to the previous TableScan [TS_24]
                    <-Reducer 22 [CUSTOM_SIMPLE_EDGE] vectorized
                      PARTITION_ONLY_SHUFFLE [RS_292]
                        Select Operator [SEL_291] (rows=1 width=4)
                          Output:["_col0"]
                          Group By Operator [GBY_290] (rows=1 width=8)
                            Output:["_col0"],aggregations:["count(VALUE._col0)"]
                          <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_213]
                              Group By Operator [GBY_208] (rows=1 width=8)
                                Output:["_col0"],aggregations:["count()"]
                                Select Operator [SEL_203] (rows=182855757 width=3)
                                  Filter Operator [FIL_198] (rows=182855757 width=3)
                                    predicate:ss_quantity BETWEEN 81 AND 100
                                     Please refer to the previous TableScan [TS_3]
                <-Reducer 28 [CUSTOM_SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_295]
                    Select Operator [SEL_294] (rows=1 width=112)
                      Output:["_col0"]
                      Group By Operator [GBY_293] (rows=1 width=120)
                        Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                      <-Map 23 [CUSTOM_SIMPLE_EDGE] vectorized
                        PARTITION_ONLY_SHUFFLE [RS_236]
                          Group By Operator [GBY_231] (rows=1 width=120)
                            Output:["_col0","_col1"],aggregations:["sum(ss_ext_list_price)","count(ss_ext_list_price)"]
                            Select Operator [SEL_226] (rows=182855757 width=110)
                              Output:["ss_ext_list_price"]
                              Filter Operator [FIL_221] (rows=182855757 width=110)
                                predicate:ss_quantity BETWEEN 81 AND 100
                                 Please refer to the previous TableScan [TS_10]
          <-Reducer 34 [CUSTOM_SIMPLE_EDGE] vectorized
            PARTITION_ONLY_SHUFFLE [RS_298]
              Select Operator [SEL_297] (rows=1 width=112)
                Output:["_col0"]
                Group By Operator [GBY_296] (rows=1 width=120)
                  Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                <-Map 29 [CUSTOM_SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_259]
                    Group By Operator [GBY_254] (rows=1 width=120)
                      Output:["_col0","_col1"],aggregations:["sum(ss_net_paid_inc_tax)","count(ss_net_paid_inc_tax)"]
                      Select Operator [SEL_249] (rows=182855757 width=110)
                        Output:["ss_net_paid_inc_tax"]
                        Filter Operator [FIL_244] (rows=182855757 width=110)
                          predicate:ss_quantity BETWEEN 81 AND 100
                           Please refer to the previous TableScan [TS_24]

