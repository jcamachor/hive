PREHOOK: query: explain
select  channel, col_name, d_year, d_qoy, i_category, COUNT(*) sales_cnt, SUM(ext_sales_price) sales_amt FROM (
        SELECT 'store' as channel, 'ss_addr_sk' col_name, d_year, d_qoy, i_category, ss_ext_sales_price ext_sales_price
         FROM store_sales, item, date_dim
         WHERE ss_addr_sk IS NULL
           AND ss_sold_date_sk=d_date_sk
           AND ss_item_sk=i_item_sk
        UNION ALL
        SELECT 'web' as channel, 'ws_web_page_sk' col_name, d_year, d_qoy, i_category, ws_ext_sales_price ext_sales_price
         FROM web_sales, item, date_dim
         WHERE ws_web_page_sk IS NULL
           AND ws_sold_date_sk=d_date_sk
           AND ws_item_sk=i_item_sk
        UNION ALL
        SELECT 'catalog' as channel, 'cs_warehouse_sk' col_name, d_year, d_qoy, i_category, cs_ext_sales_price ext_sales_price
         FROM catalog_sales, item, date_dim
         WHERE cs_warehouse_sk IS NULL
           AND cs_sold_date_sk=d_date_sk
           AND cs_item_sk=i_item_sk) foo
GROUP BY channel, col_name, d_year, d_qoy, i_category
ORDER BY channel, col_name, d_year, d_qoy, i_category
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  channel, col_name, d_year, d_qoy, i_category, COUNT(*) sales_cnt, SUM(ext_sales_price) sales_amt FROM (
        SELECT 'store' as channel, 'ss_addr_sk' col_name, d_year, d_qoy, i_category, ss_ext_sales_price ext_sales_price
         FROM store_sales, item, date_dim
         WHERE ss_addr_sk IS NULL
           AND ss_sold_date_sk=d_date_sk
           AND ss_item_sk=i_item_sk
        UNION ALL
        SELECT 'web' as channel, 'ws_web_page_sk' col_name, d_year, d_qoy, i_category, ws_ext_sales_price ext_sales_price
         FROM web_sales, item, date_dim
         WHERE ws_web_page_sk IS NULL
           AND ws_sold_date_sk=d_date_sk
           AND ws_item_sk=i_item_sk
        UNION ALL
        SELECT 'catalog' as channel, 'cs_warehouse_sk' col_name, d_year, d_qoy, i_category, cs_ext_sales_price ext_sales_price
         FROM catalog_sales, item, date_dim
         WHERE cs_warehouse_sk IS NULL
           AND cs_sold_date_sk=d_date_sk
           AND cs_item_sk=i_item_sk) foo
GROUP BY channel, col_name, d_year, d_qoy, i_category
ORDER BY channel, col_name, d_year, d_qoy, i_category
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 14 <- Reducer 16 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE)
Map 17 <- Reducer 10 (BROADCAST_EDGE), Reducer 19 (BROADCAST_EDGE)
Map 20 <- Reducer 13 (BROADCAST_EDGE), Reducer 22 (BROADCAST_EDGE)
Reducer 10 <- Map 1 (CUSTOM_SIMPLE_EDGE)
Reducer 11 <- Map 1 (SIMPLE_EDGE), Map 20 (SIMPLE_EDGE)
Reducer 12 <- Map 21 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 13 <- Map 1 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 19 <- Map 18 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 14 (SIMPLE_EDGE)
Reducer 22 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 15 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE), Union 4 (CONTAINS)
Reducer 5 <- Union 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 1 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Map 1 (SIMPLE_EDGE), Map 17 (SIMPLE_EDGE)
Reducer 9 <- Map 18 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE), Union 4 (CONTAINS)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_191]
        Limit [LIM_190] (rows=100 width=108)
          Number of rows:100
          Select Operator [SEL_189] (rows=304916424 width=108)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 5 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_188]
              Group By Operator [GBY_187] (rows=304916424 width=108)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["count(VALUE._col0)","sum(VALUE._col1)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4
              <-Union 4 [SIMPLE_EDGE]
                <-Reducer 12 [CONTAINS]
                  Reduce Output Operator [RS_161]
                    PartitionCols:_col0, _col1, _col2, _col3, _col4
                    Group By Operator [GBY_160] (rows=609832848 width=108)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["count()","sum(_col5)"],keys:_col0, _col1, _col2, _col3, _col4
                      Top N Key Operator [TNK_159] (rows=609832848 width=108)
                        keys:_col0, _col1, _col2, _col3, _col4,sort order:+++++,top n:100
                        Select Operator [SEL_157] (rows=174233858 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Merge Join Operator [MERGEJOIN_156] (rows=174233858 width=135)
                            Conds:RS_39._col0=RS_207._col0(Inner),Output:["_col2","_col4","_col6","_col7"]
                          <-Map 21 [SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_207]
                              PartitionCols:_col0
                              Select Operator [SEL_206] (rows=73049 width=1119)
                                Output:["_col0","_col1","_col2"]
                                TableScan [TS_34] (rows=73049 width=1119)
                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_qoy"]
                          <-Reducer 11 [SIMPLE_EDGE]
                            SHUFFLE [RS_39]
                              PartitionCols:_col0
                              Merge Join Operator [MERGEJOIN_142] (rows=158394413 width=135)
                                Conds:RS_215._col1=RS_167._col0(Inner),Output:["_col0","_col2","_col4"]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_167]
                                  PartitionCols:_col0
                                  Select Operator [SEL_162] (rows=462000 width=1436)
                                    Output:["_col0","_col1"]
                                    TableScan [TS_0] (rows=462000 width=1436)
                                      default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_category"]
                              <-Map 20 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_215]
                                  PartitionCols:_col1
                                  Select Operator [SEL_214] (rows=143994918 width=135)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_213] (rows=143994918 width=135)
                                      predicate:((cs_item_sk BETWEEN DynamicValue(RS_37_item_i_item_sk_min) AND DynamicValue(RS_37_item_i_item_sk_max) and in_bloom_filter(cs_item_sk, DynamicValue(RS_37_item_i_item_sk_bloom_filter))) and (cs_sold_date_sk BETWEEN DynamicValue(RS_40_date_dim_d_date_sk_min) AND DynamicValue(RS_40_date_dim_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_40_date_dim_d_date_sk_bloom_filter))) and cs_sold_date_sk is not null and cs_warehouse_sk is null)
                                      TableScan [TS_29] (rows=287989836 width=135)
                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_warehouse_sk","cs_item_sk","cs_ext_sales_price"]
                                      <-Reducer 13 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_205]
                                          Group By Operator [GBY_204] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_174]
                                              Group By Operator [GBY_171] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_168] (rows=462000 width=1436)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_162]
                                      <-Reducer 22 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_212]
                                          Group By Operator [GBY_211] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_210]
                                              Group By Operator [GBY_209] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_208] (rows=73049 width=1119)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_206]
                <-Reducer 3 [CONTAINS]
                  Reduce Output Operator [RS_149]
                    PartitionCols:_col0, _col1, _col2, _col3, _col4
                    Group By Operator [GBY_148] (rows=609832848 width=108)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["count()","sum(_col5)"],keys:_col0, _col1, _col2, _col3, _col4
                      Top N Key Operator [TNK_147] (rows=609832848 width=108)
                        keys:_col0, _col1, _col2, _col3, _col4,sort order:+++++,top n:100
                        Select Operator [SEL_145] (rows=348477373 width=88)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Merge Join Operator [MERGEJOIN_144] (rows=348477373 width=88)
                            Conds:RS_10._col2=RS_178._col0(Inner),Output:["_col1","_col4","_col6","_col7"]
                          <-Map 15 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_178]
                              PartitionCols:_col0
                              Select Operator [SEL_177] (rows=73049 width=1119)
                                Output:["_col0","_col1","_col2"]
                                TableScan [TS_5] (rows=73049 width=1119)
                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_qoy"]
                          <-Reducer 2 [SIMPLE_EDGE]
                            SHUFFLE [RS_10]
                              PartitionCols:_col2
                              Merge Join Operator [MERGEJOIN_138] (rows=316797605 width=88)
                                Conds:RS_163._col0=RS_186._col1(Inner),Output:["_col1","_col2","_col4"]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_163]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_162]
                              <-Map 14 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_186]
                                  PartitionCols:_col1
                                  Select Operator [SEL_185] (rows=287997817 width=88)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_184] (rows=287997817 width=88)
                                      predicate:((ss_item_sk BETWEEN DynamicValue(RS_7_item_i_item_sk_min) AND DynamicValue(RS_7_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_7_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_11_date_dim_d_date_sk_min) AND DynamicValue(RS_11_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_11_date_dim_d_date_sk_bloom_filter))) and ss_addr_sk is null and ss_sold_date_sk is not null)
                                      TableScan [TS_2] (rows=575995635 width=88)
                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_addr_sk","ss_ext_sales_price"]
                                      <-Reducer 16 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_183]
                                          Group By Operator [GBY_182] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 15 [CUSTOM_SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_181]
                                              Group By Operator [GBY_180] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_179] (rows=73049 width=1119)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_177]
                                      <-Reducer 7 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_176]
                                          Group By Operator [GBY_175] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_172]
                                              Group By Operator [GBY_169] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_164] (rows=462000 width=1436)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_162]
                <-Reducer 9 [CONTAINS]
                  Reduce Output Operator [RS_155]
                    PartitionCols:_col0, _col1, _col2, _col3, _col4
                    Group By Operator [GBY_154] (rows=609832848 width=108)
                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["count()","sum(_col5)"],keys:_col0, _col1, _col2, _col3, _col4
                      Top N Key Operator [TNK_153] (rows=609832848 width=108)
                        keys:_col0, _col1, _col2, _col3, _col4,sort order:+++++,top n:100
                        Select Operator [SEL_151] (rows=87121617 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                          Merge Join Operator [MERGEJOIN_150] (rows=87121617 width=135)
                            Conds:RS_24._col0=RS_195._col0(Inner),Output:["_col2","_col4","_col6","_col7"]
                          <-Map 18 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_195]
                              PartitionCols:_col0
                              Select Operator [SEL_194] (rows=73049 width=1119)
                                Output:["_col0","_col1","_col2"]
                                TableScan [TS_19] (rows=73049 width=1119)
                                  default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year","d_qoy"]
                          <-Reducer 8 [SIMPLE_EDGE]
                            SHUFFLE [RS_24]
                              PartitionCols:_col0
                              Merge Join Operator [MERGEJOIN_140] (rows=79201469 width=135)
                                Conds:RS_203._col1=RS_165._col0(Inner),Output:["_col0","_col2","_col4"]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_165]
                                  PartitionCols:_col0
                                   Please refer to the previous Select Operator [SEL_162]
                              <-Map 17 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_203]
                                  PartitionCols:_col1
                                  Select Operator [SEL_202] (rows=72001334 width=135)
                                    Output:["_col0","_col1","_col2"]
                                    Filter Operator [FIL_201] (rows=72001334 width=135)
                                      predicate:((ws_item_sk BETWEEN DynamicValue(RS_22_item_i_item_sk_min) AND DynamicValue(RS_22_item_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_22_item_i_item_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_25_date_dim_d_date_sk_min) AND DynamicValue(RS_25_date_dim_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_25_date_dim_d_date_sk_bloom_filter))) and ws_sold_date_sk is not null and ws_web_page_sk is null)
                                      TableScan [TS_14] (rows=144002668 width=135)
                                        default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_web_page_sk","ws_ext_sales_price"]
                                      <-Reducer 10 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_193]
                                          Group By Operator [GBY_192] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 1 [CUSTOM_SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_173]
                                              Group By Operator [GBY_170] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_166] (rows=462000 width=1436)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_162]
                                      <-Reducer 19 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_200]
                                          Group By Operator [GBY_199] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_198]
                                              Group By Operator [GBY_197] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_196] (rows=73049 width=1119)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_194]

