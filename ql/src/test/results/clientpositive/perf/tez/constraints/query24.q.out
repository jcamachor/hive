Warning: Shuffle Join MERGEJOIN[291][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 4' is a cross product
PREHOOK: query: explain
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_birth_country = upper(ca_country)
  and s_zip = ca_zip
and s_market_id=7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'orchid'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_birth_country = upper(ca_country)
  and s_zip = ca_zip
and s_market_id=7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'orchid'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 31 <- Reducer 20 (BROADCAST_EDGE), Reducer 21 (BROADCAST_EDGE), Reducer 24 (BROADCAST_EDGE), Reducer 27 (BROADCAST_EDGE), Reducer 30 (BROADCAST_EDGE)
Map 8 <- Reducer 14 (BROADCAST_EDGE), Reducer 15 (BROADCAST_EDGE), Reducer 23 (BROADCAST_EDGE), Reducer 26 (BROADCAST_EDGE), Reducer 29 (BROADCAST_EDGE)
Reducer 10 <- Map 22 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 25 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Map 28 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 13 (SIMPLE_EDGE), Map 31 (SIMPLE_EDGE)
Reducer 17 <- Map 22 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Map 28 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Map 25 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 20 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 21 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 23 <- Map 22 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 22 (CUSTOM_SIMPLE_EDGE)
Reducer 26 <- Map 25 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Map 25 (CUSTOM_SIMPLE_EDGE)
Reducer 29 <- Map 28 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 30 <- Map 28 (CUSTOM_SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE), Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Map 1 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 13 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 4
      File Output Operator [FS_92]
        Select Operator [SEL_91] (rows=77303902 width=321)
          Output:["_col0","_col1","_col2","_col3"]
          Filter Operator [FIL_90] (rows=77303902 width=321)
            predicate:(_col3 > _col4)
            Merge Join Operator [MERGEJOIN_291] (rows=231911707 width=321)
              Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
            <-Reducer 3 [CUSTOM_SIMPLE_EDGE] vectorized
              PARTITION_ONLY_SHUFFLE [RS_359]
                Select Operator [SEL_358] (rows=231911707 width=88)
                  Output:["_col0","_col1","_col2","_col3"]
                  Group By Operator [GBY_357] (rows=231911707 width=88)
                    Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col9)"],keys:_col1, _col7, _col8
                    Select Operator [SEL_356] (rows=463823414 width=88)
                      Output:["_col1","_col7","_col8","_col9"]
                      Group By Operator [GBY_355] (rows=463823414 width=88)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8
                      <-Reducer 2 [SIMPLE_EDGE]
                        SHUFFLE [RS_36]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_35] (rows=927646829 width=88)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"],aggregations:["sum(_col3)"],keys:_col4, _col11, _col12, _col0, _col5, _col7, _col8, _col9, _col10
                            Merge Join Operator [MERGEJOIN_285] (rows=927646829 width=88)
                              Conds:RS_294._col1, _col2=RS_32._col3, _col10(Inner),Output:["_col0","_col3","_col4","_col5","_col7","_col8","_col9","_col10","_col11","_col12"]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_294]
                                PartitionCols:_col1, _col2
                                Select Operator [SEL_293] (rows=40000000 width=1014)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_292] (rows=40000000 width=1014)
                                    predicate:(ca_zip is not null and upper(ca_country) is not null)
                                    TableScan [TS_0] (rows=40000000 width=1014)
                                      default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_state","ca_zip","ca_country"]
                            <-Reducer 12 [SIMPLE_EDGE]
                              SHUFFLE [RS_32]
                                PartitionCols:_col3, _col10
                                Select Operator [SEL_30] (rows=843315281 width=88)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                                  Merge Join Operator [MERGEJOIN_284] (rows=843315281 width=88)
                                    Conds:RS_27._col1=RS_342._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col7","_col8","_col9","_col10","_col12","_col13","_col14"]
                                  <-Map 28 [SIMPLE_EDGE] vectorized
                                    PARTITION_ONLY_SHUFFLE [RS_342]
                                      PartitionCols:_col0
                                      Select Operator [SEL_341] (rows=80000000 width=860)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Filter Operator [FIL_340] (rows=80000000 width=860)
                                          predicate:c_birth_country is not null
                                          TableScan [TS_21] (rows=80000000 width=860)
                                            default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_first_name","c_last_name","c_birth_country"]
                                  <-Reducer 11 [SIMPLE_EDGE]
                                    SHUFFLE [RS_27]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_283] (rows=766650239 width=88)
                                        Conds:RS_24._col0=RS_332._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col8","_col9","_col10"]
                                      <-Map 25 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_332]
                                          PartitionCols:_col0
                                          Select Operator [SEL_329] (rows=231000 width=1436)
                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                            Filter Operator [FIL_327] (rows=231000 width=1436)
                                              predicate:(i_color = 'orchid')
                                              TableScan [TS_18] (rows=462000 width=1436)
                                                default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_current_price","i_size","i_color","i_units","i_manager_id"]
                                      <-Reducer 10 [SIMPLE_EDGE]
                                        SHUFFLE [RS_24]
                                          PartitionCols:_col0
                                          Select Operator [SEL_17] (rows=696954748 width=88)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Merge Join Operator [MERGEJOIN_282] (rows=696954748 width=88)
                                              Conds:RS_14._col2=RS_317._col0(Inner),Output:["_col0","_col1","_col4","_col8","_col9","_col10"]
                                            <-Map 22 [SIMPLE_EDGE] vectorized
                                              PARTITION_ONLY_SHUFFLE [RS_317]
                                                PartitionCols:_col0
                                                Select Operator [SEL_316] (rows=852 width=1910)
                                                  Output:["_col0","_col1","_col2","_col3"]
                                                  Filter Operator [FIL_315] (rows=852 width=1910)
                                                    predicate:((s_market_id = 7) and s_zip is not null)
                                                    TableScan [TS_8] (rows=1704 width=1910)
                                                      default@store,store,Tbl:COMPLETE,Col:NONE,Output:["s_store_sk","s_store_name","s_market_id","s_state","s_zip"]
                                            <-Reducer 9 [SIMPLE_EDGE]
                                              SHUFFLE [RS_14]
                                                PartitionCols:_col2
                                                Merge Join Operator [MERGEJOIN_281] (rows=633595212 width=88)
                                                  Conds:RS_354._col0, _col3=RS_297._col0, _col1(Inner),Output:["_col0","_col1","_col2","_col4"]
                                                <-Map 13 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_297]
                                                    PartitionCols:_col0, _col1
                                                    Select Operator [SEL_296] (rows=57591150 width=77)
                                                      Output:["_col0","_col1"]
                                                      TableScan [TS_6] (rows=57591150 width=77)
                                                        default@store_returns,store_returns,Tbl:COMPLETE,Col:NONE,Output:["sr_item_sk","sr_ticket_number"]
                                                <-Map 8 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_354]
                                                    PartitionCols:_col0, _col3
                                                    Select Operator [SEL_353] (rows=575995635 width=88)
                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                      Filter Operator [FIL_352] (rows=575995635 width=88)
                                                        predicate:((ss_customer_sk BETWEEN DynamicValue(RS_28_customer_c_customer_sk_min) AND DynamicValue(RS_28_customer_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_28_customer_c_customer_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_12_store_returns_sr_item_sk_min) AND DynamicValue(RS_12_store_returns_sr_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_12_store_returns_sr_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_25_item_i_item_sk_min) AND DynamicValue(RS_25_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_25_item_i_item_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_15_store_s_store_sk_min) AND DynamicValue(RS_15_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_15_store_s_store_sk_bloom_filter))) and (ss_ticket_number BETWEEN DynamicValue(RS_12_store_returns_sr_ticket_number_min) AND DynamicValue(RS_12_store_returns_sr_ticket_number_max) and in_bloom_filter(ss_ticket_number, DynamicValue(RS_12_store_returns_sr_ticket_number_bloom_filter))) and ss_customer_sk is not null and ss_store_sk is not null)
                                                        TableScan [TS_3] (rows=575995635 width=88)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_sales_price"]
                                                        <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_312]
                                                            Group By Operator [GBY_311] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=57591152)"]
                                                            <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_307]
                                                                Group By Operator [GBY_303] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=57591152)"]
                                                                  Select Operator [SEL_298] (rows=57591150 width=77)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_296]
                                                        <-Reducer 15 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_314]
                                                            Group By Operator [GBY_313] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=57591152)"]
                                                            <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_308]
                                                                Group By Operator [GBY_304] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=57591152)"]
                                                                  Select Operator [SEL_299] (rows=57591150 width=77)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_296]
                                                        <-Reducer 23 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_326]
                                                            Group By Operator [GBY_325] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 22 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_323]
                                                                Group By Operator [GBY_321] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_318] (rows=852 width=1910)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_316]
                                                        <-Reducer 26 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_339]
                                                            Group By Operator [GBY_338] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 25 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_337]
                                                                Group By Operator [GBY_335] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_333] (rows=231000 width=1436)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_329]
                                                        <-Reducer 29 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_351]
                                                            Group By Operator [GBY_350] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=80000000)"]
                                                            <-Map 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_348]
                                                                Group By Operator [GBY_346] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=80000000)"]
                                                                  Select Operator [SEL_343] (rows=80000000 width=860)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_341]
            <-Reducer 7 [CUSTOM_SIMPLE_EDGE] vectorized
              PARTITION_ONLY_SHUFFLE [RS_379]
                Select Operator [SEL_378] (rows=1 width=232)
                  Output:["_col0"]
                  Group By Operator [GBY_377] (rows=1 width=232)
                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                  <-Reducer 6 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_376]
                      Group By Operator [GBY_375] (rows=1 width=232)
                        Output:["_col0","_col1"],aggregations:["sum(_col10)","count(_col10)"]
                        Select Operator [SEL_374] (rows=463823414 width=88)
                          Output:["_col10"]
                          Group By Operator [GBY_373] (rows=463823414 width=88)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9
                          <-Reducer 5 [SIMPLE_EDGE]
                            SHUFFLE [RS_79]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                              Group By Operator [GBY_78] (rows=927646829 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"],aggregations:["sum(_col3)"],keys:_col0, _col4, _col5, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                                Merge Join Operator [MERGEJOIN_290] (rows=927646829 width=88)
                                  Conds:RS_295._col1, _col2=RS_75._col3, _col11(Inner),Output:["_col0","_col3","_col4","_col5","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_295]
                                    PartitionCols:_col1, _col2
                                     Please refer to the previous Select Operator [SEL_293]
                                <-Reducer 19 [SIMPLE_EDGE]
                                  SHUFFLE [RS_75]
                                    PartitionCols:_col3, _col11
                                    Select Operator [SEL_73] (rows=843315281 width=88)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                      Merge Join Operator [MERGEJOIN_289] (rows=843315281 width=88)
                                        Conds:RS_70._col4=RS_330._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8","_col9","_col11","_col12","_col13","_col14","_col15"]
                                      <-Map 25 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_330]
                                          PartitionCols:_col0
                                          Select Operator [SEL_328] (rows=462000 width=1436)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                             Please refer to the previous TableScan [TS_18]
                                      <-Reducer 18 [SIMPLE_EDGE]
                                        SHUFFLE [RS_70]
                                          PartitionCols:_col4
                                          Merge Join Operator [MERGEJOIN_288] (rows=766650239 width=88)
                                            Conds:RS_344._col0=RS_68._col1(Inner),Output:["_col1","_col2","_col3","_col4","_col6","_col7","_col8","_col9"]
                                          <-Map 28 [SIMPLE_EDGE] vectorized
                                            PARTITION_ONLY_SHUFFLE [RS_344]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_341]
                                          <-Reducer 17 [SIMPLE_EDGE]
                                            SHUFFLE [RS_68]
                                              PartitionCols:_col1
                                              Select Operator [SEL_64] (rows=696954748 width=88)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                Merge Join Operator [MERGEJOIN_287] (rows=696954748 width=88)
                                                  Conds:RS_61._col2=RS_319._col0(Inner),Output:["_col0","_col1","_col4","_col8","_col9","_col10"]
                                                <-Map 22 [SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_319]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_316]
                                                <-Reducer 16 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_61]
                                                    PartitionCols:_col2
                                                    Merge Join Operator [MERGEJOIN_286] (rows=633595212 width=88)
                                                      Conds:RS_372._col0, _col3=RS_300._col0, _col1(Inner),Output:["_col0","_col1","_col2","_col4"]
                                                    <-Map 13 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_300]
                                                        PartitionCols:_col0, _col1
                                                         Please refer to the previous Select Operator [SEL_296]
                                                    <-Map 31 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_372]
                                                        PartitionCols:_col0, _col3
                                                        Select Operator [SEL_371] (rows=575995635 width=88)
                                                          Output:["_col0","_col1","_col2","_col3","_col4"]
                                                          Filter Operator [FIL_370] (rows=575995635 width=88)
                                                            predicate:((ss_customer_sk BETWEEN DynamicValue(RS_67_customer_c_customer_sk_min) AND DynamicValue(RS_67_customer_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_67_customer_c_customer_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_59_store_returns_sr_item_sk_min) AND DynamicValue(RS_59_store_returns_sr_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_59_store_returns_sr_item_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_71_item_i_item_sk_min) AND DynamicValue(RS_71_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_71_item_i_item_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_62_store_s_store_sk_min) AND DynamicValue(RS_62_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_62_store_s_store_sk_bloom_filter))) and (ss_ticket_number BETWEEN DynamicValue(RS_59_store_returns_sr_ticket_number_min) AND DynamicValue(RS_59_store_returns_sr_ticket_number_max) and in_bloom_filter(ss_ticket_number, DynamicValue(RS_59_store_returns_sr_ticket_number_bloom_filter))) and ss_customer_sk is not null and ss_store_sk is not null)
                                                            TableScan [TS_50] (rows=575995635 width=88)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_sales_price"]
                                                            <-Reducer 20 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_361]
                                                                Group By Operator [GBY_360] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=57591152)"]
                                                                <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_309]
                                                                    Group By Operator [GBY_305] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=57591152)"]
                                                                      Select Operator [SEL_301] (rows=57591150 width=77)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_296]
                                                            <-Reducer 21 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_363]
                                                                Group By Operator [GBY_362] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=57591152)"]
                                                                <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_310]
                                                                    Group By Operator [GBY_306] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=57591152)"]
                                                                      Select Operator [SEL_302] (rows=57591150 width=77)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_296]
                                                            <-Reducer 24 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_365]
                                                                Group By Operator [GBY_364] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 22 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_324]
                                                                    Group By Operator [GBY_322] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_320] (rows=852 width=1910)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_316]
                                                            <-Reducer 27 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_369]
                                                                Group By Operator [GBY_368] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 25 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_336]
                                                                    Group By Operator [GBY_334] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_331] (rows=462000 width=1436)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_328]
                                                            <-Reducer 30 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_367]
                                                                Group By Operator [GBY_366] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=80000000)"]
                                                                <-Map 28 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  PARTITION_ONLY_SHUFFLE [RS_349]
                                                                    Group By Operator [GBY_347] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=80000000)"]
                                                                      Select Operator [SEL_345] (rows=80000000 width=860)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_341]

