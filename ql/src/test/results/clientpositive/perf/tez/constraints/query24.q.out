Warning: Shuffle Join MERGEJOIN[291][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 4' is a cross product
PREHOOK: query: explain
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_birth_country = upper(ca_country)
  and s_zip = ca_zip
and s_market_id=7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'orchid'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
with ssales as
(select c_last_name
      ,c_first_name
      ,s_store_name
      ,ca_state
      ,s_state
      ,i_color
      ,i_current_price
      ,i_manager_id
      ,i_units
      ,i_size
      ,sum(ss_sales_price) netpaid
from store_sales
    ,store_returns
    ,store
    ,item
    ,customer
    ,customer_address
where ss_ticket_number = sr_ticket_number
  and ss_item_sk = sr_item_sk
  and ss_customer_sk = c_customer_sk
  and ss_item_sk = i_item_sk
  and ss_store_sk = s_store_sk
  and c_birth_country = upper(ca_country)
  and s_zip = ca_zip
and s_market_id=7
group by c_last_name
        ,c_first_name
        ,s_store_name
        ,ca_state
        ,s_state
        ,i_color
        ,i_current_price
        ,i_manager_id
        ,i_units
        ,i_size)
select c_last_name
      ,c_first_name
      ,s_store_name
      ,sum(netpaid) paid
from ssales
where i_color = 'orchid'
group by c_last_name
        ,c_first_name
        ,s_store_name
having sum(netpaid) > (select 0.05*avg(netpaid)
                                 from ssales)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 24 <- Reducer 19 (BROADCAST_EDGE)
Map 8 <- Reducer 14 (BROADCAST_EDGE), Reducer 22 (BROADCAST_EDGE)
Reducer 10 <- Map 20 (SIMPLE_EDGE), Reducer 9 (SIMPLE_EDGE)
Reducer 11 <- Map 21 (SIMPLE_EDGE), Reducer 10 (SIMPLE_EDGE)
Reducer 12 <- Map 23 (SIMPLE_EDGE), Reducer 11 (SIMPLE_EDGE)
Reducer 14 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 13 (SIMPLE_EDGE), Map 24 (SIMPLE_EDGE)
Reducer 16 <- Map 20 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Map 23 (SIMPLE_EDGE), Reducer 16 (SIMPLE_EDGE)
Reducer 18 <- Map 21 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE)
Reducer 19 <- Map 13 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 22 <- Map 21 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (CUSTOM_SIMPLE_EDGE), Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 5 <- Map 1 (SIMPLE_EDGE), Reducer 18 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 13 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 4
      File Output Operator [FS_92]
        Select Operator [SEL_91] (rows=27708538 width=380)
          Output:["_col0","_col1","_col2","_col3"]
          Filter Operator [FIL_90] (rows=27708538 width=492)
            predicate:(_col3 > _col4)
            Merge Join Operator [MERGEJOIN_291] (rows=83125614 width=492)
              Conds:(Inner),Output:["_col0","_col1","_col2","_col3","_col4"]
            <-Reducer 3 [CUSTOM_SIMPLE_EDGE] vectorized
              PARTITION_ONLY_SHUFFLE [RS_332]
                Select Operator [SEL_331] (rows=83125614 width=380)
                  Output:["_col0","_col1","_col2","_col3"]
                  Group By Operator [GBY_330] (rows=83125614 width=380)
                    Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col9)"],keys:_col1, _col7, _col8
                    Select Operator [SEL_329] (rows=309360422049 width=843)
                      Output:["_col1","_col7","_col8","_col9"]
                      Group By Operator [GBY_328] (rows=309360422049 width=843)
                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8
                      <-Reducer 2 [SIMPLE_EDGE]
                        SHUFFLE [RS_36]
                          PartitionCols:_col0, _col1, _col2
                          Group By Operator [GBY_35] (rows=309360422049 width=843)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9"],aggregations:["sum(_col3)"],keys:_col4, _col11, _col12, _col0, _col5, _col7, _col8, _col9, _col10
                            Merge Join Operator [MERGEJOIN_285] (rows=309360422049 width=843)
                              Conds:RS_294._col1, _col2=RS_32._col3, _col10(Inner),Output:["_col0","_col3","_col4","_col5","_col7","_col8","_col9","_col10","_col11","_col12"]
                            <-Map 1 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_294]
                                PartitionCols:_col1, _col2
                                Select Operator [SEL_293] (rows=40000000 width=359)
                                  Output:["_col0","_col1","_col2"]
                                  Filter Operator [FIL_292] (rows=40000000 width=272)
                                    predicate:(ca_zip is not null and upper(ca_country) is not null)
                                    TableScan [TS_0] (rows=40000000 width=272)
                                      default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_state","ca_zip","ca_country"]
                            <-Reducer 12 [SIMPLE_EDGE]
                              SHUFFLE [RS_32]
                                PartitionCols:_col3, _col10
                                Select Operator [SEL_30] (rows=78430601 width=905)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"]
                                  Merge Join Operator [MERGEJOIN_284] (rows=78430601 width=905)
                                    Conds:RS_27._col1=RS_326._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col7","_col8","_col9","_col10","_col12","_col13","_col14"]
                                  <-Map 23 [SIMPLE_EDGE] vectorized
                                    SHUFFLE [RS_326]
                                      PartitionCols:_col0
                                      Select Operator [SEL_325] (rows=80000000 width=276)
                                        Output:["_col0","_col1","_col2","_col3"]
                                        Filter Operator [FIL_324] (rows=80000000 width=276)
                                          predicate:c_birth_country is not null
                                          TableScan [TS_21] (rows=80000000 width=276)
                                            default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_first_name","c_last_name","c_birth_country"]
                                  <-Reducer 11 [SIMPLE_EDGE]
                                    SHUFFLE [RS_27]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_283] (rows=78430601 width=636)
                                        Conds:RS_24._col0=RS_312._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5","_col7","_col8","_col9","_col10"]
                                      <-Map 21 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_312]
                                          PartitionCols:_col0
                                          Select Operator [SEL_310] (rows=7000 width=295)
                                            Output:["_col0","_col1","_col2","_col3","_col4"]
                                            Filter Operator [FIL_308] (rows=7000 width=384)
                                              predicate:(i_color = 'orchid')
                                              TableScan [TS_18] (rows=462000 width=384)
                                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_size","i_color","i_units","i_manager_id"]
                                      <-Reducer 10 [SIMPLE_EDGE]
                                        SHUFFLE [RS_24]
                                          PartitionCols:_col0
                                          Select Operator [SEL_17] (rows=537799796 width=377)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Merge Join Operator [MERGEJOIN_282] (rows=537799796 width=377)
                                              Conds:RS_14._col0, _col3=RS_322._col0, _col1(Inner),Output:["_col0","_col1","_col4","_col6","_col7","_col8"]
                                            <-Map 20 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_322]
                                                PartitionCols:_col0, _col1
                                                Select Operator [SEL_321] (rows=57591150 width=8)
                                                  Output:["_col0","_col1"]
                                                  TableScan [TS_9] (rows=57591150 width=8)
                                                    default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_item_sk","sr_ticket_number"]
                                            <-Reducer 9 [SIMPLE_EDGE]
                                              SHUFFLE [RS_14]
                                                PartitionCols:_col0, _col3
                                                Merge Join Operator [MERGEJOIN_281] (rows=385681992 width=379)
                                                  Conds:RS_320._col2=RS_298._col0(Inner),Output:["_col0","_col1","_col3","_col4","_col6","_col7","_col8"]
                                                <-Map 13 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_298]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_297] (rows=155 width=267)
                                                      Output:["_col0","_col1","_col2","_col3"]
                                                      Filter Operator [FIL_296] (rows=155 width=271)
                                                        predicate:((s_market_id = 7) and s_zip is not null)
                                                        TableScan [TS_6] (rows=1704 width=270)
                                                          default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_name","s_market_id","s_state","s_zip"]
                                                <-Map 8 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_320]
                                                    PartitionCols:_col2
                                                    Select Operator [SEL_319] (rows=525333486 width=122)
                                                      Output:["_col0","_col1","_col2","_col3","_col4"]
                                                      Filter Operator [FIL_318] (rows=525333486 width=122)
                                                        predicate:((ss_item_sk BETWEEN DynamicValue(RS_25_item_i_item_sk_min) AND DynamicValue(RS_25_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_25_item_i_item_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_12_store_s_store_sk_min) AND DynamicValue(RS_12_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_12_store_s_store_sk_bloom_filter))) and ss_customer_sk is not null and ss_store_sk is not null)
                                                        TableScan [TS_3] (rows=575995635 width=122)
                                                          default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_sales_price"]
                                                        <-Reducer 14 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_307]
                                                            Group By Operator [GBY_306] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              SHUFFLE [RS_304]
                                                                Group By Operator [GBY_302] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_299] (rows=155 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_297]
                                                        <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                          BROADCAST [RS_317]
                                                            Group By Operator [GBY_316] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                            <-Map 21 [CUSTOM_SIMPLE_EDGE] vectorized
                                                              PARTITION_ONLY_SHUFFLE [RS_315]
                                                                Group By Operator [GBY_314] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                  Select Operator [SEL_313] (rows=7000 width=4)
                                                                    Output:["_col0"]
                                                                     Please refer to the previous Select Operator [SEL_310]
            <-Reducer 7 [CUSTOM_SIMPLE_EDGE] vectorized
              PARTITION_ONLY_SHUFFLE [RS_344]
                Select Operator [SEL_343] (rows=1 width=112)
                  Output:["_col0"]
                  Group By Operator [GBY_342] (rows=1 width=120)
                    Output:["_col0","_col1"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"]
                  <-Reducer 6 [CUSTOM_SIMPLE_EDGE] vectorized
                    PARTITION_ONLY_SHUFFLE [RS_341]
                      Group By Operator [GBY_340] (rows=1 width=120)
                        Output:["_col0","_col1"],aggregations:["sum(_col10)","count(_col10)"]
                        Select Operator [SEL_339] (rows=2121289008973 width=932)
                          Output:["_col10"]
                          Group By Operator [GBY_338] (rows=2121289008973 width=932)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6, KEY._col7, KEY._col8, KEY._col9
                          <-Reducer 5 [SIMPLE_EDGE]
                            SHUFFLE [RS_79]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6, _col7, _col8, _col9
                              Group By Operator [GBY_78] (rows=2121289008973 width=932)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10"],aggregations:["sum(_col3)"],keys:_col0, _col4, _col5, _col7, _col8, _col9, _col10, _col11, _col12, _col13
                                Merge Join Operator [MERGEJOIN_290] (rows=2121289008973 width=932)
                                  Conds:RS_295._col1, _col2=RS_75._col3, _col11(Inner),Output:["_col0","_col3","_col4","_col5","_col7","_col8","_col9","_col10","_col11","_col12","_col13"]
                                <-Map 1 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_295]
                                    PartitionCols:_col1, _col2
                                     Please refer to the previous Select Operator [SEL_293]
                                <-Reducer 18 [SIMPLE_EDGE]
                                  SHUFFLE [RS_75]
                                    PartitionCols:_col3, _col11
                                    Select Operator [SEL_73] (rows=537799796 width=1023)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"]
                                      Merge Join Operator [MERGEJOIN_289] (rows=537799796 width=1023)
                                        Conds:RS_70._col4=RS_311._col0(Inner),Output:["_col1","_col2","_col3","_col6","_col7","_col8","_col9","_col11","_col12","_col13","_col14","_col15"]
                                      <-Map 21 [SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_311]
                                          PartitionCols:_col0
                                          Select Operator [SEL_309] (rows=462000 width=384)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                             Please refer to the previous TableScan [TS_18]
                                      <-Reducer 17 [SIMPLE_EDGE]
                                        SHUFFLE [RS_70]
                                          PartitionCols:_col4
                                          Merge Join Operator [MERGEJOIN_288] (rows=537799796 width=646)
                                            Conds:RS_327._col0=RS_68._col1(Inner),Output:["_col1","_col2","_col3","_col4","_col6","_col7","_col8","_col9"]
                                          <-Map 23 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_327]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_325]
                                          <-Reducer 16 [SIMPLE_EDGE]
                                            SHUFFLE [RS_68]
                                              PartitionCols:_col1
                                              Select Operator [SEL_64] (rows=537799796 width=377)
                                                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                Merge Join Operator [MERGEJOIN_287] (rows=537799796 width=377)
                                                  Conds:RS_61._col0, _col3=RS_323._col0, _col1(Inner),Output:["_col0","_col1","_col4","_col6","_col7","_col8"]
                                                <-Map 20 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_323]
                                                    PartitionCols:_col0, _col1
                                                     Please refer to the previous Select Operator [SEL_321]
                                                <-Reducer 15 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_61]
                                                    PartitionCols:_col0, _col3
                                                    Merge Join Operator [MERGEJOIN_286] (rows=385681992 width=379)
                                                      Conds:RS_337._col2=RS_300._col0(Inner),Output:["_col0","_col1","_col3","_col4","_col6","_col7","_col8"]
                                                    <-Map 13 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_300]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_297]
                                                    <-Map 24 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_337]
                                                        PartitionCols:_col2
                                                        Select Operator [SEL_336] (rows=525333486 width=122)
                                                          Output:["_col0","_col1","_col2","_col3","_col4"]
                                                          Filter Operator [FIL_335] (rows=525333486 width=122)
                                                            predicate:((ss_store_sk BETWEEN DynamicValue(RS_59_store_s_store_sk_min) AND DynamicValue(RS_59_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_59_store_s_store_sk_bloom_filter))) and ss_customer_sk is not null and ss_store_sk is not null)
                                                            TableScan [TS_50] (rows=575995635 width=122)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_sales_price"]
                                                            <-Reducer 19 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_334]
                                                                Group By Operator [GBY_333] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_305]
                                                                    Group By Operator [GBY_303] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_301] (rows=155 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_297]

