PREHOOK: query: explain
select sum (ss_quantity)
 from store_sales, store, customer_demographics, customer_address, date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 1998
 and  
 (
  (
   cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 100.00 and 150.00  
   )
 or
  (
  cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 50.00 and 100.00   
  )
 or 
 (
  cd_demo_sk = ss_cdemo_sk
  and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 150.00 and 200.00  
 )
 )
 and
 (
  (
  ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('KY', 'GA', 'NM')
  and ss_net_profit between 0 and 2000  
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('MT', 'OR', 'IN')
  and ss_net_profit between 150 and 3000 
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('WI', 'MO', 'WV')
  and ss_net_profit between 50 and 25000 
  )
 )
PREHOOK: type: QUERY
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@customer_demographics
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select sum (ss_quantity)
 from store_sales, store, customer_demographics, customer_address, date_dim
 where s_store_sk = ss_store_sk
 and  ss_sold_date_sk = d_date_sk and d_year = 1998
 and  
 (
  (
   cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 100.00 and 150.00  
   )
 or
  (
  cd_demo_sk = ss_cdemo_sk
   and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 50.00 and 100.00   
  )
 or 
 (
  cd_demo_sk = ss_cdemo_sk
  and 
   cd_marital_status = 'M'
   and 
   cd_education_status = '4 yr Degree'
   and 
   ss_sales_price between 150.00 and 200.00  
 )
 )
 and
 (
  (
  ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('KY', 'GA', 'NM')
  and ss_net_profit between 0 and 2000  
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('MT', 'OR', 'IN')
  and ss_net_profit between 150 and 3000 
  )
 or
  (ss_addr_sk = ca_address_sk
  and
  ca_country = 'United States'
  and
  ca_state in ('WI', 'MO', 'WV')
  and ss_net_profit between 50 and 25000 
  )
 )
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@customer_demographics
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 11 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
Reducer 3 <- Map 8 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 10 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (CUSTOM_SIMPLE_EDGE)
Reducer 7 <- Map 6 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_103]
        Group By Operator [GBY_102] (rows=1 width=8)
          Output:["_col0"],aggregations:["sum(VALUE._col0)"]
        <-Reducer 4 [CUSTOM_SIMPLE_EDGE]
          PARTITION_ONLY_SHUFFLE [RS_25]
            Group By Operator [GBY_24] (rows=1 width=8)
              Output:["_col0"],aggregations:["sum(_col1)"]
              Merge Join Operator [MERGEJOIN_74] (rows=191662558 width=88)
                Conds:RS_20._col0=RS_93._col0(Inner),Output:["_col1"]
              <-Map 10 [SIMPLE_EDGE] vectorized
                SHUFFLE [RS_93]
                  PartitionCols:_col0
                  Select Operator [SEL_92] (rows=36524 width=1119)
                    Output:["_col0"]
                    Filter Operator [FIL_91] (rows=36524 width=1119)
                      predicate:(d_year = 1998)
                      TableScan [TS_17] (rows=73049 width=1119)
                        default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
              <-Reducer 3 [SIMPLE_EDGE]
                SHUFFLE [RS_20]
                  PartitionCols:_col0
                  Select Operator [SEL_16] (rows=174238686 width=88)
                    Output:["_col0","_col1"]
                    Filter Operator [FIL_15] (rows=174238686 width=88)
                      predicate:((_col10 and _col5) or (_col11 and _col6) or (_col9 and _col4))
                      Merge Join Operator [MERGEJOIN_73] (rows=232318249 width=88)
                        Conds:RS_12._col2=RS_85._col0(Inner),Output:["_col0","_col3","_col4","_col5","_col6","_col9","_col10","_col11"]
                      <-Map 8 [SIMPLE_EDGE] vectorized
                        PARTITION_ONLY_SHUFFLE [RS_85]
                          PartitionCols:_col0
                          Select Operator [SEL_84] (rows=20000000 width=1014)
                            Output:["_col0","_col1","_col2","_col3"]
                            Filter Operator [FIL_83] (rows=20000000 width=1014)
                              predicate:(ca_country = 'United States')
                              TableScan [TS_6] (rows=40000000 width=1014)
                                default@customer_address,customer_address,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_state","ca_country"]
                      <-Reducer 2 [SIMPLE_EDGE]
                        SHUFFLE [RS_12]
                          PartitionCols:_col2
                          Merge Join Operator [MERGEJOIN_72] (rows=211198404 width=88)
                            Conds:RS_101._col1=RS_77._col0(Inner),Output:["_col0","_col2","_col3","_col4","_col5","_col6"]
                          <-Map 6 [SIMPLE_EDGE] vectorized
                            PARTITION_ONLY_SHUFFLE [RS_77]
                              PartitionCols:_col0
                              Select Operator [SEL_76] (rows=465450 width=385)
                                Output:["_col0"]
                                Filter Operator [FIL_75] (rows=465450 width=385)
                                  predicate:((cd_education_status = '4 yr Degree') and (cd_marital_status = 'M'))
                                  TableScan [TS_3] (rows=1861800 width=385)
                                    default@customer_demographics,customer_demographics,Tbl:COMPLETE,Col:NONE,Output:["cd_demo_sk","cd_marital_status","cd_education_status"]
                          <-Map 1 [SIMPLE_EDGE] vectorized
                            SHUFFLE [RS_101]
                              PartitionCols:_col1
                              Select Operator [SEL_100] (rows=191998545 width=88)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
                                Filter Operator [FIL_99] (rows=191998545 width=88)
                                  predicate:((ss_addr_sk BETWEEN DynamicValue(RS_13_customer_address_ca_address_sk_min) AND DynamicValue(RS_13_customer_address_ca_address_sk_max) and in_bloom_filter(ss_addr_sk, DynamicValue(RS_13_customer_address_ca_address_sk_bloom_filter))) and (ss_cdemo_sk BETWEEN DynamicValue(RS_10_customer_demographics_cd_demo_sk_min) AND DynamicValue(RS_10_customer_demographics_cd_demo_sk_max) and in_bloom_filter(ss_cdemo_sk, DynamicValue(RS_10_customer_demographics_cd_demo_sk_bloom_filter))) and (ss_sales_price BETWEEN 100 AND 150 or ss_sales_price BETWEEN 50 AND 100 or ss_sales_price BETWEEN 150 AND 200) and (ss_sold_date_sk BETWEEN DynamicValue(RS_21_date_dim_d_date_sk_min) AND DynamicValue(RS_21_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_21_date_dim_d_date_sk_bloom_filter))) and ss_addr_sk is not null and ss_cdemo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                  TableScan [TS_0] (rows=575995635 width=88)
                                    default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_cdemo_sk","ss_addr_sk","ss_store_sk","ss_quantity","ss_sales_price","ss_net_profit"]
                                  <-Reducer 11 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_98]
                                      Group By Operator [GBY_97] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                      <-Map 10 [CUSTOM_SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_96]
                                          Group By Operator [GBY_95] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                            Select Operator [SEL_94] (rows=36524 width=1119)
                                              Output:["_col0"]
                                               Please refer to the previous Select Operator [SEL_92]
                                  <-Reducer 7 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_82]
                                      Group By Operator [GBY_81] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                      <-Map 6 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_80]
                                          Group By Operator [GBY_79] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                            Select Operator [SEL_78] (rows=465450 width=385)
                                              Output:["_col0"]
                                               Please refer to the previous Select Operator [SEL_76]
                                  <-Reducer 9 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_90]
                                      Group By Operator [GBY_89] (rows=1 width=12)
                                        Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=20000000)"]
                                      <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                        PARTITION_ONLY_SHUFFLE [RS_88]
                                          Group By Operator [GBY_87] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=20000000)"]
                                            Select Operator [SEL_86] (rows=20000000 width=1014)
                                              Output:["_col0"]
                                               Please refer to the previous Select Operator [SEL_84]

