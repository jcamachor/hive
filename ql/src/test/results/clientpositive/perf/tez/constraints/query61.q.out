Warning: Shuffle Join MERGEJOIN[273][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 9' is a cross product
PREHOOK: query: explain
select  promotions,total,cast(promotions as decimal(15,4))/cast(total as decimal(15,4))*100
from
  (select sum(ss_ext_sales_price) promotions
   from  store_sales
        ,store
        ,promotion
        ,date_dim
        ,customer
        ,customer_address 
        ,item
   where ss_sold_date_sk = d_date_sk
   and   ss_store_sk = s_store_sk
   and   ss_promo_sk = p_promo_sk
   and   ss_customer_sk= c_customer_sk
   and   ca_address_sk = c_current_addr_sk
   and   ss_item_sk = i_item_sk 
   and   ca_gmt_offset = -7
   and   i_category = 'Electronics'
   and   (p_channel_dmail = 'Y' or p_channel_email = 'Y' or p_channel_tv = 'Y')
   and   s_gmt_offset = -7
   and   d_year = 1999
   and   d_moy  = 11) promotional_sales,
  (select sum(ss_ext_sales_price) total
   from  store_sales
        ,store
        ,date_dim
        ,customer
        ,customer_address
        ,item
   where ss_sold_date_sk = d_date_sk
   and   ss_store_sk = s_store_sk
   and   ss_customer_sk= c_customer_sk
   and   ca_address_sk = c_current_addr_sk
   and   ss_item_sk = i_item_sk
   and   ca_gmt_offset = -7
   and   i_category = 'Electronics'
   and   s_gmt_offset = -7
   and   d_year = 1999
   and   d_moy  = 11) all_sales
order by promotions, total
limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@promotion
PREHOOK: Input: default@store
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  promotions,total,cast(promotions as decimal(15,4))/cast(total as decimal(15,4))*100
from
  (select sum(ss_ext_sales_price) promotions
   from  store_sales
        ,store
        ,promotion
        ,date_dim
        ,customer
        ,customer_address 
        ,item
   where ss_sold_date_sk = d_date_sk
   and   ss_store_sk = s_store_sk
   and   ss_promo_sk = p_promo_sk
   and   ss_customer_sk= c_customer_sk
   and   ca_address_sk = c_current_addr_sk
   and   ss_item_sk = i_item_sk 
   and   ca_gmt_offset = -7
   and   i_category = 'Electronics'
   and   (p_channel_dmail = 'Y' or p_channel_email = 'Y' or p_channel_tv = 'Y')
   and   s_gmt_offset = -7
   and   d_year = 1999
   and   d_moy  = 11) promotional_sales,
  (select sum(ss_ext_sales_price) total
   from  store_sales
        ,store
        ,date_dim
        ,customer
        ,customer_address
        ,item
   where ss_sold_date_sk = d_date_sk
   and   ss_store_sk = s_store_sk
   and   ss_customer_sk= c_customer_sk
   and   ca_address_sk = c_current_addr_sk
   and   ss_item_sk = i_item_sk
   and   ca_gmt_offset = -7
   and   i_category = 'Electronics'
   and   s_gmt_offset = -7
   and   d_year = 1999
   and   d_moy  = 11) all_sales
order by promotions, total
limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@promotion
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 12 (BROADCAST_EDGE), Reducer 20 (BROADCAST_EDGE), Reducer 27 (BROADCAST_EDGE)
Map 30 <- Reducer 17 (BROADCAST_EDGE), Reducer 22 (BROADCAST_EDGE), Reducer 25 (BROADCAST_EDGE), Reducer 28 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 12 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 13 <- Map 11 (SIMPLE_EDGE), Reducer 21 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE)
Reducer 15 <- Map 26 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 16 <- Reducer 15 (CUSTOM_SIMPLE_EDGE)
Reducer 17 <- Map 11 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 11 (SIMPLE_EDGE)
Reducer 20 <- Map 19 (CUSTOM_SIMPLE_EDGE)
Reducer 21 <- Map 19 (SIMPLE_EDGE), Map 30 (SIMPLE_EDGE)
Reducer 22 <- Map 19 (CUSTOM_SIMPLE_EDGE)
Reducer 24 <- Map 23 (SIMPLE_EDGE), Map 29 (SIMPLE_EDGE)
Reducer 25 <- Reducer 24 (CUSTOM_SIMPLE_EDGE)
Reducer 27 <- Map 26 (CUSTOM_SIMPLE_EDGE)
Reducer 28 <- Map 26 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 18 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 19 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Map 23 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Map 26 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Map 29 (SIMPLE_EDGE), Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Reducer 7 (CUSTOM_SIMPLE_EDGE)
Reducer 9 <- Reducer 16 (CUSTOM_SIMPLE_EDGE), Reducer 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 10 vectorized
      File Output Operator [FS_343]
        Limit [LIM_342] (rows=1 width=336)
          Number of rows:100
          Select Operator [SEL_341] (rows=1 width=336)
            Output:["_col0","_col1","_col2"]
          <-Reducer 9 [SIMPLE_EDGE]
            SHUFFLE [RS_90]
              Select Operator [SEL_89] (rows=1 width=336)
                Output:["_col0","_col1","_col2"]
                Merge Join Operator [MERGEJOIN_273] (rows=1 width=448)
                  Conds:(Inner),Output:["_col0","_col1","_col2","_col3"]
                <-Reducer 16 [CUSTOM_SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_340]
                    Select Operator [SEL_339] (rows=1 width=224)
                      Output:["_col0","_col1"]
                      Group By Operator [GBY_338] (rows=1 width=112)
                        Output:["_col0"],aggregations:["sum(VALUE._col0)"]
                      <-Reducer 15 [CUSTOM_SIMPLE_EDGE]
                        PARTITION_ONLY_SHUFFLE [RS_83]
                          Group By Operator [GBY_82] (rows=1 width=112)
                            Output:["_col0"],aggregations:["sum(_col1)"]
                            Merge Join Operator [MERGEJOIN_272] (rows=529208 width=0)
                              Conds:RS_78._col0=RS_302._col0(Inner),Output:["_col1"]
                            <-Map 26 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_302]
                                PartitionCols:_col0
                                Select Operator [SEL_299] (rows=46200 width=4)
                                  Output:["_col0"]
                                  Filter Operator [FIL_298] (rows=46200 width=94)
                                    predicate:(i_category = 'Electronics')
                                    TableScan [TS_29] (rows=462000 width=94)
                                      default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_category"]
                            <-Reducer 14 [SIMPLE_EDGE]
                              SHUFFLE [RS_78]
                                PartitionCols:_col0
                                Select Operator [SEL_74] (rows=549816 width=4)
                                  Output:["_col0","_col1"]
                                  Merge Join Operator [MERGEJOIN_271] (rows=549816 width=4)
                                    Conds:RS_71._col0=RS_72._col1(Inner),Output:["_col3","_col5"]
                                  <-Reducer 24 [SIMPLE_EDGE]
                                    PARTITION_ONLY_SHUFFLE [RS_71]
                                      PartitionCols:_col0
                                      Merge Join Operator [MERGEJOIN_268] (rows=16000001 width=4)
                                        Conds:RS_319._col1=RS_323._col0(Inner),Output:["_col0"]
                                      <-Map 23 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_319]
                                          PartitionCols:_col1
                                          Select Operator [SEL_317] (rows=80000000 width=8)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_316] (rows=80000000 width=8)
                                              predicate:c_current_addr_sk is not null
                                              TableScan [TS_19] (rows=80000000 width=8)
                                                default@customer,customer,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_addr_sk"]
                                      <-Map 29 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_323]
                                          PartitionCols:_col0
                                          Select Operator [SEL_321] (rows=8000000 width=4)
                                            Output:["_col0"]
                                            Filter Operator [FIL_320] (rows=8000000 width=112)
                                              predicate:(ca_gmt_offset = -7)
                                              TableScan [TS_32] (rows=40000000 width=112)
                                                default@customer_address,customer_address,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_gmt_offset"]
                                  <-Reducer 13 [SIMPLE_EDGE]
                                    SHUFFLE [RS_72]
                                      PartitionCols:_col1
                                      Select Operator [SEL_67] (rows=2749079 width=4)
                                        Output:["_col0","_col1","_col2"]
                                        Merge Join Operator [MERGEJOIN_270] (rows=2749079 width=4)
                                          Conds:RS_64._col3=RS_278._col0(Inner),Output:["_col1","_col2","_col4"]
                                        <-Map 11 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_278]
                                            PartitionCols:_col0
                                            Select Operator [SEL_275] (rows=341 width=4)
                                              Output:["_col0"]
                                              Filter Operator [FIL_274] (rows=341 width=115)
                                                predicate:(s_gmt_offset = -7)
                                                TableScan [TS_3] (rows=1704 width=115)
                                                  default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_gmt_offset"]
                                        <-Reducer 21 [SIMPLE_EDGE]
                                          SHUFFLE [RS_64]
                                            PartitionCols:_col3
                                            Merge Join Operator [MERGEJOIN_269] (rows=13737330 width=4)
                                              Conds:RS_337._col0=RS_290._col0(Inner),Output:["_col1","_col2","_col3","_col4"]
                                            <-Map 19 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_290]
                                                PartitionCols:_col0
                                                Select Operator [SEL_287] (rows=50 width=4)
                                                  Output:["_col0"]
                                                  Filter Operator [FIL_286] (rows=50 width=12)
                                                    predicate:((d_moy = 11) and (d_year = 1999))
                                                    TableScan [TS_16] (rows=73049 width=12)
                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                            <-Map 30 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_337]
                                                PartitionCols:_col0
                                                Select Operator [SEL_336] (rows=501694138 width=122)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  Filter Operator [FIL_335] (rows=501694138 width=122)
                                                    predicate:((ss_customer_sk BETWEEN DynamicValue(RS_71_customer_c_customer_sk_min) AND DynamicValue(RS_71_customer_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_71_customer_c_customer_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_79_item_i_item_sk_min) AND DynamicValue(RS_79_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_79_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_62_date_dim_d_date_sk_min) AND DynamicValue(RS_62_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_62_date_dim_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_65_store_s_store_sk_min) AND DynamicValue(RS_65_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_65_store_s_store_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                    TableScan [TS_52] (rows=575995635 width=122)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ext_sales_price"]
                                                    <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_330]
                                                        Group By Operator [GBY_329] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_283]
                                                            Group By Operator [GBY_281] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_279] (rows=341 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_275]
                                                    <-Reducer 22 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_328]
                                                        Group By Operator [GBY_327] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_295]
                                                            Group By Operator [GBY_293] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_291] (rows=50 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_287]
                                                    <-Reducer 25 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_332]
                                                        Group By Operator [GBY_331] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=14591048)"]
                                                        <-Reducer 24 [CUSTOM_SIMPLE_EDGE]
                                                          PARTITION_ONLY_SHUFFLE [RS_239]
                                                            Group By Operator [GBY_238] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=14591048)"]
                                                              Select Operator [SEL_237] (rows=16000001 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Merge Join Operator [MERGEJOIN_268]
                                                    <-Reducer 28 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_334]
                                                        Group By Operator [GBY_333] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 26 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_307]
                                                            Group By Operator [GBY_305] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_303] (rows=46200 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_299]
                <-Reducer 8 [CUSTOM_SIMPLE_EDGE] vectorized
                  PARTITION_ONLY_SHUFFLE [RS_326]
                    Select Operator [SEL_325] (rows=1 width=224)
                      Output:["_col0","_col1"]
                      Group By Operator [GBY_324] (rows=1 width=112)
                        Output:["_col0"],aggregations:["sum(VALUE._col0)"]
                      <-Reducer 7 [CUSTOM_SIMPLE_EDGE]
                        PARTITION_ONLY_SHUFFLE [RS_43]
                          Group By Operator [GBY_42] (rows=1 width=112)
                            Output:["_col0"],aggregations:["sum(_col1)"]
                            Merge Join Operator [MERGEJOIN_267] (rows=505397 width=0)
                              Conds:RS_38._col2=RS_322._col0(Inner),Output:["_col1"]
                            <-Map 29 [SIMPLE_EDGE] vectorized
                              SHUFFLE [RS_322]
                                PartitionCols:_col0
                                 Please refer to the previous Select Operator [SEL_321]
                            <-Reducer 6 [SIMPLE_EDGE]
                              SHUFFLE [RS_38]
                                PartitionCols:_col2
                                Merge Join Operator [MERGEJOIN_266] (rows=2526983 width=4)
                                  Conds:RS_35._col0=RS_300._col0(Inner),Output:["_col1","_col2"]
                                <-Map 26 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_300]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_299]
                                <-Reducer 5 [SIMPLE_EDGE]
                                  SHUFFLE [RS_35]
                                    PartitionCols:_col0
                                    Select Operator [SEL_28] (rows=2625387 width=8)
                                      Output:["_col0","_col1","_col2"]
                                      Merge Join Operator [MERGEJOIN_265] (rows=2625387 width=8)
                                        Conds:RS_25._col2=RS_318._col0(Inner),Output:["_col1","_col3","_col6"]
                                      <-Map 23 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_318]
                                          PartitionCols:_col0
                                           Please refer to the previous Select Operator [SEL_317]
                                      <-Reducer 4 [SIMPLE_EDGE]
                                        SHUFFLE [RS_25]
                                          PartitionCols:_col2
                                          Merge Join Operator [MERGEJOIN_264] (rows=2625387 width=4)
                                            Conds:RS_22._col0=RS_288._col0(Inner),Output:["_col1","_col2","_col3"]
                                          <-Map 19 [SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_288]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_287]
                                          <-Reducer 3 [SIMPLE_EDGE]
                                            SHUFFLE [RS_22]
                                              PartitionCols:_col0
                                              Select Operator [SEL_15] (rows=95880426 width=97)
                                                Output:["_col0","_col1","_col2","_col3"]
                                                Merge Join Operator [MERGEJOIN_263] (rows=95880426 width=97)
                                                  Conds:RS_12._col4=RS_315._col0(Inner),Output:["_col0","_col1","_col2","_col5"]
                                                <-Map 18 [SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_315]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_314] (rows=2300 width=4)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_313] (rows=2300 width=259)
                                                        predicate:((p_channel_dmail = 'Y') or (p_channel_email = 'Y') or (p_channel_tv = 'Y'))
                                                        TableScan [TS_6] (rows=2300 width=259)
                                                          default@promotion,promotion,Tbl:COMPLETE,Col:COMPLETE,Output:["p_promo_sk","p_channel_dmail","p_channel_email","p_channel_tv"]
                                                <-Reducer 2 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_12]
                                                    PartitionCols:_col4
                                                    Merge Join Operator [MERGEJOIN_262] (rows=95880426 width=100)
                                                      Conds:RS_312._col3=RS_276._col0(Inner),Output:["_col0","_col1","_col2","_col4","_col5"]
                                                    <-Map 11 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_276]
                                                        PartitionCols:_col0
                                                         Please refer to the previous Select Operator [SEL_275]
                                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                                      SHUFFLE [RS_312]
                                                        PartitionCols:_col3
                                                        Select Operator [SEL_311] (rows=479120970 width=126)
                                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                          Filter Operator [FIL_310] (rows=479120970 width=126)
                                                            predicate:((ss_item_sk BETWEEN DynamicValue(RS_36_item_i_item_sk_min) AND DynamicValue(RS_36_item_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_36_item_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_23_date_dim_d_date_sk_min) AND DynamicValue(RS_23_date_dim_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_23_date_dim_d_date_sk_bloom_filter))) and (ss_store_sk BETWEEN DynamicValue(RS_10_store_s_store_sk_min) AND DynamicValue(RS_10_store_s_store_sk_max) and in_bloom_filter(ss_store_sk, DynamicValue(RS_10_store_s_store_sk_bloom_filter))) and ss_customer_sk is not null and ss_promo_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null)
                                                            TableScan [TS_0] (rows=575995635 width=126)
                                                              default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_promo_sk","ss_ext_sales_price"]
                                                            <-Reducer 12 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_285]
                                                                Group By Operator [GBY_284] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 11 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_282]
                                                                    Group By Operator [GBY_280] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_277] (rows=341 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_275]
                                                            <-Reducer 20 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_297]
                                                                Group By Operator [GBY_296] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 19 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_294]
                                                                    Group By Operator [GBY_292] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_289] (rows=50 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_287]
                                                            <-Reducer 27 [BROADCAST_EDGE] vectorized
                                                              BROADCAST [RS_309]
                                                                Group By Operator [GBY_308] (rows=1 width=12)
                                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                                <-Map 26 [CUSTOM_SIMPLE_EDGE] vectorized
                                                                  SHUFFLE [RS_306]
                                                                    Group By Operator [GBY_304] (rows=1 width=12)
                                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                                      Select Operator [SEL_301] (rows=46200 width=4)
                                                                        Output:["_col0"]
                                                                         Please refer to the previous Select Operator [SEL_299]

