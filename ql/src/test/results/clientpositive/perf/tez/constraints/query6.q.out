Warning: Map Join MAPJOIN[175][bigTable=?] in task 'Reducer 15' is a cross product
PREHOOK: query: explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 12 (BROADCAST_EDGE), Reducer 17 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (SIMPLE_EDGE), Map 13 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (CUSTOM_SIMPLE_EDGE)
Reducer 15 <- Map 14 (SIMPLE_EDGE), Reducer 19 (BROADCAST_EDGE)
Reducer 16 <- Map 20 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 14 (SIMPLE_EDGE)
Reducer 19 <- Reducer 18 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 8 (SIMPLE_EDGE)
Reducer 22 <- Map 21 (SIMPLE_EDGE)
Reducer 3 <- Reducer 11 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 16 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 22 (ONE_TO_ONE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7 vectorized
      File Output Operator [FS_234]
        Limit [LIM_233] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_232] (rows=46850848 width=88)
            Output:["_col0","_col1"]
          <-Reducer 6 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_231]
              Filter Operator [FIL_230] (rows=46850848 width=88)
                predicate:(_col1 >= 10L)
                Group By Operator [GBY_229] (rows=140552546 width=88)
                  Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                <-Reducer 5 [SIMPLE_EDGE]
                  SHUFFLE [RS_69]
                    PartitionCols:_col0
                    Group By Operator [GBY_68] (rows=281105093 width=88)
                      Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                      Select Operator [SEL_67] (rows=281105093 width=88)
                        Output:["_col0"]
                        Filter Operator [FIL_66] (rows=281105093 width=88)
                          predicate:(_col1 > _col4)
                          Merge Join Operator [MERGEJOIN_179] (rows=843315281 width=88)
                            Conds:RS_63._col2=RS_228._col0(Inner),Output:["_col0","_col1","_col4"]
                          <-Reducer 22 [ONE_TO_ONE_EDGE] vectorized
                            FORWARD [RS_228]
                              PartitionCols:_col0
                              Select Operator [SEL_227] (rows=231000 width=1436)
                                Output:["_col0","_col1"]
                                Group By Operator [GBY_226] (rows=231000 width=1436)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                                <-Map 21 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_225]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_224] (rows=462000 width=1436)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(i_current_price)","count(i_current_price)"],keys:i_category
                                      Filter Operator [FIL_223] (rows=462000 width=1436)
                                        predicate:i_category is not null
                                        TableScan [TS_56] (rows=462000 width=1436)
                                          default@item,j,Tbl:COMPLETE,Col:NONE,Output:["i_current_price","i_category"]
                          <-Reducer 4 [SIMPLE_EDGE]
                            SHUFFLE [RS_63]
                              PartitionCols:_col2
                              Select Operator [SEL_55] (rows=766650239 width=88)
                                Output:["_col0","_col1","_col2"]
                                Merge Join Operator [MERGEJOIN_178] (rows=766650239 width=88)
                                  Conds:RS_52._col0=RS_53._col0(Inner),Output:["_col4","_col5","_col9"]
                                <-Reducer 16 [SIMPLE_EDGE]
                                  SHUFFLE [RS_53]
                                    PartitionCols:_col0
                                    Select Operator [SEL_45] (rows=80353 width=1119)
                                      Output:["_col0"]
                                      Merge Join Operator [MERGEJOIN_176] (rows=80353 width=1119)
                                        Conds:RS_214._col0=RS_217._col1(Inner),Output:["_col2"]
                                      <-Map 20 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_217]
                                          PartitionCols:_col1
                                          Select Operator [SEL_216] (rows=73049 width=1119)
                                            Output:["_col0","_col1"]
                                            Filter Operator [FIL_215] (rows=73049 width=1119)
                                              predicate:d_month_seq is not null
                                              TableScan [TS_36] (rows=73049 width=1119)
                                                default@date_dim,d,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_month_seq"]
                                      <-Reducer 15 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_214]
                                          PartitionCols:_col0
                                          Map Join Operator [MAPJOIN_213] (rows=9131 width=1128)
                                            Conds:(Inner),Output:["_col0"]
                                          <-Reducer 19 [BROADCAST_EDGE] vectorized
                                            BROADCAST [RS_211]
                                              Select Operator [SEL_210] (rows=1 width=8)
                                                Filter Operator [FIL_209] (rows=1 width=8)
                                                  predicate:(sq_count_check(_col0) <= 1)
                                                  Group By Operator [GBY_208] (rows=1 width=8)
                                                    Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                  <-Reducer 18 [CUSTOM_SIMPLE_EDGE] vectorized
                                                    PARTITION_ONLY_SHUFFLE [RS_207]
                                                      Group By Operator [GBY_206] (rows=1 width=8)
                                                        Output:["_col0"],aggregations:["count()"]
                                                        Select Operator [SEL_205] (rows=9131 width=1119)
                                                          Group By Operator [GBY_204] (rows=9131 width=1119)
                                                            Output:["_col0"],keys:KEY._col0
                                                          <-Map 14 [SIMPLE_EDGE] vectorized
                                                            SHUFFLE [RS_203]
                                                              PartitionCols:_col0
                                                              Group By Operator [GBY_201] (rows=18262 width=1119)
                                                                Output:["_col0"],keys:d_month_seq
                                                                Select Operator [SEL_199] (rows=18262 width=1119)
                                                                  Output:["d_month_seq"]
                                                                  Filter Operator [FIL_197] (rows=18262 width=1119)
                                                                    predicate:((d_moy = 2) and (d_year = 2000))
                                                                    TableScan [TS_15] (rows=73049 width=1119)
                                                                      default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_month_seq","d_year","d_moy"]
                                          <-Group By Operator [GBY_212] (rows=9131 width=1119)
                                              Output:["_col0"],keys:KEY._col0
                                            <-Map 14 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_202]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_200] (rows=18262 width=1119)
                                                  Output:["_col0"],keys:d_month_seq
                                                  Select Operator [SEL_198] (rows=18262 width=1119)
                                                    Output:["d_month_seq"]
                                                    Filter Operator [FIL_196] (rows=18262 width=1119)
                                                      predicate:((d_moy = 2) and (d_year = 2000) and d_month_seq is not null)
                                                       Please refer to the previous TableScan [TS_15]
                                <-Reducer 3 [SIMPLE_EDGE]
                                  SHUFFLE [RS_52]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_177] (rows=696954748 width=88)
                                      Conds:RS_49._col2=RS_50._col0(Inner),Output:["_col0","_col4","_col5","_col9"]
                                    <-Reducer 11 [SIMPLE_EDGE]
                                      SHUFFLE [RS_50]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_174] (rows=88000001 width=860)
                                          Conds:RS_191._col1=RS_193._col0(Inner),Output:["_col0","_col3"]
                                        <-Map 10 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_191]
                                            PartitionCols:_col1
                                            Select Operator [SEL_190] (rows=80000000 width=860)
                                              Output:["_col0","_col1"]
                                              Filter Operator [FIL_189] (rows=80000000 width=860)
                                                predicate:c_current_addr_sk is not null
                                                TableScan [TS_6] (rows=80000000 width=860)
                                                  default@customer,c,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_current_addr_sk"]
                                        <-Map 13 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_193]
                                            PartitionCols:_col0
                                            Select Operator [SEL_192] (rows=40000000 width=1014)
                                              Output:["_col0","_col1"]
                                              TableScan [TS_9] (rows=40000000 width=1014)
                                                default@customer_address,a,Tbl:COMPLETE,Col:NONE,Output:["ca_address_sk","ca_state"]
                                    <-Reducer 2 [SIMPLE_EDGE]
                                      SHUFFLE [RS_49]
                                        PartitionCols:_col2
                                        Merge Join Operator [MERGEJOIN_173] (rows=633595212 width=88)
                                          Conds:RS_222._col1=RS_183._col0(Inner),Output:["_col0","_col2","_col4","_col5"]
                                        <-Map 8 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_183]
                                            PartitionCols:_col0
                                            Select Operator [SEL_182] (rows=462000 width=1436)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_181] (rows=462000 width=1436)
                                                predicate:i_category is not null
                                                TableScan [TS_3] (rows=462000 width=1436)
                                                  default@item,i,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_current_price","i_category"]
                                        <-Map 1 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_222]
                                            PartitionCols:_col1
                                            Select Operator [SEL_221] (rows=575995635 width=88)
                                              Output:["_col0","_col1","_col2"]
                                              Filter Operator [FIL_220] (rows=575995635 width=88)
                                                predicate:((ss_customer_sk BETWEEN DynamicValue(RS_50_c_c_customer_sk_min) AND DynamicValue(RS_50_c_c_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_50_c_c_customer_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_47_i_i_item_sk_min) AND DynamicValue(RS_47_i_i_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_47_i_i_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_53_d_d_date_sk_min) AND DynamicValue(RS_53_d_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_53_d_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                TableScan [TS_0] (rows=575995635 width=88)
                                                  default@store_sales,s,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk"]
                                                <-Reducer 12 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_195]
                                                    Group By Operator [GBY_194] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=88000000)"]
                                                    <-Reducer 11 [CUSTOM_SIMPLE_EDGE]
                                                      SHUFFLE [RS_118]
                                                        Group By Operator [GBY_117] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=88000000)"]
                                                          Select Operator [SEL_116] (rows=88000001 width=860)
                                                            Output:["_col0"]
                                                             Please refer to the previous Merge Join Operator [MERGEJOIN_174]
                                                <-Reducer 17 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_219]
                                                    Group By Operator [GBY_218] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Reducer 16 [CUSTOM_SIMPLE_EDGE]
                                                      SHUFFLE [RS_123]
                                                        Group By Operator [GBY_122] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_121] (rows=80353 width=1119)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_45]
                                                <-Reducer 9 [BROADCAST_EDGE] vectorized
                                                  BROADCAST [RS_188]
                                                    Group By Operator [GBY_187] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                    <-Map 8 [CUSTOM_SIMPLE_EDGE] vectorized
                                                      PARTITION_ONLY_SHUFFLE [RS_186]
                                                        Group By Operator [GBY_185] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                          Select Operator [SEL_184] (rows=462000 width=1436)
                                                            Output:["_col0"]
                                                             Please refer to the previous Select Operator [SEL_182]

