Warning: Shuffle Join MERGEJOIN[175][tables = [$hdt$_4, $hdt$_5]] in Stage 'Reducer 12' is a cross product
PREHOOK: query: explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@customer
PREHOOK: Input: default@customer_address
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select  a.ca_state state, count(*) cnt
 from customer_address a
     ,customer c
     ,store_sales s
     ,date_dim d
     ,item i
 where       a.ca_address_sk = c.c_current_addr_sk
 	and c.c_customer_sk = s.ss_customer_sk
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq = 
 	     (select distinct (d_month_seq)
 	      from date_dim
               where d_year = 2000
 	        and d_moy = 2 )
 	and i.i_current_price > 1.2 * 
             (select avg(j.i_current_price) 
 	     from item j 
 	     where j.i_category = i.i_category)
 group by a.ca_state
 having count(*) >= 10
 order by cnt 
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@customer
POSTHOOK: Input: default@customer_address
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 16 (BROADCAST_EDGE)
Map 15 <- Reducer 12 (BROADCAST_EDGE)
Reducer 11 <- Map 10 (SIMPLE_EDGE)
Reducer 12 <- Reducer 11 (XPROD_EDGE), Reducer 14 (XPROD_EDGE)
Reducer 13 <- Map 10 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (CUSTOM_SIMPLE_EDGE)
Reducer 16 <- Map 15 (CUSTOM_SIMPLE_EDGE)
Reducer 18 <- Map 17 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 6 (SIMPLE_EDGE)
Reducer 3 <- Map 15 (BROADCAST_EDGE), Reducer 18 (BROADCAST_EDGE), Reducer 2 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 8 <- Map 7 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 5 vectorized
      File Output Operator [FS_233]
        Limit [LIM_232] (rows=1 width=94)
          Number of rows:100
          Select Operator [SEL_231] (rows=1 width=94)
            Output:["_col0","_col1"]
          <-Reducer 4 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_230]
              Filter Operator [FIL_229] (rows=1 width=94)
                predicate:(_col1 >= 10L)
                Group By Operator [GBY_228] (rows=1 width=94)
                  Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                <-Reducer 3 [SIMPLE_EDGE]
                  SHUFFLE [RS_69]
                    PartitionCols:_col0
                    Group By Operator [GBY_68] (rows=1 width=94)
                      Output:["_col0","_col1"],aggregations:["count()"],keys:_col0
                      Select Operator [SEL_67] (rows=95896 width=309)
                        Output:["_col0"]
                        Filter Operator [FIL_66] (rows=95896 width=309)
                          predicate:(_col1 > _col4)
                          Map Join Operator [MAPJOIN_179] (rows=287690 width=309)
                            Conds:SEL_55._col2=RS_227._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1","_col4"]
                          <-Reducer 18 [BROADCAST_EDGE] vectorized
                            BROADCAST [RS_227]
                              PartitionCols:_col0
                              Select Operator [SEL_226] (rows=10 width=202)
                                Output:["_col0","_col1"]
                                Group By Operator [GBY_225] (rows=10 width=210)
                                  Output:["_col0","_col1","_col2"],aggregations:["sum(VALUE._col0)","count(VALUE._col1)"],keys:KEY._col0
                                <-Map 17 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_224]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_223] (rows=10 width=210)
                                      Output:["_col0","_col1","_col2"],aggregations:["sum(i_current_price)","count(i_current_price)"],keys:i_category
                                      Filter Operator [FIL_222] (rows=462000 width=201)
                                        predicate:i_category is not null
                                        TableScan [TS_56] (rows=462000 width=201)
                                          default@item,j,Tbl:COMPLETE,Col:COMPLETE,Output:["i_current_price","i_category"]
                          <-Select Operator [SEL_55] (rows=287690 width=287)
                              Output:["_col0","_col1","_col2"]
                              Map Join Operator [MAPJOIN_178] (rows=287690 width=287)
                                Conds:MERGEJOIN_177._col0=RS_205._col0(Inner),HybridGraceHashJoin:true,Output:["_col4","_col5","_col9"]
                              <-Map 15 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_205]
                                  PartitionCols:_col0
                                  Select Operator [SEL_204] (rows=660 width=4)
                                    Output:["_col0"]
                                    Map Join Operator [MAPJOIN_203] (rows=660 width=4)
                                      Conds:RS_42._col0=SEL_202._col1(Inner),HybridGraceHashJoin:true,Output:["_col2"]
                                    <-Reducer 12 [BROADCAST_EDGE]
                                      BROADCAST [RS_42]
                                        PartitionCols:_col0
                                        Merge Join Operator [MERGEJOIN_175] (rows=25 width=4)
                                          Conds:(Inner),Output:["_col0"]
                                        <-Reducer 11 [XPROD_EDGE] vectorized
                                          XPROD_EDGE [RS_192]
                                            Group By Operator [GBY_191] (rows=25 width=4)
                                              Output:["_col0"],keys:KEY._col0
                                            <-Map 10 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_189]
                                                PartitionCols:_col0
                                                Group By Operator [GBY_187] (rows=25 width=4)
                                                  Output:["_col0"],keys:d_month_seq
                                                  Select Operator [SEL_185] (rows=50 width=12)
                                                    Output:["d_month_seq"]
                                                    Filter Operator [FIL_183] (rows=50 width=12)
                                                      predicate:((d_moy = 2) and (d_year = 2000) and d_month_seq is not null)
                                                      TableScan [TS_15] (rows=73049 width=12)
                                                        default@date_dim,date_dim,Tbl:COMPLETE,Col:COMPLETE,Output:["d_month_seq","d_year","d_moy"]
                                        <-Reducer 14 [XPROD_EDGE] vectorized
                                          XPROD_EDGE [RS_200]
                                            Select Operator [SEL_199] (rows=1 width=8)
                                              Filter Operator [FIL_198] (rows=1 width=8)
                                                predicate:(sq_count_check(_col0) <= 1)
                                                Group By Operator [GBY_197] (rows=1 width=8)
                                                  Output:["_col0"],aggregations:["count(VALUE._col0)"]
                                                <-Reducer 13 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_196]
                                                    Group By Operator [GBY_195] (rows=1 width=8)
                                                      Output:["_col0"],aggregations:["count()"]
                                                      Select Operator [SEL_194] (rows=25 width=4)
                                                        Group By Operator [GBY_193] (rows=25 width=4)
                                                          Output:["_col0"],keys:KEY._col0
                                                        <-Map 10 [SIMPLE_EDGE] vectorized
                                                          SHUFFLE [RS_190]
                                                            PartitionCols:_col0
                                                            Group By Operator [GBY_188] (rows=25 width=4)
                                                              Output:["_col0"],keys:d_month_seq
                                                              Select Operator [SEL_186] (rows=50 width=12)
                                                                Output:["d_month_seq"]
                                                                Filter Operator [FIL_184] (rows=50 width=12)
                                                                  predicate:((d_moy = 2) and (d_year = 2000))
                                                                   Please refer to the previous TableScan [TS_15]
                                    <-Select Operator [SEL_202] (rows=73049 width=8)
                                        Output:["_col0","_col1"]
                                        Filter Operator [FIL_201] (rows=73049 width=8)
                                          predicate:d_month_seq is not null
                                          TableScan [TS_36] (rows=73049 width=8)
                                            default@date_dim,d,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_month_seq"]
                              <-Merge Join Operator [MERGEJOIN_177] (rows=525327388 width=291)
                                  Conds:RS_49._col2=RS_50._col0(Inner),Output:["_col0","_col4","_col5","_col9"]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_49]
                                    PartitionCols:_col2
                                    Merge Join Operator [MERGEJOIN_173] (rows=525327388 width=209)
                                      Conds:RS_213._col1=RS_216._col0(Inner),Output:["_col0","_col2","_col4","_col5"]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_213]
                                        PartitionCols:_col1
                                        Select Operator [SEL_212] (rows=525327388 width=11)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_211] (rows=525327388 width=11)
                                            predicate:((ss_sold_date_sk BETWEEN DynamicValue(RS_53_d_d_date_sk_min) AND DynamicValue(RS_53_d_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_53_d_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_sold_date_sk is not null)
                                            TableScan [TS_0] (rows=575995635 width=11)
                                              default@store_sales,s,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk"]
                                            <-Reducer 16 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_210]
                                                Group By Operator [GBY_209] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                    <-Map 6 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_216]
                                        PartitionCols:_col0
                                        Select Operator [SEL_215] (rows=462000 width=205)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_214] (rows=462000 width=205)
                                            predicate:i_category is not null
                                            TableScan [TS_3] (rows=462000 width=205)
                                              default@item,i,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_current_price","i_category"]
                                <-Reducer 8 [SIMPLE_EDGE]
                                  SHUFFLE [RS_50]
                                    PartitionCols:_col0
                                    Merge Join Operator [MERGEJOIN_174] (rows=80000000 width=90)
                                      Conds:RS_219._col1=RS_221._col0(Inner),Output:["_col0","_col3"]
                                    <-Map 7 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_219]
                                        PartitionCols:_col1
                                        Select Operator [SEL_218] (rows=80000000 width=8)
                                          Output:["_col0","_col1"]
                                          Filter Operator [FIL_217] (rows=80000000 width=8)
                                            predicate:c_current_addr_sk is not null
                                            TableScan [TS_6] (rows=80000000 width=8)
                                              default@customer,c,Tbl:COMPLETE,Col:COMPLETE,Output:["c_customer_sk","c_current_addr_sk"]
                                    <-Map 9 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_221]
                                        PartitionCols:_col0
                                        Select Operator [SEL_220] (rows=40000000 width=90)
                                          Output:["_col0","_col1"]
                                          TableScan [TS_9] (rows=40000000 width=90)
                                            default@customer_address,a,Tbl:COMPLETE,Col:COMPLETE,Output:["ca_address_sk","ca_state"]

