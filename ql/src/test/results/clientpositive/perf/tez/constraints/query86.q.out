PREHOOK: query: explain
select   
    sum(ws_net_paid) as total_sum
   ,i_category
   ,i_class
   ,grouping(i_category)+grouping(i_class) as lochierarchy
   ,rank() over (
 	partition by grouping(i_category)+grouping(i_class),
 	case when grouping(i_class) = 0 then i_category end 
 	order by sum(ws_net_paid) desc) as rank_within_parent
 from
    web_sales
   ,date_dim       d1
   ,item
 where
    d1.d_month_seq between 1212 and 1212+11
 and d1.d_date_sk = ws_sold_date_sk
 and i_item_sk  = ws_item_sk
 group by rollup(i_category,i_class)
 order by
   lochierarchy desc,
   case when lochierarchy = 0 then i_category end,
   rank_within_parent
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@web_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select   
    sum(ws_net_paid) as total_sum
   ,i_category
   ,i_class
   ,grouping(i_category)+grouping(i_class) as lochierarchy
   ,rank() over (
 	partition by grouping(i_category)+grouping(i_class),
 	case when grouping(i_class) = 0 then i_category end 
 	order by sum(ws_net_paid) desc) as rank_within_parent
 from
    web_sales
   ,date_dim       d1
   ,item
 where
    d1.d_month_seq between 1212 and 1212+11
 and d1.d_date_sk = ws_sold_date_sk
 and i_item_sk  = ws_item_sk
 group by rollup(i_category,i_class)
 order by
   lochierarchy desc,
   case when lochierarchy = 0 then i_category end,
   rank_within_parent
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@web_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 10 (BROADCAST_EDGE), Reducer 8 (BROADCAST_EDGE)
Reducer 10 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 7 (SIMPLE_EDGE)
Reducer 3 <- Map 9 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 8 <- Map 7 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_87]
        Limit [LIM_86] (rows=100 width=135)
          Number of rows:100
          Select Operator [SEL_85] (rows=261364852 width=135)
            Output:["_col0","_col1","_col2","_col3","_col4"]
          <-Reducer 5 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_84]
              Select Operator [SEL_83] (rows=261364852 width=135)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                PTF Operator [PTF_82] (rows=261364852 width=135)
                  Function definitions:[{},{"name:":"windowingtablefunction","order by:":"_col2 DESC NULLS LAST","partition by:":"(grouping(_col3, 1) + grouping(_col3, 0)), CASE WHEN ((grouping(_col3, 0) = 0)) THEN (_col0) ELSE (CAST( null AS STRING)) END"}]
                  Select Operator [SEL_81] (rows=261364852 width=135)
                    Output:["_col0","_col1","_col2","_col3"]
                  <-Reducer 4 [SIMPLE_EDGE] vectorized
                    SHUFFLE [RS_80]
                      PartitionCols:(grouping(_col3, 1) + grouping(_col3, 0)), CASE WHEN ((grouping(_col3, 0) = 0)) THEN (_col0) ELSE (CAST( null AS STRING)) END
                      Select Operator [SEL_79] (rows=261364852 width=135)
                        Output:["_col0","_col1","_col2","_col3"]
                        Group By Operator [GBY_78] (rows=261364852 width=135)
                          Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2
                        <-Reducer 3 [SIMPLE_EDGE]
                          SHUFFLE [RS_17]
                            PartitionCols:_col0, _col1, _col2
                            Group By Operator [GBY_16] (rows=522729705 width=135)
                              Output:["_col0","_col1","_col2","_col3"],aggregations:["sum(_col2)"],keys:_col0, _col1, 0L
                              Select Operator [SEL_14] (rows=174243235 width=135)
                                Output:["_col0","_col1","_col2"]
                                Merge Join Operator [MERGEJOIN_59] (rows=174243235 width=135)
                                  Conds:RS_11._col1=RS_69._col0(Inner),Output:["_col2","_col5","_col6"]
                                <-Map 9 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_69]
                                    PartitionCols:_col0
                                    Select Operator [SEL_68] (rows=462000 width=1436)
                                      Output:["_col0","_col1","_col2"]
                                      TableScan [TS_6] (rows=462000 width=1436)
                                        default@item,item,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_class","i_category"]
                                <-Reducer 2 [SIMPLE_EDGE]
                                  SHUFFLE [RS_11]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_58] (rows=158402938 width=135)
                                      Conds:RS_77._col0=RS_62._col0(Inner),Output:["_col1","_col2"]
                                    <-Map 7 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_62]
                                        PartitionCols:_col0
                                        Select Operator [SEL_61] (rows=73049 width=1119)
                                          Output:["_col0"]
                                          Filter Operator [FIL_60] (rows=73049 width=1119)
                                            predicate:d_month_seq BETWEEN 1212 AND 1223
                                            TableScan [TS_3] (rows=73049 width=1119)
                                              default@date_dim,d1,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_month_seq"]
                                    <-Map 1 [SIMPLE_EDGE] vectorized
                                      SHUFFLE [RS_77]
                                        PartitionCols:_col0
                                        Select Operator [SEL_76] (rows=144002668 width=135)
                                          Output:["_col0","_col1","_col2"]
                                          Filter Operator [FIL_75] (rows=144002668 width=135)
                                            predicate:((ws_item_sk BETWEEN DynamicValue(RS_12_item_i_item_sk_min) AND DynamicValue(RS_12_item_i_item_sk_max) and in_bloom_filter(ws_item_sk, DynamicValue(RS_12_item_i_item_sk_bloom_filter))) and (ws_sold_date_sk BETWEEN DynamicValue(RS_9_d1_d_date_sk_min) AND DynamicValue(RS_9_d1_d_date_sk_max) and in_bloom_filter(ws_sold_date_sk, DynamicValue(RS_9_d1_d_date_sk_bloom_filter))) and ws_sold_date_sk is not null)
                                            TableScan [TS_0] (rows=144002668 width=135)
                                              default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_item_sk","ws_net_paid"]
                                            <-Reducer 10 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_74]
                                                Group By Operator [GBY_73] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  SHUFFLE [RS_72]
                                                    Group By Operator [GBY_71] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_70] (rows=462000 width=1436)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_68]
                                            <-Reducer 8 [BROADCAST_EDGE] vectorized
                                              BROADCAST [RS_67]
                                                Group By Operator [GBY_66] (rows=1 width=12)
                                                  Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                <-Map 7 [CUSTOM_SIMPLE_EDGE] vectorized
                                                  PARTITION_ONLY_SHUFFLE [RS_65]
                                                    Group By Operator [GBY_64] (rows=1 width=12)
                                                      Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                      Select Operator [SEL_63] (rows=73049 width=1119)
                                                        Output:["_col0"]
                                                         Please refer to the previous Select Operator [SEL_61]

