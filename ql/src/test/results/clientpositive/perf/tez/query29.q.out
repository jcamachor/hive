PREHOOK: query: explain
select   
     i_item_id
    ,i_item_desc
    ,s_store_id
    ,s_store_name
    ,sum(ss_quantity)        as store_sales_quantity
    ,sum(sr_return_quantity) as store_returns_quantity
    ,sum(cs_quantity)        as catalog_sales_quantity
 from
    store_sales
   ,store_returns
   ,catalog_sales
   ,date_dim             d1
   ,date_dim             d2
   ,date_dim             d3
   ,store
   ,item
 where
     d1.d_moy               = 4 
 and d1.d_year              = 1999
 and d1.d_date_sk           = ss_sold_date_sk
 and i_item_sk              = ss_item_sk
 and s_store_sk             = ss_store_sk
 and ss_customer_sk         = sr_customer_sk
 and ss_item_sk             = sr_item_sk
 and ss_ticket_number       = sr_ticket_number
 and sr_returned_date_sk    = d2.d_date_sk
 and d2.d_moy               between 4 and  4 + 3 
 and d2.d_year              = 1999
 and sr_customer_sk         = cs_bill_customer_sk
 and sr_item_sk             = cs_item_sk
 and cs_sold_date_sk        = d3.d_date_sk     
 and d3.d_year              in (1999,1999+1,1999+2)
 group by
    i_item_id
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 order by
    i_item_id 
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@catalog_sales
PREHOOK: Input: default@date_dim
PREHOOK: Input: default@item
PREHOOK: Input: default@store
PREHOOK: Input: default@store_returns
PREHOOK: Input: default@store_sales
PREHOOK: Output: hdfs://### HDFS PATH ###
POSTHOOK: query: explain
select   
     i_item_id
    ,i_item_desc
    ,s_store_id
    ,s_store_name
    ,sum(ss_quantity)        as store_sales_quantity
    ,sum(sr_return_quantity) as store_returns_quantity
    ,sum(cs_quantity)        as catalog_sales_quantity
 from
    store_sales
   ,store_returns
   ,catalog_sales
   ,date_dim             d1
   ,date_dim             d2
   ,date_dim             d3
   ,store
   ,item
 where
     d1.d_moy               = 4 
 and d1.d_year              = 1999
 and d1.d_date_sk           = ss_sold_date_sk
 and i_item_sk              = ss_item_sk
 and s_store_sk             = ss_store_sk
 and ss_customer_sk         = sr_customer_sk
 and ss_item_sk             = sr_item_sk
 and ss_ticket_number       = sr_ticket_number
 and sr_returned_date_sk    = d2.d_date_sk
 and d2.d_moy               between 4 and  4 + 3 
 and d2.d_year              = 1999
 and sr_customer_sk         = cs_bill_customer_sk
 and sr_item_sk             = cs_item_sk
 and cs_sold_date_sk        = d3.d_date_sk     
 and d3.d_year              in (1999,1999+1,1999+2)
 group by
    i_item_id
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 order by
    i_item_id 
   ,i_item_desc
   ,s_store_id
   ,s_store_name
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@catalog_sales
POSTHOOK: Input: default@date_dim
POSTHOOK: Input: default@item
POSTHOOK: Input: default@store
POSTHOOK: Input: default@store_returns
POSTHOOK: Input: default@store_sales
POSTHOOK: Output: hdfs://### HDFS PATH ###
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 10 (BROADCAST_EDGE)
Map 11 <- Reducer 18 (BROADCAST_EDGE), Reducer 7 (BROADCAST_EDGE), Reducer 8 (BROADCAST_EDGE)
Reducer 10 <- Map 9 (CUSTOM_SIMPLE_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 16 (SIMPLE_EDGE)
Reducer 13 <- Map 17 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Map 17 (SIMPLE_EDGE), Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 19 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE)
Reducer 18 <- Map 17 (CUSTOM_SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 9 (SIMPLE_EDGE)
Reducer 3 <- Reducer 15 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Map 20 (SIMPLE_EDGE), Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)
Reducer 8 <- Reducer 2 (CUSTOM_SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_249]
        Limit [LIM_248] (rows=100 width=496)
          Number of rows:100
          Select Operator [SEL_247] (rows=264824928 width=496)
            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"]
          <-Reducer 5 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_246]
              Group By Operator [GBY_245] (rows=264824928 width=496)
                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(VALUE._col0)","sum(VALUE._col1)","sum(VALUE._col2)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3
              <-Reducer 4 [SIMPLE_EDGE]
                SHUFFLE [RS_48]
                  PartitionCols:_col0, _col1, _col2, _col3
                  Group By Operator [GBY_47] (rows=264824928 width=496)
                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6"],aggregations:["sum(_col17)","sum(_col22)","sum(_col3)"],keys:_col27, _col28, _col7, _col8
                    Top N Key Operator [TNK_94] (rows=264824928 width=483)
                      keys:_col27, _col28, _col7, _col8,sort order:++++,top n:100
                      Merge Join Operator [MERGEJOIN_206] (rows=264824928 width=483)
                        Conds:RS_43._col13=RS_244._col0(Inner),Output:["_col3","_col7","_col8","_col17","_col22","_col27","_col28"]
                      <-Map 20 [SIMPLE_EDGE] vectorized
                        SHUFFLE [RS_244]
                          PartitionCols:_col0
                          Select Operator [SEL_243] (rows=462000 width=288)
                            Output:["_col0","_col1","_col2"]
                            Filter Operator [FIL_242] (rows=462000 width=288)
                              predicate:i_item_sk is not null
                              TableScan [TS_34] (rows=462000 width=288)
                                default@item,item,Tbl:COMPLETE,Col:COMPLETE,Output:["i_item_sk","i_item_id","i_item_desc"]
                      <-Reducer 3 [SIMPLE_EDGE]
                        SHUFFLE [RS_43]
                          PartitionCols:_col13
                          Merge Join Operator [MERGEJOIN_205] (rows=264824928 width=203)
                            Conds:RS_40._col1, _col2=RS_41._col14, _col13(Inner),Output:["_col3","_col7","_col8","_col13","_col17","_col22"]
                          <-Reducer 2 [SIMPLE_EDGE]
                            PARTITION_ONLY_SHUFFLE [RS_40]
                              PartitionCols:_col1, _col2
                              Merge Join Operator [MERGEJOIN_200] (rows=7638375 width=10)
                                Conds:RS_217._col0=RS_209._col0(Inner),Output:["_col1","_col2","_col3"]
                              <-Map 9 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_209]
                                  PartitionCols:_col0
                                  Select Operator [SEL_208] (rows=1957 width=8)
                                    Output:["_col0"]
                                    Filter Operator [FIL_207] (rows=1957 width=8)
                                      predicate:((d_year) IN (1999, 2000, 2001) and d_date_sk is not null)
                                      TableScan [TS_3] (rows=73049 width=8)
                                        default@date_dim,d3,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year"]
                              <-Map 1 [SIMPLE_EDGE] vectorized
                                SHUFFLE [RS_217]
                                  PartitionCols:_col0
                                  Select Operator [SEL_216] (rows=285117831 width=15)
                                    Output:["_col0","_col1","_col2","_col3"]
                                    Filter Operator [FIL_215] (rows=285117831 width=15)
                                      predicate:((cs_sold_date_sk BETWEEN DynamicValue(RS_38_d3_d_date_sk_min) AND DynamicValue(RS_38_d3_d_date_sk_max) and in_bloom_filter(cs_sold_date_sk, DynamicValue(RS_38_d3_d_date_sk_bloom_filter))) and cs_bill_customer_sk is not null and cs_item_sk is not null and cs_sold_date_sk is not null)
                                      TableScan [TS_0] (rows=287989836 width=15)
                                        default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_item_sk","cs_quantity"]
                                      <-Reducer 10 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_214]
                                          Group By Operator [GBY_213] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                          <-Map 9 [CUSTOM_SIMPLE_EDGE] vectorized
                                            SHUFFLE [RS_212]
                                              Group By Operator [GBY_211] (rows=1 width=12)
                                                Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                Select Operator [SEL_210] (rows=1957 width=4)
                                                  Output:["_col0"]
                                                   Please refer to the previous Select Operator [SEL_208]
                          <-Reducer 15 [SIMPLE_EDGE]
                            SHUFFLE [RS_41]
                              PartitionCols:_col14, _col13
                              Select Operator [SEL_33] (rows=1314872 width=196)
                                Output:["_col1","_col2","_col7","_col11","_col13","_col14","_col16"]
                                Merge Join Operator [MERGEJOIN_204] (rows=1314872 width=196)
                                  Conds:RS_30._col3=RS_241._col0(Inner),Output:["_col1","_col5","_col7","_col8","_col10","_col18","_col19"]
                                <-Map 19 [SIMPLE_EDGE] vectorized
                                  SHUFFLE [RS_241]
                                    PartitionCols:_col0
                                    Select Operator [SEL_240] (rows=1704 width=192)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_239] (rows=1704 width=192)
                                        predicate:s_store_sk is not null
                                        TableScan [TS_18] (rows=1704 width=192)
                                          default@store,store,Tbl:COMPLETE,Col:COMPLETE,Output:["s_store_sk","s_store_id","s_store_name"]
                                <-Reducer 14 [SIMPLE_EDGE]
                                  SHUFFLE [RS_30]
                                    PartitionCols:_col3
                                    Merge Join Operator [MERGEJOIN_203] (rows=1314872 width=8)
                                      Conds:RS_27._col6=RS_222._col0(Inner),Output:["_col1","_col3","_col5","_col7","_col8","_col10"]
                                    <-Map 17 [SIMPLE_EDGE] vectorized
                                      PARTITION_ONLY_SHUFFLE [RS_222]
                                        PartitionCols:_col0
                                        Select Operator [SEL_220] (rows=201 width=12)
                                          Output:["_col0"]
                                          Filter Operator [FIL_218] (rows=201 width=12)
                                            predicate:((d_year = 1999) and d_date_sk is not null and d_moy BETWEEN 4 AND 7)
                                            TableScan [TS_15] (rows=73049 width=12)
                                              default@date_dim,d2,Tbl:COMPLETE,Col:COMPLETE,Output:["d_date_sk","d_year","d_moy"]
                                    <-Reducer 13 [SIMPLE_EDGE]
                                      SHUFFLE [RS_27]
                                        PartitionCols:_col6
                                        Merge Join Operator [MERGEJOIN_202] (rows=13096560 width=18)
                                          Conds:RS_24._col0=RS_223._col0(Inner),Output:["_col1","_col3","_col5","_col6","_col7","_col8","_col10"]
                                        <-Map 17 [SIMPLE_EDGE] vectorized
                                          PARTITION_ONLY_SHUFFLE [RS_223]
                                            PartitionCols:_col0
                                            Select Operator [SEL_221] (rows=50 width=12)
                                              Output:["_col0"]
                                              Filter Operator [FIL_219] (rows=50 width=12)
                                                predicate:((d_moy = 4) and (d_year = 1999) and d_date_sk is not null)
                                                 Please refer to the previous TableScan [TS_15]
                                        <-Reducer 12 [SIMPLE_EDGE]
                                          SHUFFLE [RS_24]
                                            PartitionCols:_col0
                                            Merge Join Operator [MERGEJOIN_201] (rows=478292911 width=31)
                                              Conds:RS_235._col1, _col2, _col4=RS_238._col1, _col2, _col3(Inner),Output:["_col0","_col1","_col3","_col5","_col6","_col7","_col8","_col10"]
                                            <-Map 11 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_235]
                                                PartitionCols:_col1, _col2, _col4
                                                Select Operator [SEL_234] (rows=501694138 width=23)
                                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                  Filter Operator [FIL_233] (rows=501694138 width=23)
                                                    predicate:((ss_customer_sk BETWEEN DynamicValue(RS_40_catalog_sales_cs_bill_customer_sk_min) AND DynamicValue(RS_40_catalog_sales_cs_bill_customer_sk_max) and in_bloom_filter(ss_customer_sk, DynamicValue(RS_40_catalog_sales_cs_bill_customer_sk_bloom_filter))) and (ss_item_sk BETWEEN DynamicValue(RS_40_catalog_sales_cs_item_sk_min) AND DynamicValue(RS_40_catalog_sales_cs_item_sk_max) and in_bloom_filter(ss_item_sk, DynamicValue(RS_40_catalog_sales_cs_item_sk_bloom_filter))) and (ss_sold_date_sk BETWEEN DynamicValue(RS_25_d1_d_date_sk_min) AND DynamicValue(RS_25_d1_d_date_sk_max) and in_bloom_filter(ss_sold_date_sk, DynamicValue(RS_25_d1_d_date_sk_bloom_filter))) and ss_customer_sk is not null and ss_item_sk is not null and ss_sold_date_sk is not null and ss_store_sk is not null and ss_ticket_number is not null)
                                                    TableScan [TS_6] (rows=575995635 width=23)
                                                      default@store_sales,store_sales,Tbl:COMPLETE,Col:COMPLETE,Output:["ss_sold_date_sk","ss_item_sk","ss_customer_sk","ss_store_sk","ss_ticket_number","ss_quantity"]
                                                    <-Reducer 18 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_228]
                                                        Group By Operator [GBY_227] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Map 17 [CUSTOM_SIMPLE_EDGE] vectorized
                                                          PARTITION_ONLY_SHUFFLE [RS_226]
                                                            Group By Operator [GBY_225] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_224] (rows=50 width=4)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Select Operator [SEL_221]
                                                    <-Reducer 7 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_230]
                                                        Group By Operator [GBY_229] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                                          PARTITION_ONLY_SHUFFLE [RS_147]
                                                            Group By Operator [GBY_146] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_145] (rows=7638375 width=6)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Merge Join Operator [MERGEJOIN_200]
                                                    <-Reducer 8 [BROADCAST_EDGE] vectorized
                                                      BROADCAST [RS_232]
                                                        Group By Operator [GBY_231] (rows=1 width=12)
                                                          Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                                                        <-Reducer 2 [CUSTOM_SIMPLE_EDGE]
                                                          PARTITION_ONLY_SHUFFLE [RS_152]
                                                            Group By Operator [GBY_151] (rows=1 width=12)
                                                              Output:["_col0","_col1","_col2"],aggregations:["min(_col0)","max(_col0)","bloom_filter(_col0, expectedEntries=1000000)"]
                                                              Select Operator [SEL_150] (rows=7638375 width=8)
                                                                Output:["_col0"]
                                                                 Please refer to the previous Merge Join Operator [MERGEJOIN_200]
                                            <-Map 16 [SIMPLE_EDGE] vectorized
                                              SHUFFLE [RS_238]
                                                PartitionCols:_col1, _col2, _col3
                                                Select Operator [SEL_237] (rows=53632139 width=19)
                                                  Output:["_col0","_col1","_col2","_col3","_col4"]
                                                  Filter Operator [FIL_236] (rows=53632139 width=19)
                                                    predicate:(sr_customer_sk is not null and sr_item_sk is not null and sr_returned_date_sk is not null and sr_ticket_number is not null)
                                                    TableScan [TS_9] (rows=57591150 width=19)
                                                      default@store_returns,store_returns,Tbl:COMPLETE,Col:COMPLETE,Output:["sr_returned_date_sk","sr_item_sk","sr_customer_sk","sr_ticket_number","sr_return_quantity"]

