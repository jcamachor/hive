PREHOOK: query: drop table sales
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table sales
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table things
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table things
POSTHOOK: type: DROPTABLE
PREHOOK: query: CREATE TABLE sales (name STRING, id INT)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@sales
POSTHOOK: query: CREATE TABLE sales (name STRING, id INT)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@sales
PREHOOK: query: CREATE TABLE things (name STRING, id INT)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@things
POSTHOOK: query: CREATE TABLE things (name STRING, id INT)
ROW FORMAT DELIMITED FIELDS TERMINATED BY '\t'
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@things
PREHOOK: query: load data local inpath '../../data/files/sales.txt' INTO TABLE sales
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@sales
POSTHOOK: query: load data local inpath '../../data/files/sales.txt' INTO TABLE sales
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@sales
PREHOOK: query: load data local inpath '../../data/files/sales.txt' INTO TABLE things
PREHOOK: type: LOAD
#### A masked pattern was here ####
PREHOOK: Output: default@things
POSTHOOK: query: load data local inpath '../../data/files/sales.txt' INTO TABLE things
POSTHOOK: type: LOAD
#### A masked pattern was here ####
POSTHOOK: Output: default@things
PREHOOK: query: EXPLAIN
SELECT sales.name,things.id FROM sales JOIN things ON (sales.id = things.id) WHERE things.name='James'
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT sales.name,things.id FROM sales JOIN things ON (sales.id = things.id) WHERE things.name='James'
POSTHOOK: type: QUERY
STAGE DEPENDENCIES:
  Stage-1 is a root stage
  Stage-0 depends on stages: Stage-1

STAGE PLANS:
  Stage: Stage-1
    Tez
#### A masked pattern was here ####
      Edges:
        Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)
#### A masked pattern was here ####
      Vertices:
        Map 1 
            Map Operator Tree:
                TableScan
                  alias: sales
                  filterExpr: id is not null (type: boolean)
                  Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: id is not null (type: boolean)
                    Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: name (type: string), id (type: int)
                      outputColumnNames: _col0, _col1
                      Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                        value expressions: _col0 (type: string)
            Execution mode: llap
            LLAP IO: no inputs
        Map 3 
            Map Operator Tree:
                TableScan
                  alias: things
                  filterExpr: ((name = 'James') and id is not null) (type: boolean)
                  Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                  Filter Operator
                    predicate: ((name = 'James') and id is not null) (type: boolean)
                    Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                    Select Operator
                      expressions: id (type: int)
                      outputColumnNames: _col1
                      Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
                      Reduce Output Operator
                        key expressions: _col1 (type: int)
                        sort order: +
                        Map-reduce partition columns: _col1 (type: int)
                        Statistics: Num rows: 1 Data size: 188 Basic stats: COMPLETE Column stats: NONE
            Execution mode: llap
            LLAP IO: no inputs
        Reducer 2 
            Execution mode: llap
            Reduce Operator Tree:
              Merge Join Operator
                condition map:
                     Inner Join 0 to 1
                keys:
                  0 _col1 (type: int)
                  1 _col1 (type: int)
                outputColumnNames: _col0, _col3
                Statistics: Num rows: 1 Data size: 206 Basic stats: COMPLETE Column stats: NONE
                Select Operator
                  expressions: _col0 (type: string), _col3 (type: int)
                  outputColumnNames: _col0, _col1
                  Statistics: Num rows: 1 Data size: 206 Basic stats: COMPLETE Column stats: NONE
                  File Output Operator
                    compressed: false
                    Statistics: Num rows: 1 Data size: 206 Basic stats: COMPLETE Column stats: NONE
                    table:
                        input format: org.apache.hadoop.mapred.SequenceFileInputFormat
                        output format: org.apache.hadoop.hive.ql.io.HiveSequenceFileOutputFormat
                        serde: org.apache.hadoop.hive.serde2.lazy.LazySimpleSerDe

  Stage: Stage-0
    Fetch Operator
      limit: -1
      Processor Tree:
        ListSink

PREHOOK: query: SELECT sales.name,things.id FROM sales JOIN things ON (sales.id = things.id) WHERE things.name='James'
PREHOOK: type: QUERY
PREHOOK: Input: default@sales
PREHOOK: Input: default@things
#### A masked pattern was here ####
POSTHOOK: query: SELECT sales.name,things.id FROM sales JOIN things ON (sales.id = things.id) WHERE things.name='James'
POSTHOOK: type: QUERY
POSTHOOK: Input: default@sales
POSTHOOK: Input: default@things
#### A masked pattern was here ####
